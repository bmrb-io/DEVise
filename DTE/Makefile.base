#  ========================================================================
#  DEVise Data Visualization Software
#  (c) Copyright 1992-1996
#  By the DEVise Development Group
#  Madison, Wisconsin
#  All Rights Reserved.
#  ========================================================================
#
#  Under no circumstances is this software to be copied, distributed,
#  or altered in any way without prior permission from the DEVise
#  Development Group.

############################################################

#  $Id$

############################################################

include ../../Makefile.common

DTE_DIR = ../../DTE

NO_RTREE = 1
#NO_UNIDATA = 1

PERL_INCL = -I$(PERL_CORE)

READ_FLAGS = -L../unidata -lunidata -L$(PERL_CORE) -lperl

DTE_INCLUDES = \
	-I$(DTE_DIR)/Core \
	-I$(DTE_DIR)/DeviseSpecific \
	-I$(DTE_DIR)/StandAlone \
	-I$(DTE_DIR)/RTree -I$(DTE_DIR)/RTree/tools \
	-I$(DTE_DIR)/Script \
	-I../../graphics \
	-I../../graphics.new \
	-I$(DTE_DIR)/GUI \
	-I../../unidata \
	$(PERL_INCL)

#no-comment is for the perl files

CFLAGS = $(ARCH_FLAGS) $(ARCH_ENDIAN) $(DTE_INCLUDES)\
	-Wall -Wno-unused -Wno-comment $(OPTFLAG) \
	-DUNIX -DLIBCS \
	-G
#	-fexternal-templates \

ifdef DTE_DEBUG
	CFLAGS += -g
endif

CORE_SRC = resolve.c lex.yy.c my.yacc.tab.c site.c types.c \
	listop.c catalog.c SockStream.c url.c StandardRead.c \
	Engine.c Aggregates.c joins.c QueryTree.c Util.c \
	InsertParse.c DeleteParse.c SchemaParse.c DropIndexParse.c \
	PQueue.c Sort.c UnionParse.c \
	ExecOp.c Inserter.c TypeCheck.c
#	TuplePtr.Plex.c TuplePtr.XPlex.c
#	ApParseCat.c FunctionRead.c

ifdef NO_RTREE
	CORE_SRC += RTreeRead.dummy.c IndexParse.dummy.c
else
	CORE_SRC += RTreeRead.c IndexParse.c
endif

ifdef NO_UNIDATA
	CORE_SRC += DevRead.dummy.c
else
	CORE_SRC += DevRead.c
endif

# Set up for profiling.
ifneq ($(DEV_PROFILE),)
	ARCH_LDPOST  += -ldl
endif

DEVISE_SPECIFIC_SRC = \
	TDataDQL.c TDataDQLInterp.c CatalogComm.c CatalogComm2.c \
	ParseAPIDTE.c 
	
GUI_SRC = CatalogComm.c DTEControl.c 

GUI_OBJ = $(CORE_SRC:.c=.o) $(GUI_SRC:.c=.o) $(RTREE_OBJ) \
	ParseAPIDTE_SA.o

DEVREAD_OBJ = \
	../attrproj/ApInit.o \
	../attrproj/ApParseCat.o \
	../attrproj/Exit.o \
	../attrproj/TData.o \
	../attrproj/TDataAscii.o \
	../attrproj/TDataAsciiInterp.o \
	../attrproj/TDataBinary.o \
	../attrproj/TDataBinaryInterp.o \
	../attrproj/DataSourceSegment.o \
	../graphics/Parse.o \
	../graphics/AttrList.o \
	../graphics/Time.o \
	../graphics/Util.o \
	../graphics/DevError.o \
	../graphics/DevStatus.o \
	../graphics.new/RecInterp.o \
	../graphics.new/CompositeParser.o \
	../graphics.new/FileIndex.o \
	../graphics.new/Group.o \
	../graphics.new/GroupDir.o \
	../graphics.new/ItemList.o \
	../graphics.new/DataSeg.o \
	../graphics.new/DataSource.o \
	../graphics.new/DataSourceFileStream.o \
	../graphics.new/DataSourceTape.o \
	../graphics.new/DataSourceBuf.o \
	../graphics.new/DataSourceDQL.o \
	../graphics.new/DevFileHeader.o \
	../graphics.new/Version.o \
	../graphics.new/MemMgr.o \
	../graphics.new/DCE.o \
	../tape/tapedrive.o \
	../generic/CompDate.o 

RTREE_SRC = \
	bulk_data.C hfpage.C \
	RTree.C genrtree.C port_genrtree.C type_compat.C \
	bitmap.C key.C box.C heap.C

RTREE_OBJ = $(RTREE_SRC:.C=.o)

ifdef NO_RTREE
	RTREE_SRC = RTreeInit.dummy.c
	RTREE_OBJ = $(RTREE_SRC:.c=.o)
endif

RTREE_UTIL = FormatVolume.c

STAND_ALONE_SRC = main.c 

SCRIPT_SRC = post-query.c util.c

SCRIPT_OBJ = $(CORE_SRC:.c=.o) $(RTREE_OBJ) $(SCRIPT_SRC:.c=.o) \
	scriptServer.o

SCRIPTSERVER_OBJ = $(CORE_SRC:.c=.o) $(RTREE_OBJ) $(SCRIPT_SRC:.c=.o) \
	scriptServer_CS.o

SCRIPTCLIENT_SRC = scriptClient.c

SCRIPTCLIENT_OBJ = $(SCRIPTCLIENT_SRC:.c=.o)

LIBSRC = $(CORE_SRC) $(DEVISE_SPECIFIC_SRC)

LIBOBJ = $(LIBSRC:.c=.o) $(RTREE_OBJ)

STAND_ALONE_OBJ = $(CORE_SRC:.c=.o) $(STAND_ALONE_SRC:.c=.o) \
	$(RTREE_OBJ)

LIBNAME = libdte.a

all: $(LIBNAME) unidata dte FormatVolume convert_bulk
lib: $(LIBNAME)

.PHONY: unidata 

unidata:
	cd ../unidata/; make libunidata.a; cd ../DTE

dte: $(STAND_ALONE_OBJ) unidata
	$(CC) -o dte $(STAND_ALONE_OBJ) $(ARCH_LDFLAGS) \
	$(READ_FLAGS) $(ARCH_SYSLIBS) $(ARCH_LDPOST)

pure: $(STAND_ALONE_OBJ) unidata
	purify $(CC) -o dte.pure $(STAND_ALONE_OBJ) $(ARCH_LDFLAGS) \
	$(READ_FLAGS) $(ARCH_SYSLIBS) $(ARCH_LDPOST)

quant: $(STAND_ALONE_OBJ) unidata
	quantify $(CC) -o dte.quant $(STAND_ALONE_OBJ) $(ARCH_LDFLAGS) \
	$(READ_FLAGS) $(ARCH_SYSLIBS) $(ARCH_LDPOST)

script: $(SCRIPT_OBJ) unidata
	$(CC) -o script $(SCRIPT_OBJ) $(ARCH_LDFLAGS) \
	$(READ_FLAGS) $(ARCH_SYSLIBS) $(ARCH_LDPOST)

scriptServer:	$(SCRIPTSERVER_OBJ) unidata
	$(CC) -o scriptServer $(SCRIPTSERVER_OBJ) $(ARCH_LDFLAGS) \
	$(READ_FLAGS) $(ARCH_SYSLIBS) $(ARCH_LDPOST) 

scriptClient:	$(SCRIPTCLIENT_OBJ)
	$(CC) -o scriptClient $(SCRIPTCLIENT_OBJ) $(ARCH_LDFLAGS) \
	$(ARCH_SYSLIBS) $(ARCH_LDPOST)

gui: $(GUI_OBJ)
	$(CC) -o gui $(GUI_OBJ) $(ARCH_GUILDFLAGS) \
	$(READ_FLAGS) $(ARCH_GUISYSLIBS) $(ARCH_LDPOST)

FormatVolume: FormatVolume.C
	$(CC) $(ARCH_ENDIAN) $< -o $@

convert_bulk: convert_bulk.C correct_math.C heap.o
	$(CC) $(ARCH_ENDIAN) heap.o $< -o $@

$(LIBNAME): $(LIBOBJ)
	ar cr $@ $(LIBOBJ)
	$(RANLIB) $@

$(DTE_DIR)/Core/my.yacc.tab.c: $(DTE_DIR)/Core/my.yacc $(DTE_DIR)/Core/my.yacc.tab.h 
	bison -d -v -o $@ $(DTE_DIR)/Core/my.yacc

$(DTE_DIR)/Core/my.yacc.tab.h: $(DTE_DIR)/Core/my.yacc
	bison -d -v -o $(DTE_DIR)/Core/my.yacc.tab.c $(DTE_DIR)/Core/my.yacc

$(DTE_DIR)/Core/lex.yy.c: $(DTE_DIR)/Core/my.lex $(DTE_DIR)/Core/my.yacc.tab.h
	flex -o$@ $(DTE_DIR)/Core/my.lex

ParseAPIDTE_SA.o : ParseAPIDTE.c ParseAPIDTE.o
	$(CC) -c $(CFLAGS) -DDTE_STANDALONE -o $@ $<

scriptServer_CS.o : scriptServer.c scriptServer.o common.h
	$(CC) -c $(CFLAGS) -DDTE_AS_SERVER -o $@ $<

.PHONY: clean mostlyclean

clean: mostlyclean
	-rm $(LIBNAME) dte FormatVolume convert_bulk gui core script

mostlyclean:
	-rm $(LIBOBJ) $(STAND_ALONE_OBJ) $(GUI_OBJ)
