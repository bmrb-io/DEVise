#! /s/std/bin/perl
#! /usr/bin/perl

#  ========================================================================
#  DEVise Data Visualization Software
#  (c) Copyright 1999-2000
#  By the DEVise Development Group
#  Madison, Wisconsin
#  All Rights Reserved.
#  ========================================================================
#
#  Under no circumstances is this software to be copied, distributed,
#  or altered in any way without prior permission from the DEVise
#  Development Group.

#  This script checks whether a jss and devised(s) with the given ID string
#  are running.  If so, it prints "OK"; otherwise it prints "FAIL".

############################################################

#  $Id$

#  $Log$
#  Revision 1.1.4.2  2000/12/11 22:14:18  wenger
#  Merged chagnes from link_gui_improvements thru js_restart_improvements
#  onto the branch, removing imgport code from the restart scripts.
#
#  Revision 1.4  2000/12/08 20:55:02  wenger
#  Major changes to cron job scripts to check and restart jspop, etc., so they
#  work when jspop and jss are on different machines.
#
#  Revision 1.3  2000/12/06 21:42:59  wenger
#  Added ID string to .out files to avoid conflicts.
#
#  Revision 1.2  2000/12/06 19:52:10  wenger
#  Check scripts now have 'test' ID option, use new kill scripts; check_jss
#  starts 4 deviseds (for BMRB).
#
#  Revision 1.1.4.1  2000/11/15 16:11:02  wenger
#  Improved DEVise.kill, check* and run* scripts: added alternate path lines
#  for perl and csh; added 'test' id, other cleanups; added scripts to run
#  the JS with soil and test ports.
#
#  Revision 1.1  2000/05/02 18:27:52  wenger
#  Set up restart scripts for BMRB setup on yola/aden.
#

############################################################

die "usage: check_jss [idStr]\n" if ($#ARGV < -1 or $#ARGV > 0);

if ($#ARGV == 0) {
  $idStr = shift(@ARGV);
} else {
  $idStr = "";
}

$debug = 0;

print "idStr = $idStr\n" if ($debug);

$foundJss = 0;
$foundDevised = 0;


# One of the hardest parts of getting this script to work has been running
# ps in such a way that the port arguments still show up when the damn
# path to java gets real long.  -ww option to ps would guarantee that
# the line would be long enough, except that with the latest Intel/Solaris
# ps, this makes the command totally hang!!  RKW 1999-12-17.

$arch = `uname`;
chomp $arch;
if ($arch eq "Linux") {
  $ps_cmd = "/bin/ps axw";
} else {
  $ps_cmd = "/usr/ucb/ps -axw";
}

open PS, "$ps_cmd >& 1 |" or die "can't fork: $!";

while (<PS>) {
  if ($idStr eq "") {
    if ($_ =~ /java *jss/) {
      $foundJss = 1;
    }
  } else {
    if ($_ =~ /java *jss.*id$idStr/) {
      $foundJss = 1;
    }
  }
  # Wildcard here because -w option screws up ps output.
  if ($idStr eq "") {
    if ($_ =~ /devised/) {
      $foundDevised = 1;
    }
  } else {
    if ($_ =~ /devised.*id $idStr/) {
      $foundDevised = 1;
    }
  }
}

close PS;

print "foundJss = $foundJss, foundDevised = $foundDevised\n" if ($debug);

$curTime = localtime(time());
if (!$foundJss) {
  print STDERR "No jss process found (at $curTime)\n";
} elsif (!$foundDevised) {
  print STDERR "No devised process found (at $curTime)\n";
}

if ($foundJss && $foundDevised) {
  print "OK\n";
} else {
  print "FAIL\n";
}
