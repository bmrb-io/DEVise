#! /usr/bin/perl
#! /s/std/bin/perl

#  ========================================================================
#  DEVise Data Visualization Software
#  (c) Copyright 1999-2000
#  By the DEVise Development Group
#  Madison, Wisconsin
#  All Rights Reserved.
#  ========================================================================
#
#  Under no circumstances is this software to be copied, distributed,
#  or altered in any way without prior permission from the DEVise
#  Development Group.

#  This is a script to check whether the jss and devised are running, and
#  restart them if they're not.  (This script is for checking the jss
#  and devised(s) when the jspop is running on a different machine.)

############################################################

#  $Id$

#  $Log$
#  Revision 1.2  2000/12/06 19:52:10  wenger
#  Check scripts now have 'test' ID option, use new kill scripts; check_jss
#  starts 4 deviseds (for BMRB).
#
#  Revision 1.1  2000/05/02 18:27:52  wenger
#  Set up restart scripts for BMRB setup on yola/aden.
#

############################################################

die "usage: check_jss <jspophost> [idStr]\n" if ($#ARGV < 0 or $#ARGV > 1);

$jspopHost = shift(@ARGV);
if ($#ARGV == 0) {
  $idStr = shift(@ARGV);
} else {
  $idStr = "regular";
}

# Set output file names according to ID string.
$sout = "jss.out.$idStr";
$dout = "devised.out.$idStr";

$debug = 0;

print "idStr = $idStr\n" if ($debug);

$foundJss = 0;
$foundDevised = 0;


# One of the hardest parts of getting this script to work has been running
# ps in such a way that the port arguments still show up when the damn
# path to java gets real long.  -ww option to ps would guarantee that
# the line would be long enough, except that with the latest Intel/Solaris
# ps, this makes the command totally hang!!  RKW 1999-12-17.

$arch = `uname`;
chomp $arch;
if ($arch eq "Linux") {
  $ps_cmd = "/bin/ps axw";
} else {
  $ps_cmd = "/usr/ucb/ps -axw";
}

open PS, "$ps_cmd >& 1 |" or die "can't fork: $!";

while (<PS>) {
  if ($_ =~ /.*java *jss.*id$idStr/) {
    $foundJss = 1;
  }
  # Wildcard here because -w option screws up ps output.
  if ($_ =~ /.*devised.*id $idStr/) {
    $foundDevised = 1;
  }
}

close PS;

print "foundJss = $foundJss, foundDevised = $foundDevised\n" if ($debug);

$curTime = localtime(time());
if (!$foundJss) {
  print "No jss process found (at $curTime)\n";
} elsif (!$foundDevised) {
  print "No devised process found (at $curTime)\n";
}

if (!$foundJss || !$foundDevised) {
  print "Restarting jss\n";

  # Make sure we kill off any stray deviseds.
  system("DEVise.kill -id $idStr");

  KillJss();
  SaveLogs();

  sleep 5;

  StartJss();
}

#-----------------------------------------------------------

sub SaveLogs {
  $timestamp = time();
  print "Saving log files as $sout.$timestamp and $dout.$timestamp\n";

  # Perl's rename() function doesn't seem to work!?!
  @args = ("mv", "$sout", "$sout.$timestamp");
  0xffff & system(@args) == 0 or print "Can't rename $sout ($?)\n";

  @args = ("mv", "$dout", "$dout.$timestamp");
  0xffff & system(@args) == 0 or print "Can't rename $dout ($?)\n";
}

#-----------------------------------------------------------

sub KillJss {
  open PS, "$ps_cmd >& 1 |" or die "can't fork: $!";

  while (<PS>) {
    if ($_ =~ /.*java *jss.*id$idStr/) {
      print "Killing $_";
      if ($_ =~ / *(\d+)/) {
        $pid = $1;
        system("kill $pid");
      }
    }
  }

  close PS;
}

#-----------------------------------------------------------

sub StartJss {

  if ($idStr eq "regular") {

    sleep 5;
    system("jss -id$idStr -jspophost$jspopHost -jssport7611 -jspopport8622 -server4 &");

  } elsif ($idStr eq "soil") {

    sleep 5;
    system("jss -id$idStr -jspophost$jspopHost -jssport7911 -jspopport8922 -devisescriptDEVise.jspop_soil &");

  } elsif ($idStr eq "test") {

    sleep 5;
    system("jss -id$idStr -jspophost$jspopHost -jssport7811 -jspopport8822 &");

  } else {
    die "Don't know how to start jss for id $idStr";

  }
}
