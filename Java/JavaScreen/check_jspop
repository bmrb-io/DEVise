#! /s/std/bin/perl

#  ========================================================================
#  DEVise Data Visualization Software
#  (c) Copyright 1999-2000
#  By the DEVise Development Group
#  Madison, Wisconsin
#  All Rights Reserved.
#  ========================================================================
#
#  Under no circumstances is this software to be copied, distributed,
#  or altered in any way without prior permission from the DEVise
#  Development Group.

#  This is a script to check whether the jspop, jss, and devised are running,
#  and restart them if they're not.

############################################################

#  $Id$

#  $Log$
#  Revision 1.11  2000/04/17 20:15:49  wenger
#  Fixed up architecture check.
#
#  Revision 1.10  2000/04/17 20:01:15  wenger
#  Modified DEVise.kill, check_jspop, and run_check so that they work
#  on Linux as well as Solaris; changed pid-finding code in them to be
#  more reliable.
#
#  Revision 1.9  2000/02/18 22:21:16  wenger
#  Various changes to make cron scripts work better with new two-machine
#  setup: added -id argument to devise, jspop, jss; updated cron scripts
#  that check status of jspop, etc.; improved usage messages of jspop,
#  jss, js; improved DEVise.kill script; removed obsolete sections of
#  Java code.
#
#  Revision 1.8  1999/12/17 23:24:10  wenger
#  Improved scripts to automatically re-start jspops if necessary.
#
#  Revision 1.7  1999/12/10 20:15:21  wenger
#  Improved scripts now check separately for "regular" and "soil science"
#  jspop and deviseds.
#
#  Revision 1.6  1999/07/23 15:06:35  wenger
#  Okay, finally got args passed to jspop correctly.
#
#  Revision 1.5  1999/07/22 21:29:15  wenger
#  Typo in previous commit.
#
#  Revision 1.4  1999/07/22 21:25:01  wenger
#  Fixed problem with passing args to jspop.
#
#  Revision 1.3  1999/07/01 14:48:17  wenger
#  Added sleep after killing jspop and Xvfb to fix problem with the new Xvfb
#  sometimes starting before the old one is done being killed.
#
#  Revision 1.2  1999/06/30 18:23:10  wenger
#  check_jspop now causes jspop to run two deviseds; jspop script sleeps
#  after launching Xvfb.
#
#  Revision 1.1  1999/06/17 18:55:27  wenger
#  Fixed kill_devised2 script for problems with 'ps'; added check_jspop
#  script for restarting jspop if necessary.
#

############################################################

die "usage: check_jspop [idStr]\n" if ($#ARGV > 0);

if ($#ARGV == 0) {
  $idStr = shift(@ARGV);
} else {
  $idStr = "regular";
}

$debug = 0;

print "idStr = $idStr\n" if ($debug);

$foundJspop = 0;
$foundJss = 0;
$foundDevised = 0;


# One of the hardest parts of getting this script to work has been running
# ps in such a way that the port arguments still show up when the damn
# path to java gets real long.  -ww option to ps would guarantee that
# the line would be long enough, except that with the latest Intel/Solaris
# ps, this makes the command totally hang!!  RKW 1999-12-17.

$arch = `uname`;
chomp $arch;
if ($arch eq "Linux") {
  $ps_cmd = "/bin/ps -axw";
} else {
  $ps_cmd = "/usr/ucb/ps -axw";
}

open PS, "$ps_cmd >& 1 |" or die "can't fork: $!";

while (<PS>) {
  if ($_ =~ /.*java *jspop.*id$idStr/) {
    $foundJspop = 1;
  }
  if ($_ =~ /.*java *jss.*id$idStr/) {
    $foundJss = 1;
  }
  # Wildcard here because -w option screws up ps output.
  if ($_ =~ /.*devised.*id $idStr/) {
    $foundDevised = 1;
  }
}

close PS;

print "foundJspop = $foundJspop, foundJss = $foundJss, foundDevised = $foundDevised\n" if ($debug);

$curTime = localtime(time());
if (!$foundJspop) {
  print "No jspop process found (at $curTime)\n";
} elsif (!$foundJss) {
  print "No jss process found (at $curTime)\n";
} elsif (!$foundDevised) {
  print "No devised process found (at $curTime)\n";
}

if (!$foundJspop || !$foundJss || !$foundDevised) {
  print "Restarting jspop\n";

  # Make sure we kill off any stray deviseds.
  system("DEVise.kill -id $idStr");

  KillJspopJss();
  SaveLogs();

  sleep 5;

  StartJspopJss();
}

#-----------------------------------------------------------

sub SaveLogs {
  $timestamp = time();
  print "Saving log files as jspop.out.$timestamp and devised.out.$timestamp\n";

  # Perl's rename() function doesn't seem to work!?!
  @args = ("mv", "jspop.out", "jspop.out.$timestamp");
  0xffff & system(@args) == 0 or print "Can't rename jspop.out ($?)\n";

  @args = ("mv", "jss.out", "jss.out.$timestamp");
  0xffff & system(@args) == 0 or print "Can't rename jss.out ($?)\n";

  @args = ("mv", "devised.out", "devised.out.$timestamp");
  0xffff & system(@args) == 0 or print "Can't rename devised.out ($?)\n";
}

#-----------------------------------------------------------

sub KillJspopJss {
  open PS, "$ps_cmd >& 1 |" or die "can't fork: $!";

  while (<PS>) {
    if ($_ =~ /.*java *jspop.*id$idStr/ || $_ =~ /.*java *jss.*id$idStr/) {
      print "Killing $_";
      if ($_ =~ / *(\d+)/) {
        $pid = $1;
        system("kill $pid");
      }
    }
  }

  close PS;
}

#-----------------------------------------------------------

sub StartJspopJss {
  if ($idStr eq "regular") {
    sleep 15;
    system("jspop -id$idStr -cmdport6666 -imgport6644 -jspopport8622 &");
    sleep 5;
    system("jss -id$idStr -jssport7611 -jspopport8622 -server2 &");
  } elsif ($idStr eq "soil") {
    sleep 15;
    system("jspop -idsoil -cmdport5966 -imgport5944 -jspopport8922 &");
    sleep 5;
    system("jss -idsoil -jssport7911 -jspopport8922 -devisescriptDEVise.jspop_soil&");
  } else {
    die "Don't know how to start jspop and jss for id $idStr";
  }
}
