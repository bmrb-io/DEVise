#! bin2/perl

#  ========================================================================
#  DEVise Data Visualization Software
#  (c) Copyright 1999-2000
#  By the DEVise Development Group
#  Madison, Wisconsin
#  All Rights Reserved.
#  ========================================================================
#
#  Under no circumstances is this software to be copied, distributed,
#  or altered in any way without prior permission from the DEVise
#  Development Group.

#  This script gets JavaScreen usage statistics.

############################################################

#  $Id$

#  $Log$
#  Revision 1.4  2001/09/05 19:31:21  wenger
#  Added bin2 and dyn_lib directories in JavaScreen release and install,
#  and made corresponding changes to scripts; other distribution-related
#  changes.
#
#  Revision 1.3  2001/07/30 19:57:43  wenger
#  Fixed the get_stats script to match the current jspop log file format;
#  added cron entries for pumori and yola to run it automatically.
#
#  Revision 1.2  2001/01/08 20:31:55  wenger
#  Merged all changes thru mgd_thru_dup_gds_fix on the js_cgi_br branch
#  back onto the trunk.
#
#  Revision 1.1.2.1  2000/12/27 19:38:36  wenger
#  Merged changes from js_restart_improvements thru zero_js_cache_check from
#  the trunk onto the js_cgi_br branch.
#
#  Revision 1.1  2000/12/13 21:22:00  wenger
#  First version of script to get usage statistics.
#

############################################################

use strict;
use Time::Local;

my $debug = 0; # 0-3
my $version = "2.0";

my $usage = "Usage: get_stats [idStr] [period]
  (Get JavaScreen usage statistics.)
  idStr can be all (default), regular, soil, test, or tst2
  period can be week (default), day, or all\n";

#
# Process command-line arguments.
#
die "$usage" if ($#ARGV < -1 or $#ARGV > 1);

if ($#ARGV >= 0) {
  if ($ARGV[0] eq "-usage") {
    print "$usage";
    exit 0;
  } elsif ($ARGV[0] eq "-version") {
    print "get_stats version $version\n";
    exit 0;
  }
}

my $idStr;
if ($#ARGV >= 0) {
  $idStr = shift(@ARGV);
} else {
  $idStr = "all";
}

my $period;
if ($#ARGV >= 0) {
  $period = shift(@ARGV);
} else {
  $period = "week";
}

# Figure out the earliest time that is within the specified period of
# the current time.
my $curTime = time();

my $timeInterval = 60 * 60 * 24;
my $earliestTime;
if ($period eq "day") {
  $earliestTime = $curTime - $timeInterval;
} elsif ($period eq "week") {
  $earliestTime = $curTime - (7 * $timeInterval);
} elsif ($period eq "all") {
  $earliestTime = 0;
} else {
  print STDERR "Illegal period value\n";
  print "$usage";
  exit 1;
}

#
# Initialize various counts and lists.
#
my $connectCount = 0;
my $openCount = 0;
my %hostList = ();
my %sessionList = ();
my $time1 = -1; # Earliest time of data.
my $time2 = -1; # Latest time of data.

#
# Figure out the form of log file name to look for, and get a list of
# all log files that match the appropriate form.
#
my $filename;
if ($idStr eq "all") {
  $filename = "jspop.out*";
} else {
  $filename = "jspop.out.$idStr*";
}
my @files = glob($filename);
print "Files: @files\n" if ($debug >= 1);

#
# Now process each log file.
#
my $file;
foreach $file (@files) {
  open(DATA_IN, $file) or die "Couldn't open log file $file: $!\n";

  my $line;
  while ($line = <DATA_IN>) {
    print "line = $line" if ($debug >= 3);

    #
    # Process client connection lines.
    #
    ProcessConnect($line);

    #
    # Process session open lines.
    #
    ProcessOpen($line);
  }

  close(DATA_IN);
}

PrintResults();

#-----------------------------------------------------------
# Processes a line if that line contains client connection information.
# Client connection lines are of the form:
#   "Client from localhost is added ... [27-Jul-01 9:02:53 AM]"
# Argument: line
# Returns: (nothing)

sub ProcessConnect {
  my $line = shift(@_);

  if ($line =~ /Client from (.*) is added \.\.\. \[(.*)\]/) {
    print "line = $line" if ($debug >= 2);

    my $client = $1;
    my $time = $2;

    my $connTime = StrToTime($time);

    if ($connTime >= $earliestTime) {
      if ($connTime >= 0) {
        if ($time1 == -1 || $connTime < $time1) {
          $time1 = $connTime;
        } elsif ($time2 == -1 || $connTime > $time2) {
          $time2 = $connTime;
        }
      }

      $connectCount++;
      $hostList{$client}++;
    }
  }
}

#-----------------------------------------------------------
# Processes a line if that line contains session open information.
# Client connection lines are of the form:
# Received command from client(1) :  "JAVAC_OpenSession {DEViseSession/nrg/vis+aud_example.ds} " [13-Sep-01 4:29:57 PM]
# Argument: line
# Returns: (nothing)

sub ProcessOpen {
  my $line = shift(@_);

  if ($line =~ /Received.*JAVAC_OpenSession {(.*)}.*\[(.*)\]/) {
    print "line = $line" if ($debug >= 2);

    my $session = $1;
    my $time = $2;

    print "session = $session\n" if ($debug >= 1);
    print "time = $time\n" if ($debug >= 1);

    my $openTime = StrToTime($time);

    if ($openTime >= $earliestTime) {
      if ($openTime >= 0) {
        if ($time1 == -1 || $openTime < $time1) {
          $time1 = $openTime;
        } elsif ($time2 == -1 || $openTime > $time2) {
          $time2 = $openTime;
        }
      }

      $openCount++;
      $sessionList{$session}++;
    }
  }
}

#-----------------------------------------------------------
# Parses a jspop log file line to get the client host and date.
# Expects a line of the form:
#   "Client from localhost is added ... [27-Jul-01 9:02:53 AM]"
# Argument: line
# Returns: list of host and date.

sub ParseLine {
  my $line = shift(@_);

  my $client = "unknown";
  my $date = "unknown";
  if ($line =~ /Client from (.*) is added \.\.\. \[(.*)\]/) {
    $client = $1;
    $date = $2;
  }
  print "client = <$client>; date = <$date>\n", if ($debug >= 2);
  my @results;
  @results = ($client, $date);
  return @results;
}

#-----------------------------------------------------------
# Converts a string date of the form "dd-mmm-yy hh:mm:ss ap" or
# "mmm dd, yyyy hh:mm:ss ap" to time (seconds since the epoch).
# Note: this assumes the input string time is in GMT, since the JSPoP
# logs seem to be in GMT.
# Argument: date string
# Returns: time; -1 if error

#TEMP -- should I parse date and time separately here??

sub StrToTime {
  my $datestr = shift(@_);

  #
  # Table to convert from month name to number.
  #
  my %monthNames = (
    Jan => 0,
    Feb => 1,
    Mar => 2,
    Apr => 3,
    May => 4,
    Jun => 5,
    Jul => 6,
    Aug => 7,
    Sep => 8,
    Oct => 9,
    Nov => 10,
    Dec => 11,
  );

  my $matched = 0;
  my $cmdTime = -1;

  my $day;
  my $month;
  my $year;
  my $hour;
  my $minute;
  my $second;
  my $ampm;

  if ($datestr =~ /(\d{2})-(\w{3})-(\d{2}) (\d{1,2}):(\d{1,2}):(\d{1,2}) (\w{2})/) {
    $matched = 1;

    $day = $1;
    $month = $2;
    $year = $3;
    $hour = $4;
    $minute = $5;
    $second = $6;
    $ampm = $7;
  } elsif ($datestr =~ /(\w{3}) (\d*), (\d{4}) (\d{1,2}):(\d{1,2}):(\d{1,2}) (\w{2})/) {
    $matched = 1;
#
    $month = $1;
    $day = $2;
    $year = $3 - 1900;
    $hour = $4;
    $minute = $5;
    $second = $6;
    $ampm = $7;
  }

  if ($matched) {
    $month = $monthNames{$month};

    if ($ampm eq "PM" or $ampm eq "pm") {
      # 12 PM is a special case.
      if ($hour < 12) {
        $hour += 12;
      }
    } elsif ($hour == 12) {
      # 12 AM is a special case.
      $hour = 0;
    }

    $cmdTime = timegm($second, $minute, $hour, $day, $month, $year);
  }

  return $cmdTime;
}

#-----------------------------------------------------------
# Converts a time (seconds since the epoch) to a string (date only).
# Note: this converts to local, not GMT date (time).
# Argument: time; -1 if undefined
# Returns: date string

sub TimeToStr {
  my $time = shift(@_);

  if ($time == -1) {
    return "unknown";
  }

  my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdat) =
    localtime($time);
  $year += 1900;

  my $dateStr = sprintf "%4d-%.2d-%.2d", $year, $mon+1, $mday;
  return $dateStr;
}

#-----------------------------------------------------------
# Print the results.
# Arguments: (none)
# Returns: (nothing)

sub PrintResults {
  my $dateCur = TimeToStr($curTime);
  my $dateEarly = TimeToStr($earliestTime);

  my $date1 = TimeToStr($time1);
  my $date2 = TimeToStr($time2);

  print "JavaScreen usage statistics for $dateEarly through $dateCur\n";
  print "  (Data actually found for $date1 through $date2):\n\n";
  my $realConns = $connectCount-$hostList{"localhost"};
  print "$connectCount connections ($realConns excluding localhost)\n";
  print "$openCount session opens\n";

  print "\nClient host info (number of connections, host):\n";
  my $host;
  foreach $host (sort { $hostList{$b} <=> $hostList{$a} } keys %hostList) {
    printf "%4d %s\n", $hostList{$host}, $host;
  }

  print "\nSession info (number of opens, session):\n";
  my $session;
  foreach $session (sort { $sessionList{$b} <=> $sessionList{$a} }
    keys %sessionList) {
    printf "%4d %s\n", $sessionList{$session}, $session;
  }
}
