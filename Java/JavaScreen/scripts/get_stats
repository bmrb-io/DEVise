#! bin2/perl

#  ========================================================================
#  DEVise Data Visualization Software
#  (c) Copyright 2000-2015
#  By the DEVise Development Group
#  Madison, Wisconsin
#  All Rights Reserved.
#  ========================================================================
#
#  Under no circumstances is this software to be copied, distributed,
#  or altered in any way without prior permission from the DEVise
#  Development Group.

#  This script gets JavaScreen usage statistics.

#  Note:  If this is run on "mixed" usage files (some with client IDs/
#  command counts and some without) the command averages per session
#  category won't be accurate.

############################################################

#  $Id$

#  $Log$
#  Revision 1.9  2014/11/25 22:19:26  wenger
#  Improved the JavaScreen usage script to better report commands
#  per session open.
#
#  Revision 1.8  2014/11/13 17:48:12  wenger
#  Fixed DEVise/JS bug 1043:  Usage info isn't correct when client
#  connects in CGI mode.
#
#  Revision 1.7  2014/08/27 15:10:26  wenger
#  JS command counts:  Final (I think) version of get_stats with command
#  counts; added info to the JavaScreen version history.
#
#  Revision 1.6  2014/08/26 20:41:05  wenger
#  JS command counts:  Committing the changes to log commands to the
#  usage log file.
#
#  Revision 1.5  2014/08/24 02:41:37  wenger
#  Per-session command counts are now mostly working (with JSPoP changes
#  to usage log file, not yet committed); still a bunch of temporary code
#  in place.  Also, I'm committing half-working stuff in get_stats_detailed
#  that I did before I remembered that the "main" JSPoP log gets rotated.
#
#  Revision 1.4  2014/08/06 18:32:28  wenger
#  Changed JavaScreen usage script to report usage by session categories
#  for BMRB.
#
#  Revision 1.3  2005/12/06 20:00:42  wenger
#  Merged V1_7b0_br_4 thru V1_7b0_br_5 to trunk.  (This should
#  be the end of the V1_7b0_br branch.)
#
#  Revision 1.2.8.5  2005/06/02 21:01:52  wenger
#  We now exlude any host name *starting* with localhost from the
#  "real" session opens.
#
#  Revision 1.2.8.4  2005/01/05 18:06:29  wenger
#  Improvements to JS usage statistics script: now deals with the fact
#  that the logs seem to be in local time instead of GMT; error messages
#  if parsing time fails; prints a warning if there's no JSPoP pid file.
#
#  Revision 1.2.8.3  2003/10/07 21:19:59  wenger
#  Get_stats and get_stats_old now accept curTime command-line argument
#  to get statistics from the past.
#
#  Revision 1.2.8.2  2003/09/25 18:25:21  wenger
#  New version of JavaScreen usage stats script gets info from
#  jspop.usage.* files, gives non-UW counts.
#
#  Revision 1.2.8.1  2003/06/20 16:18:14  wenger
#  Added id, directory, and hostname header to usage stats.
#
#  Revision 1.2  2001/09/24 17:36:37  wenger
#  Moved all JS log files to "logs" subdirectory; fixed omission of Tasvir
#  script from intall.
#
#  Revision 1.1  2001/09/17 22:03:26  wenger
#  Improved JavaScreen usage statistics: stats are now incremental (last
#  day or week), session opening counts are included.
#
#  Revision 1.4  2001/09/05 19:31:21  wenger
#  Added bin2 and dyn_lib directories in JavaScreen release and install,
#  and made corresponding changes to scripts; other distribution-related
#  changes.
#
#  Revision 1.3  2001/07/30 19:57:43  wenger
#  Fixed the get_stats script to match the current jspop log file format;
#  added cron entries for pumori and yola to run it automatically.
#
#  Revision 1.2  2001/01/08 20:31:55  wenger
#  Merged all changes thru mgd_thru_dup_gds_fix on the js_cgi_br branch
#  back onto the trunk.
#
#  Revision 1.1.2.1  2000/12/27 19:38:36  wenger
#  Merged changes from js_restart_improvements thru zero_js_cache_check from
#  the trunk onto the js_cgi_br branch.
#
#  Revision 1.1  2000/12/13 21:22:00  wenger
#  First version of script to get usage statistics.
#

############################################################

use strict;
use Time::Local;

my $debug = 0; # 0-3
my $version = "3.3.0";

my $usage = "Usage: get_stats [idStr [period [curTime]]] | -usage | -version
  (Get JavaScreen usage statistics.)
  idStr can be all (default), regular, soil, test, or tst2
  period can be week (default), day, or all
  curTime should be of the form 'dd-mmm-yy hh:mm:ss ap' or
    'mmm dd, yyyy hh:mm:ss ap' (e.g., 'Sep 26, 2003 00:00:00 AM').\n";

my @saveArgs = @ARGV;


#
# Process command-line arguments.
#
die "$usage" if ($#ARGV < -1 or $#ARGV > 2);

if ($#ARGV >= 0) {
  if ($ARGV[0] eq "-usage") {
    print "$usage";
    exit 0;
  } elsif ($ARGV[0] eq "-version") {
    print "get_stats version $version\n";
    exit 0;
  }
}

my $idStr;
if ($#ARGV >= 0) {
  $idStr = shift(@ARGV);
} else {
  $idStr = "all";
}

my $period;
if ($#ARGV >= 0) {
  $period = shift(@ARGV);
} else {
  $period = "week";
}


# Get the 'current' time -- can be specified on the command line to
# get statistics from a period earlier than the current one.
my $curTime;
if ($#ARGV >= 0) {
  $curTime = StrToTime(@ARGV);
} else {
  $curTime = time();
}

# Figure out the earliest time that is within the specified period of
# the current time.
my $timeInterval = 60 * 60 * 24; # seconds in a day
my $earliestTime;
if ($period eq "day") {
  $earliestTime = $curTime - $timeInterval;
} elsif ($period eq "week") {
  $earliestTime = $curTime - (7 * $timeInterval);
} elsif ($period eq "all") {
  $earliestTime = 0;
} else {
  print STDERR "Illegal period value\n";
  print "$usage";
  exit 1;
}


#
# See if we have a JSPoP pid file corresponding to the id string specified
# (if any).  If not, print a warning.
#
my $pidPattern;
if ($idStr eq "all") {
  $pidPattern = "jspop_pid:*";
} else {
  $pidPattern = "jspop_pid:$idStr:*";
}

my @pidFiles = glob($pidPattern);
if ($#pidFiles < 0) {
  print "\nWARNING: no $pidPattern file found; are you sure this script " .
      "is being run in the directory that the JSPoP is actually run in?\n\n";
}


#
# Initialize various counts and lists.
#
my $openCount = 0;
# realOpenCount is the number of session opens from hosts other than
# localhost, *.cs.wisc.edu and *.bmrb.wisc.edu.
my $realOpenCount = 0;
my %hostList = (); # hostName -> openCount
my %sessionOpens = (); # sessionName -> openCount
my %sessionCatCounts = (); # sessionCat -> openCount
my %cmdCounts = (); # sessionCat -> cmdCount
my %sessionCats = (); # clientId -> sessionCat
my $time1 = -1; # Earliest time of data.
my $time2 = -1; # Latest time of data.
my %hostCmdCounts = (); # hostId -> cmdCount

#
# Figure out the form of log file name to look for, and get a list of
# all log files that match the appropriate form.
#
my $filename;
if ($idStr eq "all") {
  $filename = "logs/jspop.usage*";
} else {
  $filename = "logs/jspop.usage.$idStr*";
}
my @files = glob($filename);
print "Files: @files\n" if ($debug >= 1);

# If we didn't find any appropriate jspop.usage* files, call the old version
# of this script that gets info from the jspop.out* files.
if ($#files <= -1) {
  print "No appropriate jspop.usage* files found -- running old version\n";
  print "of script that gets data from jspop.out* files\n\n";
  exec "scripts/get_stats_old @saveArgs";
}

#
# Now process each log file.
#
my $file;
foreach $file (@files) {
  print "Opening $file\n" if ($debug >= 3);
  open(DATA_IN, $file) or die "Couldn't open log file $file: $!\n";

  my $line;
  while ($line = <DATA_IN>) {
    print "line = $line" if ($debug >= 3);

    # Process session open lines.
    ProcessOpen($line);

    # Process session close lines.
    ProcessClose($line);

    # Process other command lines.
    ProcessCmd($line);
  }

  close(DATA_IN);
}

PrintResults();

#-----------------------------------------------------------
# Processes a line if that line contains session open information.
# Client connection lines are of the form:
# localhost (1201613167): JAVAC_OpenSession {DEViseSession/bmrb/dna_histogram.ds}  [Aug 21, 2014 3:05:16 PM]
# Argument: line
# Returns: (nothing)

sub ProcessOpen {
  my $line = shift(@_);

  if ($line =~ /(\S*)( \((\d+)\))?: JAVAC_OpenSession {(.*)}.*\[(.*)\]/) {
    print "\nopen line = $line" if ($debug >= 2);

    my $host = $1;
    my $clientId = $3;
    my $session = $4;
    my $time = $5;

    print "host = $host\n" if ($debug >= 1);
    print "clientId = $clientId\n" if ($debug >= 1);
    print "session = $session\n" if ($debug >= 1);
    print "time = $time\n" if ($debug >= 1);

    my $openTime = StrToTime($time);
    print "openTime = $openTime\n" if ($debug >= 1);

    if ($openTime >= $earliestTime && $openTime <= $curTime) {
      if ($openTime >= 0) {
        if ($time1 == -1 || $openTime < $time1) {
          $time1 = $openTime;
        }
	if ($time2 == -1 || $openTime > $time2) {
          $time2 = $openTime;
        }
      }

      $openCount++;
      $sessionOpens{$session}++;

      # Doing counts here will include sessions opened from BMRB and CS.
      # $sessionCatCounts{GetSessionCat($session)}++;

      $hostList{$host}++;

      if ($host =~ /localhost.*/) {
        # Intentional no-op.
      } elsif ($host =~ /.*\.cs\.wisc\.edu/) {
        # Intentional no-op.
      } elsif ($host =~ /128\.105\..*/) {
        # Intentional no-op.
      } elsif ($host =~ /.*\.bmrb\.wisc\.edu/) {
        # Intentional no-op.
      } elsif ($host =~ /144\.92\..*/) {
        # Intentional no-op.
      } else {
        $realOpenCount++;
	my $sessionCat = GetSessionCat($session);
        print "sessionCat = $sessionCat\n" if ($debug >= 1);
        $sessionCatCounts{$sessionCat}++;
	if ($clientId ne '') {
	  $sessionCats{$clientId} = $sessionCat;
	}
      }
    }
  }
}

#-----------------------------------------------------------
# Processes a line if that line contains session close information.
# Client connection lines are of the form:
# localhost (1201615428): JAVAC_CloseCurrentSession [Aug 21, 2014 3:09:07 PM]
# Argument: line
# Returns: (nothing)

sub ProcessClose {
  my $line = shift(@_);

  # Note: we don't have any session closing lines that don't have client ID.
  if ($line =~ /(\S*) \((\d+)\): JAVAC_CloseCurrentSession \[(.*)\]/) {
    print "\nclose line = $line" if ($debug >= 2);

    my $host = $1;
    my $clientId = $2;
    my $time = $3;

    print "host = $host\n" if ($debug >= 1);
    print "clientId = $clientId\n" if ($debug >= 1);
    print "time = $time\n" if ($debug >= 1);

    if ($clientId ne '') {
      $sessionCats{$clientId} = '';
    }
  }
}

#-----------------------------------------------------------
# Processes a line if that line contains general command information.
# Command lines are of the form:
# localhost (1201616319): JAVAC_MouseAction_RubberBand {View 1} {140} {224} {387} {356} {0} {0}  [Aug 21, 2014 3:11:47 PM]
# Argument: line
# Returns: (nothing)

sub ProcessCmd {
  my $line = shift(@_);

  # Note: we don't have to deal with "old format" lines that don't
  # have the client ID, because session open lines are the only ones
  # in that format.
  if ($line =~ /(\S*) \((\d+)\): (\w*)( \{.*\})*\s*\[(.*)\]/) {
    print "\ncmd line = $line" if ($debug >= 2);

    my $host = $1;
    my $clientId = $2; # This is the only thing we really care about
    my $cmd = $3;
    my $args = $4;
    my $time = $5;

    # Don't count heartbeats, open and close session.
    if ($cmd eq "JAVAC_HeartBeat") { return; }
    if ($cmd eq "JAVAC_OpenSession") { return; }
    if ($cmd eq "JAVAC_CloseCurrentSession") { return; }

    print "host = $host\n" if ($debug >= 1);
    print "clientId = $clientId\n" if ($debug >= 1);
    print "cmd = $cmd\n" if ($debug >= 1);
    print "args = $args\n" if ($debug >= 1);
    print "time = $time\n" if ($debug >= 1);

    # Note: we don't worry about the time here, because if the client's
    # current session (if there is one) was opened before $earliestTime,
    # the client's sessionCat should be '' so we won't do anything below...

    my $sessionCat = $sessionCats{$clientId};
    print "sessionCat = $sessionCat\n" if ($debug >= 1);
    if ($sessionCat ne '') {
      $cmdCounts{$sessionCat}++;
      # Note: this doesn't count commands for "non-real" hosts.
      $hostCmdCounts{$host}++;
    }
  }
}

#-----------------------------------------------------------
# Parses a jspop log file line to get the client host and date.
# Expects a line of the form:
#   "Client from localhost is added ... [27-Jul-01 9:02:53 AM]"
# Argument: line
# Returns: list of host and date.

sub ParseLine {
  my $line = shift(@_);

  my $client = "unknown";
  my $date = "unknown";
  if ($line =~ /Client from (.*) is added \.\.\. \[(.*)\]/) {
    $client = $1;
    $date = $2;
  }
  print "client = <$client>; date = <$date>\n", if ($debug >= 2);
  my @results;
  @results = ($client, $date);
  return @results;
}

#-----------------------------------------------------------
# Converts a string date of the form "dd-mmm-yy hh:mm:ss ap" or
# "mmm dd, yyyy hh:mm:ss ap" to time (seconds since the epoch).
# Note: this assumes the input string time is in local time, since
# the JSPoP logs now seem to be in local time (they were in GMT).
# Argument: date string
# Returns: time; -1 if error

#TEMP -- should I parse date and time separately here??

sub StrToTime {
  my $datestr = shift(@_);

  #
  # Table to convert from month name to number.
  #
  my %monthNames = (
    Jan => 0,
    Feb => 1,
    Mar => 2,
    Apr => 3,
    May => 4,
    Jun => 5,
    Jul => 6,
    Aug => 7,
    Sep => 8,
    Oct => 9,
    Nov => 10,
    Dec => 11,
  );

  my $matched = 0;
  my $cmdTime = -1;

  my $day;
  my $month;
  my $year;
  my $hour;
  my $minute;
  my $second;
  my $ampm;

  if ($datestr =~ /(\d{2})-(\w{3})-(\d{2}) (\d{1,2}):(\d{1,2}):(\d{1,2}) (\w{2})/) {
    $matched = 1;

    $day = $1;
    $month = $2;
    $year = $3;
    $hour = $4;
    $minute = $5;
    $second = $6;
    $ampm = $7;
  } elsif ($datestr =~ /(\w{3}) (\d*), (\d{4}) (\d{1,2}):(\d{1,2}):(\d{1,2}) (\w{2})/) {
    $matched = 1;
#
    $month = $1;
    $day = $2;
    $year = $3 - 1900;
    $hour = $4;
    $minute = $5;
    $second = $6;
    $ampm = $7;
  }

  if ($matched) {
    $month = $monthNames{$month};

    if ($ampm eq "PM" or $ampm eq "pm") {
      # 12 PM is a special case.
      if ($hour < 12) {
        $hour += 12;
      }
    } elsif ($hour == 12) {
      # 12 AM is a special case.
      $hour = 0;
    }

    $cmdTime = timelocal($second, $minute, $hour, $day, $month, $year);
  } else {
    print "Error: unable to convert date string <$datestr> to seconds " .
        "since the epoch.  Format error in date string?\n";
  }

  return $cmdTime;
}

#-----------------------------------------------------------
# Converts a time (seconds since the epoch) to a string (date only).
# Note: this converts to local, not GMT date (time).
# Argument: time; -1 if undefined
# Returns: date string

sub TimeToStr {
  my $time = shift(@_);

  if ($time == -1) {
    return "unknown";
  }

  my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdat) =
    localtime($time);
  $year += 1900;

  my $dateStr = sprintf "%4d-%.2d-%.2d", $year, $mon+1, $mday;
  return $dateStr;
}

#-----------------------------------------------------------
# Gets a session category from the session (file) name.
# Argument: session name (file name)
# Returns: session category

sub GetSessionCat {
  my $session = shift(@_);

  # Note:  Put most restrictive patterns first to avoid mis-counting
  # (e.g., SPARTA (sd) before chem shift deltas (d)).
  if ($session =~ /dna_histogram.ds$/) {
    return 'DNA histogram';

  } elsif ($session =~ /rna_histogram.ds$/) {
    return 'RNA histogram';

  } elsif ($session =~ /histogram2.ds$/) {
    return 'dual-protein histogram';

  } elsif ($session =~ /histogram.ds$/) {
    return 'single-protein histogram';

  } elsif ($session =~ /lacs\d+.ds$/) {
    return 'LACS';

  } elsif ($session =~ /distr\d+.ds$/) {
    return 'distance restraints';

  } elsif ($session =~ /tar\d+.ds$/) {
    return 'torsion angle restraints';

  } elsif ($session =~ /as\d+.ds$/) {
    return 'chem shift by AA/nucleotide';

  } elsif ($session =~ /am\d+.ds$/) {
    return 'ambiguity codes';

  } elsif ($session =~ /ac\d+.ds$/) {
    return 'atomic coordinates';

  } elsif ($session =~ /sd\d+.ds$/) {
    return 'SPARTA';

  } elsif ($session =~ /ps\d+.ds$/) {
    return 'Pistachio';

  } elsif ($session =~ /h[cn]\d+\+\d+.ds$/) {
    return 'two-entry simulated HSQC spectra';

  } elsif ($session =~ /h[cn]\d+.ds$/) {
    return 'simulated HSQC spectra';

  } elsif ($session =~ /t[12]\d+.ds$/) {
    return 'T1/T2 relaxation';

  } elsif ($session =~ /d\d+.ds$/) {
    return 'chem shift deltas';

  } elsif ($session =~ /c\d+.ds$/) {
    return 'chem shift index';

  } elsif ($session =~ /p\d+.ds$/) {
    return 'percent assigned';

  } elsif ($session =~ /g\d+.ds$/) {
    return 'coupling constants';

  } elsif ($session =~ /n\d+.ds$/) {
    return 'heteronuclear NOE';

  } elsif ($session =~ /o\d+.ds$/) {
    return 'S2 order parameters';

  } elsif ($session =~ /s2p\d+-\d+.ds$/) {
    return 'S2 predicted vs. experimental';

  } else {
    return 'other/unknown';
  }
}

#-----------------------------------------------------------
# Print the results.
# Arguments: (none)
# Returns: (nothing)

sub PrintResults {
  my $dateCur = TimeToStr($curTime);
  my $dateEarly = TimeToStr($earliestTime);

  my $date1 = TimeToStr($time1);
  my $date2 = TimeToStr($time2);

  # Added info here so we know where we're getting stats from, especially
  # if we don't have a subject line on the email.
  my $hostname = `hostname`;
  chomp $hostname;
  my $dir = `pwd`;
  chomp $dir;
  print "JavaScreen usage for $idStr in $dir on $hostname\n\n";

  print "JavaScreen usage statistics for $dateEarly through $dateCur\n";
  print "  (Data actually found for $date1 through $date2):\n\n";
  print "$openCount session opens ($realOpenCount \"real\")\n";

  print "\nSession category counts (\"real\" only):\n";
  my $sessCat;
  foreach $sessCat (sort { $sessionCatCounts{$b} <=> $sessionCatCounts{$a} } keys %sessionCatCounts) {
    my $avgCmds = $cmdCounts{$sessCat} / $sessionCatCounts{$sessCat};
    printf "%4d %s (%d commands: %.1f per open)\n", $sessionCatCounts{$sessCat},
      $sessCat, $cmdCounts{$sessCat}, $avgCmds;
  }

  print "\nClient host info (number of session opens, host):\n";
  my $host;
  foreach $host (sort { $hostList{$b} <=> $hostList{$a} } keys %hostList) {
    my $avgHostCmds = $hostCmdCounts{$host} / $hostList{$host};
    printf "%4d %s (%d commands: %.1f per open)\n", $hostList{$host}, $host, $hostCmdCounts{$host}, $avgHostCmds;
  }

  print "\nSession info (number of opens, session):\n";
  my $session;
  foreach $session (sort { $sessionOpens{$b} <=> $sessionOpens{$a} }
    keys %sessionOpens) {
    printf "%4d %s\n", $sessionOpens{$session}, $session;
  }
}
