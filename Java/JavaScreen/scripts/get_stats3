#! /bin/env python

#  ========================================================================
#  DEVise Data Visualization Software
#  (c) Copyright 2000-2015
#  By the DEVise Development Group
#  Madison, Wisconsin
#  All Rights Reserved.
#  ========================================================================
#
#  Under no circumstances is this software to be copied, distributed,
#  or altered in any way without prior permission from the DEVise
#  Development Group.

#  This script gets JavaScreen usage statistics.

#  Note:  If this is run on "mixed" usage files (some with client IDs/
#  command counts and some without) the command averages per session
#  category won't be accurate.

############################################################

#  $Id$

#  $Log$
#  Revision 1.22  2015/11/09 23:30:08  wenger
#  Fixed a bug in the calculation of max commands per host.
#
#  Revision 1.21  2015/11/09 21:28:57  wenger
#  Added option to mark "advanced" users.
#
#  Revision 1.20  2015/11/09 20:51:24  wenger
#  Fixed bug that was causing some commands (e.g., cursor move) to not
#  get counted; added -c stuff to usage info, and other usage
#  info improvements.
#
#  Revision 1.19  2015/10/27 19:40:17  wenger
#  Fixed host open counts for "old-style" usage logs that d
#  Fixes for "old-style" usage logs that don't have client IDs and commands
#  other than opens:
#  * Added option to exclude data.
#  * Fixed per-host session open counts.
#  * Added messages warning about incorrect command counts if we have
#    such data.
#
#  Revision 1.18  2015/10/26 21:07:48  wenger
#  Added maximum command counts to the session category and host
#  sections to make it easier to find "power users"; split out
#  individual session open counts by visualization server and non-
#  visualization server; put '+' at the beginning of each section
#  to make it easier to search through the output.
#
#  Revision 1.17  2015/10/23 21:25:31  wenger
#  Data is now split out by visualization server and non-visualization
#  server sessions.
#
#  Revision 1.16  2015/10/22 23:08:19  wenger
#  Added info about the date range we were searching and the date range
#  for which we actually found session opens; fixed a problem with the
#  hostname-based filtering.
#
#  Revision 1.15  2015/10/13 16:00:11  wenger
#  Fixed things to not count commands while no session is open for
#  a given client; avoid looking for "regular" commands if a line has
#  an open or close; other small cleanups; changed version to 1.0.0
#  because this should be ready to release.
#
#  Revision 1.14  2015/10/12 22:26:37  wenger
#  Added command counts per session category, and sort of session categories
#  by open count.
#
#  Revision 1.13  2015/10/12 21:29:35  wenger
#  Added open counts by session name.
#
#  Revision 1.12  2015/10/12 20:28:26  wenger
#  Added filtering by time period (to open commands).
#
#  Revision 1.11  2015/10/09 22:39:04  wenger
#  Now printing session category counts (still need command counts per
#  category, and sorting).
#
#  Revision 1.10  2015/10/09 21:03:09  wenger
#  We now also report command counts per host, and sort the hosts
#  in (decreasing) order of session open count.
#
#  Revision 1.9  2015/10/09 17:40:34  wenger
#  Cleaned things up by using classes to hold the information as we go;
#  various other cleanups; changed version number because I decided to
#  not rename this script to get_stats when it's ready; we now print
#  header info.
#
#  Revision 1.8  2015/10/09 16:20:40  wenger
#  We now output total session open count, and histogram frequencies
#  as a percentage of the total session count.
#
#  Revision 1.7  2015/10/09 15:26:14  wenger
#  Changed output formatting to older style for older Perl version at
#  BMRB.
#
#  Revision 1.6  2015/10/08 22:38:11  wenger
#  Got basic command count histograms working.
#
#  Revision 1.5  2015/10/08 22:28:54  wenger
#  Got filtering by host working.
#
#  Revision 1.4  2015/10/08 21:09:18  wenger
#  Basic command counts are now working.
#
#  Revision 1.3  2015/10/08 18:10:04  wenger
#  Got rid of version history junk; we now parse the period argument
#  and set a beginning time accordingly; added filter argument,
#  although we don't do anything with it yet.
#
#  Revision 1.2  2015/08/26 18:11:30  wenger
#  Got regexes working in new get_stats script.
#
#  Revision 1.1  2015/08/25 15:17:09  wenger
#  First version of new get_stats script (get_stats3 will replace
#  get_stats when it's finished).
#

############################################################

import sys
import getopt
import datetime
import glob
import re
import os
import socket

#-----------------------------------------------------------------
# To hold the info for each client.
class ClientInfo:
	def __init__(self, host):
		self.host = host
		self.sessions = [] # List of SessionInfo objects
		self.isOpen = True
	def totalOpens(self):
		return len(self.sessions)
	def totalCmds(self):
		tot = 0
		for tmp in self.sessions:
			tot += tmp.cmdCt
		return tot
	def maxCmds(self):
		max = 0
		for tmp in self.sessions:
			if (tmp.cmdCt > max):
				max = tmp.cmdCt
		return max

#-----------------------------------------------------------------
# To hold session name and command count.
class SessionInfo:
	def __init__(self, session):
		self.name = session
		self.cmdCt = 0

#-----------------------------------------------------------------
# To hold per-host info.
class HostInfo:
	def __init__(self):
		self.openCt = 0
		self.cmdCt = 0
		self.maxCmds = 0
	def update(self, clientInfo):
		self.openCt += clientInfo.totalOpens()
		self.cmdCt += clientInfo.totalCmds()
		if (clientInfo.maxCmds() > self.maxCmds):
			self.maxCmds = clientInfo.maxCmds()

#-----------------------------------------------------------------
# To hold per-session category info.
class CatInfo:
	def __init__(self):
		self.openCt = 0
		self.cmdCt = 0
		self.maxCmds = 0
	def update(self, sessInfo):
		self.openCt += 1
		self.cmdCt += sessInfo.cmdCt
		if (sessInfo.cmdCt > self.maxCmds):
			self.maxCmds = sessInfo.cmdCt

#-----------------------------------------------------------------
# To hold the time range for which we've actually found data
# (applies just to the open timestamp).
class TimeRange:
	def __init__(self):
		self.updated = False
		self.first = datetime.datetime(datetime.MAXYEAR, 12, 31)
		self.last = datetime.datetime(datetime.MINYEAR, 1, 1)
	def update(self, timeVal):
		self.updated = True
		if (timeVal < self.first):
			self.first = timeVal
		if (timeVal > self.last):
			self.last = timeVal
	def wasUpdated(self):
		return self.updated
	def setFirst(self, period):
		if (period == "day"):
			self.first = self.last - datetime.timedelta(1)
		elif (period == "week"):
			self.first = self.last - datetime.timedelta(7)
		elif (period == "all"):
			self.first = datetime.datetime(datetime.MINYEAR, 1, 1)
			self.last = datetime.datetime(datetime.MAXYEAR, 12, 31)
		else:
			print("Illegal period value: ", period)
			usage()
			sys.exit(2)
	def within(self, timeVal):
		if (timeVal < self.first):
			if (debug > 1):
				print("Open time (%s) is before begin time (%s)" % (timeVal, self.first))
			return False
		elif (timeVal > self.last):
			if (debug > 1):
				print("Open time (%s) is after end time (%s)" % (timeVal, self.last))
			return False
		else:
			return True

#-----------------------------------------------------------------
def main(argv):
	global debug
	debug = 0

	global dummyId
	dummyId = -1

	version = "1.0.0"

	# Initialize command-line arguments.
	commandOnly = False # only include sessions w/ command data
	filter = False # if True filter out UW usage from stats
	idStr = "all"
	period = "week"
	tLimit = TimeRange()
	tLimit.last = datetime.datetime.now()
	advanced = 0 # 0 means ignore this

	# Process command-line arguments.
	if (debug > 1):
		print("Args: ", argv)

	try:
		(opts, args) = getopt.getopt(argv, "a:cfi:p:t:uv", [])
	except getopt.GetoptError:
		print("Error in command-line arguments")
		usage()
		sys.exit(2)

	for opt, arg in opts:
		if (opt == "-a"):
			advanced = int(arg)
		elif (opt == "-c"):
			commandOnly = True
		elif (opt == "-f"):
			filter = True
		elif (opt == "-i"):
			idStr = arg
		elif (opt == "-p"):
			period = arg
		elif (opt == "-t"):
			tLimit.last = parseTimestamp(arg)
		elif (opt == "-u"):
			usage()
			sys.exit(0)
		elif (opt == "-v"):
			print("get_stats3 version " + version)
			sys.exit(0)
		else:
			print("Unrecognized argument: ", opt)
			usage()
			sys.exit(2)

	tLimit.setFirst(period)

	if (debug > 0):
		print("commandOnly: ", commandOnly)
		print("filter: ", filter)
		print("idStr: ", idStr)
		print("period: ", period)
		print("endTime: ", tLimit.last)

	# cmdData maps clientId keys to ClientInfo values
	cmdDataAll = {}
	cmdDataVS = {}
	cmdDataNonVS = {}

	tr = TimeRange()

	process(idStr, filter, commandOnly, tLimit, cmdDataAll, cmdDataVS, cmdDataNonVS, tr)
	printReport(idStr, filter, commandOnly, tLimit, advanced, cmdDataAll, cmdDataVS, cmdDataNonVS, tr)

#-----------------------------------------------------------------
def usage():
	print("Usage: get_stats [-c] [-f] [-i <id>] [-p <period>] [-t <time>] | -u | -v")
	print("  -a(advanced): show advanced users (command counts >= count)")
	print("  -c(command only): only include usage that has command counts")
	print("  -f(ilter): filter out BMRB, UW CS, etc, usage")
	print("  -i(d): <id> can be all (default), regular, soil, test, or tst2")
	print("  -p(eriod): <period> can be week (default), day, or all")
	print("  t(ime): <time> should be of the form 'dd-mmm-yy hh:mm:ss ap' or " +
		"'mmm dd, yyyy hh:mm:ss ap' (e.g., 'Sep 26, 2003 00:00:00 AM')")
	print("  -u(sage): print usage message")
	print("  -v(ersion):  print version")

#-----------------------------------------------------------------
def process(idStr, filter, commandOnly, tLimit, cmdDataAll, cmdDataVS, cmdDataNonVS, tr):
	if (debug > 1):
		print("process:")
		print("  idStr: ", idStr)
		print("beginTime: ", tLimit.first)
		print("  endTime: ", tLimit.last)

	# See if we have an appropriate JSPoP PID file, and print a
	# warning if we don't.
	if (idStr == "all"):
		pidPattern = "jspop_pid:*"
	else:
		pidPattern = "jspop_pid:" + idStr + ":*"
	pidFiles = glob.glob(pidPattern)
	if (len(pidFiles) < 1):
		print("WARNING: no JSPoP PID file (" + pidPattern + ") found")
		print("Are you sure this script is being run in the " +
			"directory that the JSPoP is actually run in?")

	# Find the log files to look for.
	if (idStr == "all"):
		usagePattern = "logs/jspop.usage*"
	else:
		usagePattern = "logs/jspop.usage." + idStr + "*"
	usageFiles = glob.glob(usagePattern)
	if (debug > 0):
		print("Usage files: ", usageFiles)

	if (len(usageFiles) < 1):
		print("No appropriate jspop.usage* files found -- exiting")
		sys.exit(1)

	# Now process each usage file
	for uf in usageFiles:
		processFile(uf, filter, commandOnly, tLimit, cmdDataAll, cmdDataVS, cmdDataNonVS, tr)

#-----------------------------------------------------------------
def processFile(uf, filter, commandOnly, tLimit, cmdDataAll, cmdDataVS, cmdDataNonVS, tr):
	if (debug > 1):
		print("Processing usage file: " + uf)

	file = open(uf, "r")
	for line in file:
		line = line.rstrip('\n')
		if (debug > 2):
			print("Line: " + line)

		processLine(line, filter, commandOnly, True, True, tLimit, cmdDataAll, tr)
		processLine(line, filter, commandOnly, True, False, tLimit, cmdDataVS, tr)
		processLine(line, filter, commandOnly, False, True, tLimit, cmdDataNonVS, tr)

#-----------------------------------------------------------------
# Process one line from a usage file, updating the given command
# data and time range.
def processLine(line, filter, commandOnly, incVisServ, incNonVS, tLimit, cmdData, tr):
	if (debug > 2):
		print("processLine(" + line + ")")

	if (processOpen(line, filter, commandOnly, incVisServ, incNonVS, tLimit, cmdData, tr)):
		pass
	elif (processReopen(line, cmdData)):
		pass
	elif (processClose(line, cmdData)):
		pass
	elif (processSkip(line)):
		pass
	else:
		processCmd(line, cmdData)

#-----------------------------------------------------------------
# Process a given log line looking for a session open command --
# returns True if we found an open, False otherwise.
def processOpen(line, filter, commandOnly, incVisServ, incNonVS, tLimit, cmdData, tr):
	if (debug > 2):
		print("processOpen(" + line + ")")

	# For "old-format" usage files that don't include client IDs and
	# commands other than opens.
	global dummyId

	regex = re.compile(r"(?P<host>\S*)( \((?P<client>\d+)\))?: JAVAC_OpenSession {(?P<session>.*)}.*\[(?P<time>.*)\]")
	result = regex.search(line)
	if (result != None):
		if (debug > 1):
			print("  processOpen matches line " + line)
		host = result.group('host')
		clientId = result.group('client')
		session = result.group('session')
		timestamp = result.group('time')
		if (clientId == None):
			clientId = dummyId
			dummyId -= 1
		if (debug > 1):
			print("Found open:")
			print("  host: ", host)
			print("  clientId: ", clientId)
			print("  session: ", session)
			print("  timestamp: ", timestamp)

		if (commandOnly and clientId < 0):
			if (debug > 2):
				print("Bailing out because of missing client ID")
			return True

		timeVal = parseTimestamp(timestamp)
		if (tLimit.within(timeVal) and passHost(host, filter) and passSession(session, incVisServ, incNonVS)):
			if (clientId not in cmdData):
				ci = ClientInfo(host)
				cmdData[clientId] = ci

			# Command count for this session.
			si = SessionInfo(session)
			cmdData[clientId].sessions.append(si)
			cmdData[clientId].isOpen = True

			tr.update(timeVal)

		return True

	else:
		return False

#-----------------------------------------------------------------
# Process a given log line looking for a session reopen command --
# returns True if we found an open, False otherwise.
def processReopen(line, cmdData):
	if (debug > 2):
		print("processReopen(" + line + ")")

	regex = re.compile(r"(?P<host>\S*)( \((?P<client>\d+)\)): JAVAC_ReopenSession\s+\[(?P<time>.*)\]")
	result = regex.search(line)
	if (result != None):
		if (debug > 1):
			print("  processReopen matches line " + line)
		host = result.group('host')
		clientId = result.group('client')
		timestamp = result.group('time')
		if (debug > 1):
			print("Found reopen:")
			print("  host: ", host)
			print("  clientId: ", clientId)
			print("  timestamp: ", timestamp)

		if (clientId in cmdData):
			cmdData[clientId].isOpen = True

		return True

	else:
		return False

#-----------------------------------------------------------------
# Process a given log line looking for a session close command --
# returns True if we found a close, False otherwise.
def processClose(line, cmdData):
	if (debug > 2):
		print("processClose(" + line + ")")

	regex = re.compile(r"(?P<host>\S*) \((?P<client>\d+)\): JAVAC_CloseCurrentSession\s+\[(?P<time>.*)\]")
	result = regex.search(line)
	if (result != None):
		if (debug > 1):
			print("  processClose matches line " + line)
		host = result.group('host')
		clientId = result.group('client')
		timestamp = result.group('time')
		if (debug > 1):
			print("Found close:")
			print("  host: ", host)
			print("  clientId: ", clientId)
			print("  timestamp: ", timestamp)

		if (clientId in cmdData):
			cmdData[clientId].isOpen = False

		return True

	else:
		return False

#-----------------------------------------------------------------
# Process commands that we want to skip (e.g., they shouldn't
# count towards command counts).
# Returns true if this is a command that should be skipped.
def processSkip(line):
	if (debug > 2):
		print("processSkip(" + line + ")")

	regex = re.compile(r"(?P<host>\S*) \((?P<client>\d+)\): (?P<cmd>JAVAC_Exit|JAVAC_GetSessionList)")
	result = regex.search(line)
	if (result != None):
		if (debug > 1):
			print("  processSkip matches line " + line)
		host = result.group('host')
		clientId = result.group('client')
		cmd = result.group('cmd')
		if (debug > 1):
			print("Found command:")
			print("  host: ", host)
			print("  clientId: ", clientId)
			print("  cmd: ", cmd)
		return True

	else:
		return False

#-----------------------------------------------------------------
# Process a given log line looking for a command other than a
# session open or close.
def processCmd(line, cmdData):
	if (debug > 2):
		print("processCmd(" + line + ")")

	regex = re.compile(r"(?P<host>\S*) \((?P<client>\d+)\): (?P<cmd>\w*)(?P<args>.*)\s+\[(?P<time>.*)\]")
	result = regex.search(line)
	if (result != None):
		if (debug > 1):
			print("  processCmd matches line " + line)
		host = result.group('host')
		clientId = result.group('client')
		cmd = result.group('cmd')
		args = result.group('args')
		timestamp = result.group('time')
		if (debug > 1):
			print("Found command:")
			print("  host: ", host)
			print("  clientId: ", clientId)
			print("  cmd: ", cmd)
			print("  args: ", args)
			print("  timestamp: ", timestamp)

		if (clientId in cmdData):
			if (cmdData[clientId].isOpen):
				cmdData[clientId].sessions[-1].cmdCt += 1
		else:
			# This means we didn't find an open for this client.
			if (debug > 1):
				print("Warning: clientId " + clientId + " not found!")

#-----------------------------------------------------------------
# Print the full report.
def printReport(idStr, filter, commandOnly, tLimit, advanced, cmdDataAll, cmdDataVS, cmdDataNonVS, tr):
	if (debug > 2):
		print("printReport")

	# Print the raw data (for debugging).
	if (debug > 0):
		print("+ Raw data:")
		for clientId in cmdDataAll.keys():
			print("Client %s on %s:" % (clientId, cmdDataAll[clientId].host))
			for tmp in cmdDataAll[clientId].sessions:
				print("  Session %s: %s commands(s)" % (tmp.name, tmp.cmdCt))

	# Print header info.
	print("")
	print("+ JavaScreen usage for ID %s" % (idStr)) 
	print("  in %s on %s" % (os.getcwd(), socket.gethostname()))
	print("+ JavaScreen usage statistics for %s through %s" % (tLimit.first, tLimit.last))
	if (tr.wasUpdated()):
		print("  (Data actually found for %s through %s):" % (tr.first, tr.last))
	else:
		print("  (No data actually found)")

	if (commandOnly):
		print("  Sessions w/o command data not included")

	if (filter):
		print("  CS/BMRB usage is filtered out")
	else:
		print("  CS/BMRB usage is not filtered out")
	print("")

	# Print total session opens.
	sessionCountAll = calcSessionCount(cmdDataAll)
	print("+ Total session opens (vis server and non-vis server): %s" % (sessionCountAll))
	sessionCountVS = calcSessionCount(cmdDataVS)
	print("+ Total session opens (vis server only): %s" % (sessionCountVS))
	sessionCountNonVS = calcSessionCount(cmdDataNonVS)
	print("+ Total session opens (non-vis server only): %s" % (sessionCountNonVS))

	# Print session category counts.
	print("\n+ Session category counts (vis server and non-vis server):")
	printSessionCats(cmdDataAll)
	print("\n+ Session category counts (vis server only):")
	printSessionCats(cmdDataVS)
	print("\n+ Session category counts (non-vis server only):")
	printSessionCats(cmdDataNonVS)

	# Print session opens per host.
	print("\n+ Client host info (vis server and non-vis server):")
	printHostOpens(cmdDataAll, advanced)
	print("\n+ Client host info (vis server only):")
	printHostOpens(cmdDataVS, advanced)
	print("\n+ Client host info (non-vis server only):")
	printHostOpens(cmdDataNonVS, advanced)

	# Print command frequency histograms.
	print("\n+ Command frequency histogram (vis server and non-vis server):")
	printCmdHistogram(cmdDataAll, sessionCountAll)
	print("\n+ Command frequency histogram (vis server only):")
	printCmdHistogram(cmdDataVS, sessionCountVS)
	print("\n+ Command frequency histogram (non-vis server only):")
	printCmdHistogram(cmdDataNonVS, sessionCountNonVS)

	# Print opens per individual session.
	print("\n+ Session open counts (vis server only):")
	printSessionOpens(cmdDataVS)
	print("\n+ Session open counts (non-vis server only):")
	printSessionOpens(cmdDataNonVS)

#-----------------------------------------------------------------
# Calculate the number of session opens in the given command data.
def calcSessionCount(cmdData):
	sessionCount = 0
	for clientId in cmdData.keys():
		sessionCount += (len(cmdData[clientId].sessions))

	return sessionCount

#-----------------------------------------------------------------
# Print the number of opens per session category in the given command
# list.
def printSessionCats(cmdData):
	hasOld = False
	sessionCats = {}
	for clientId in cmdData.keys():
		if (clientId < 0):
			hasOld = True
		for si in cmdData[clientId].sessions:
			cat = getSessionCat(si.name)
			if (cat not in sessionCats):
				sessionCats[cat] = CatInfo()
			sessionCats[cat].update(si)

	if (hasOld):
		print("(Includes data from old-format usage files -- command counts will be low)")

	cats = sessionCats.items()
	cats.sort(key=compareOpenCts, reverse=True)
	for tmp in cats:
		avg = 1.0 * tmp[1].cmdCt / tmp[1].openCt
		print("  %4d opens of %s (%d commands: %.1f per open; max %d)" % (tmp[1].openCt, tmp[0], tmp[1].cmdCt, avg, tmp[1].maxCmds))

#-----------------------------------------------------------------
# Print the number of opens per host in the given command list.
def printHostOpens(cmdData, advanced):
	hasOld = False
	opensByHost = {}
	for clientId in cmdData.keys():
		if (clientId < 0):
			hasOld = True
		host = cmdData[clientId].host
		if (host not in opensByHost):
			opensByHost[host] = HostInfo()
		opensByHost[host].update(cmdData[clientId])

	if (hasOld):
		print("(Includes data from old-format usage files -- command counts will be low)")

	hosts = opensByHost.items()
	hosts.sort(key=compareOpenCts, reverse=True)
	for tmp in hosts:
		avg = 1.0 * tmp[1].cmdCt / tmp[1].openCt
		advancedStr = ""
		if (advanced > 0 and tmp[1].maxCmds >= advanced):
			#TEMP -- add "advanced" session count below?
			advancedStr = "(advanced user)"
		print("  %4d opens from host %s (%s commands: %.1f per open; max %d) %s" % (tmp[1].openCt, tmp[0], tmp[1].cmdCt, avg, tmp[1].maxCmds, advancedStr))

#-----------------------------------------------------------------
# Print a command frequency histogram for the given command data.
def printCmdHistogram(cmdData, sessionCount):
	# Collect the command count histogram data.
	hasOld = False
	cmdHist = {}
	for clientId in cmdData.keys():
		if (clientId < 0):
			hasOld = True
		for tmp in cmdData[clientId].sessions:
			count = tmp.cmdCt
			if (debug > 1):
				print("Command count: ", count)
			if (count in cmdHist):
				cmdHist[count] += 1
			else:
				cmdHist[count] = 1

	if (hasOld):
		print("(Includes data from old-format usage files -- command counts will be low)")

	counts = cmdHist.keys()
	counts.sort()
	for count in counts:
		percent = 100.0 * cmdHist[count] / sessionCount
		print("  Command count %3d, frequency %3d (%.1f%%)" % (count, cmdHist[count], percent))

#-----------------------------------------------------------------
# Print open counts per individual session for the given command data.
def printSessionOpens(cmdData):
	# Collect the per-session open counts.
	sessionOpens = {}
	for clientId in cmdData.keys():
		for tmp in cmdData[clientId].sessions:
			if (tmp.name in sessionOpens):
				sessionOpens[tmp.name] += 1
			else:
				sessionOpens[tmp.name] = 1

	sessions = sessionOpens.items()
	sessions.sort(key=compareSessionOpens, reverse=True)
	for tmp in sessions:
		print("%4d %s" % (tmp[1], tmp[0]))

#-----------------------------------------------------------------
# Returns True if we should include data from this host in our
# statistics.
def passHost(host, filter):
	value = True
	if (filter):
		if (host.find("localhost") != -1):
			value = False
		elif (host.find("cs.wisc.edu") != -1):
			value = False
		elif (host.find("128.105.") == 0):
			value = False
		elif (host.find("bmrb.wisc.edu") != -1):
			value = False
		elif (host.find("144.92.") == 0):
			value = False
	return value

#-----------------------------------------------------------------
# Convert session file name to session category.
def getSessionCat(session):
	cat = "other/unknown"

	# Note:  Put most restrictive patterns first to avoid mis-counting
	# (e.g., SPARTA (sd) before chem shift deltas (d)).
	relist = []
	relist.append((re.compile(r"dna_histogram.ds$"), "DNA histogram"))
	relist.append((re.compile(r"rna_histogram.ds$"), "RNA histogram"))
	relist.append((re.compile(r"histogram2.ds$"), "dual-protein histogram"))
	relist.append((re.compile(r"histogram.ds$"), "single-protein histogram"))
	relist.append((re.compile(r"lacs\d+.ds$"), "LACS"))
	relist.append((re.compile(r"distr\d+.ds$"), "distance restraints"))
	relist.append((re.compile(r"tar\d+.ds$"), "torsion angle restraints"))
	relist.append((re.compile(r"as\d+.ds$"), "chem shift by AA/nucleotide"))
	relist.append((re.compile(r"am\d+.ds$"), "ambiguity codes"))
	relist.append((re.compile(r"ac\d+.ds$"), "atomic coordinates"))
	relist.append((re.compile(r"sd\d+.ds$"), "SPARTA"))
	relist.append((re.compile(r"ps\d+.ds$"), "Pistachio"))
	relist.append((re.compile(r"h[cn]\d+\+\d+.ds$"), "two-entry simulated HSQC spectra"))
	relist.append((re.compile(r"h[cn]\d+.ds$"), "simulated HSQC spectra"))
	relist.append((re.compile(r"t[12]\d+.ds$"), "T1/T2 relaxation"))
	relist.append((re.compile(r"d\d+.ds$"), "chem shift deltas"))
	relist.append((re.compile(r"c\d+.ds$"), "chem shift index"))
	relist.append((re.compile(r"p\d+.ds$"), "percent assigned"))
	relist.append((re.compile(r"g\d+.ds$"), "coupling constants"))
	relist.append((re.compile(r"n\d+.ds$"), "heteronuclear NOE"))
	relist.append((re.compile(r"o\d+.ds$"), "S2 order parameters"))
	relist.append((re.compile(r"s2p\d+-\d+.ds$"), "S2 predicted vs. experimental"))

	for tmp in relist:
		result = tmp[0].search(session)
		if (result != None):
			cat = tmp[1]
			break
		
	return cat

#-----------------------------------------------------------------
# Returns True if we should include data from this session in our
# statistics.
def passSession(session, incVisServ, incNonVS):
	isVisServ = False
	if (session.find(".uvd") != -1):
		isVisServ = True

	result = False
	if (incVisServ and isVisServ):
		result = True
	elif (incNonVS and not isVisServ):
		result = True

	return result

#-----------------------------------------------------------------
# For sorting.
def compareOpenCts(tmp):
	return tmp[1].openCt

#-----------------------------------------------------------------
# For sorting.
def compareSessionOpens(tmp):
	return tmp[1]

#-----------------------------------------------------------------
# Parse a timestamp of the form 'Aug 5, 2015 3:25:53 PM' into a
# datetime object.
def parseTimestamp(timeStr):
	if (debug > 1):
		print("parseTimestamp(%s)" % (timeStr))

	timeVal = None

	regex = re.compile(r"(?P<month>\w+)\s+(?P<day>\d+),\s+(?P<year>\d+)\s+(?P<hour>\d+):(?P<min>\d+):(?P<sec>\d+)\s+(?P<ampm>(am)|(pm))")
	result = regex.search(timeStr.lower())
	if (result != None):
		if (debug > 1):
			print("  parseTimestamp matches timeStr " + timeStr)
		monthStr = result.group('month')
		day = int(result.group('day'))
		year = int(result.group('year'))
		hour = int(result.group('hour'))
		minute = int(result.group('min'))
		second = int(result.group('sec'))
		ampm = result.group('ampm')

		if (debug > 1):
			print("    monthStr: ", monthStr)
			print("    day: ", day)
			print("    year: ", year)
			print("    hour: ", hour)
			print("    minute: ", minute)
			print("    second: ", second)
			print("    ampm: ", ampm)

		monthList = ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"]
		if (monthStr in monthList):
			monthNum = monthList.index(monthStr) + 1
			if (debug > 1):
				print("    monthNum: ", monthNum)
			if (ampm == "pm" and hour < 12):
				hour += 12
			timeVal = datetime.datetime(year, monthNum, day, hour, minute, second)
	else:
		print("Unrecognized time string: %s", (timeStr))

	if (debug > 1):
		print("timeVal:", timeVal)
	return timeVal

#-----------------------------------------------------------------
main(sys.argv[1:])
