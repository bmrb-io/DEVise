

PARSER_BEGIN(SQLParser)

package Parser;

import Expressions.*;

public class SQLParser {

  public static void main(String args[]) throws ParseException {
    SQLParser parser = new SQLParser(System.in);
    parser.query();
  }

}


PARSER_END(SQLParser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}


TOKEN :
{
  < ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
|
  < DOUBLE: ( ["0"-"9"] )+ "."( ["0"-"9"] )+  >
|
  < INTEGER: ( ["0"-"9"] )+ >
|
  < ADD: ("+"|"-") >
|
  < MULT: ("*"|"/"|"%") >
|
  < LOGIC: ("<"|">"|"!="|"=") >
|
  <AS : ["A","a"]["S","s"] >
|
  < SELECT: ["S","s"]["E","e"]["L","l"]["E","e"]["C","c"]["T","t"] >
|
  < FROM: ["F","f"]["R","r"]["O","o"]["M","m"] >
|
  < WHERE:["W","w"]["H","h"]["E","e"]["R","r"]["E","e"] >
}


Query query() :
{
	java.util.Vector selectClause;
	java.util.Vector fromClause;
	java.util.Vector whereClause;
}
{
	<SELECT> selectClause = SelectClause() 
        <FROM> fromClause = FromClause()
        <WHERE> whereClase = WhereClause()
	{
		return new Query(selectClause, fromClause, whereClause);		
	}
  <EOF>
}


java.util.Vector SelectClause() :
{
	java.util.Vector expressionList = new java.util.Vector();
	String e;
}
{
	e = AdditiveExpression()
		{
			expressionList.addElement(e);
		}
	( "," e=AdditiveExpression()
		{
			expressionList.addElement(e);
		}
	)*
        
        {
                return expressionList;
        }


}


java.util.Vector WhereClause() :
{
	java.util.Vector expressionList = new java.util.Vector();
	String e;
}
{
	e = LogicalExpression()
		{
			expressionList.addElement(e);
		}
	( "," e=LogicalExpression()
		{
			expressionList.addElement(e);
		}
	)*
        
        {
                return expressionList;
        }


}


java.util.Vector FromClause() :
{
	java.util.Vector relationIdList = new java.util.Vector();
        java.util.Vector aliaslist = new java.util.Vector();
        java.util.Vector tableAliasList  = new java.util.Vector();
	String e;
        int count = 0;
}
{



	e = relationId()
		{
			relationIdList.addElement(e);
		}
	[ <AS> e=Alias()
		{
			aliasList.setElementAt(e,count);
		}
	]


        (

   	   "," e = relationId()
		   {
			   relationIdList.addElement(e);
                           count++;
		   }
	   [ <AS> e=Alias()
		   {
			   aliasList.setElementAt(e,count);
		   }
 	   ]


        )*


        
        {
                tableAliasList = new TableAliasList ( relationIdList, aliasList );
                return tableAliasList;
        }


}        













Expression LogicalExpression() :
{
	java.util.Vector addimage = new java.util.Vector();
        java.util.Vector operatorList = new java.util.Vector();
        Token t;
	Expression s;
}
{
  s=AdditiveExpression()
	{
	  addimage.addElement(s);
	}
  ( t=<LOGIC> s=AdditiveExpression()
	{
          operatorList.addElement(t.image);
	  addimage.addElement(s);
	}
  )*
	{
	    s =  (Exprssion)(addimage.elementAt(0));

	    for (int i = 1; i < addimage.size(); i++) 
              s = (Expression)( new Operator( (String)( operatorList.elementAt(i-1) ),
                                               s, (Expression)( unaryimage.elementAt(i) ) ) ); 

	    return s;
          
	}
}



Expression AdditiveExpression() :
{
        java.util.Vector multimage = new java.util.Vector();
        java.util.Vector operatorList = new java.util.Vector();
        Expression s;
        Token t;
}
{
  s=MultiplicativeExpression()
        {
          multimage.addElement(s);
        }
  ( t=<ADD> s=MultiplicativeExpression()
        {
          operatorList.addElement(t.image);
          multimage.addElement(s);
        }
  )*
        {

            s = (Expression)(multimage.elementAt(0));
            for (int i = 1; i < multimage.size(); i++) 
              s = (Expression)( new Operator( (String)( operatorList.elementAt(i-1) ),
                                               s, (Expression)( unaryimage.elementAt(i) ) ) ); 

            return s;
        
        } 
}


Expression MultiplicativeExpression() :
{
        java.util.Vector unaryimage = new java.util.Vector();
        java.util.Vector operatorList = new java.util.Vector();
        Expression s;
        Token t;
}
{
  s=UnaryExpression() 
        {
          unaryimage.addElement(s);
        }
  ( t=<MULT>  s= UnaryExpression()
        {
          unaryimage.addElement(s);
          operatorList.addElement(t.image);
        }
  )*
        {

            s =  (Expression)unaryimage.elementAt(0);
            for (int i = 1; i < unaryimage.size(); i++) 
              s = (Expression)( new Operator( (String)( operatorList.elementAt(i-1) ),
                                               s, (Expression)( unaryimage.elementAt(i) ) ) ); 

            return s;

        } 
}




Expression UnaryExpression() :
{
	Token alias;
        Token attribute;
        Token t;
        Integer Value;
        Double value;
  	Expression s;
}
{




  (alias=<ID> "." attribute=<ID>)
	{
	  return (Expression)( new Selection( alias.image, attribute.image) );
	}






|
  t=<DOUBLE>
	{
          value = new Double( t.image );        
	  return (Exprssion) (new Constant( value.doubleValue() ) );
	}

|
  t=<INTEGER>
	{
          Value = new Integer( t.image );        
	  return (Exprssion) (new Constant( Value.intValue() ) );
	}




|
  "(" ( s=LogicalExpression() | s=AdditiveExpression() ) ")"
	{
	  return s;
	}
}


String relationId() : 
{
       Token t;
}
{
  t=<INTEGER>
       {
         return t.image;
       }
}
 
String Alias() :
{
       Token t;
}
{
  t=<ID>
       {
         return t.image;
       }
} 






















