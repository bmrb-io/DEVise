

PARSER_BEGIN(SQLParser)

package Parser;

import Types.*;
import Expressions.*;
import DataSources.*;
import java.lang.*;

public class SQLParser {

  public static void main(String args[]) throws ParseException {

    SQLParser parser = new SQLParser( System.in );    
    
    parser.query();

  }

}


PARSER_END(SQLParser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}


TOKEN :
{
  <AS : ["A","a"]["S","s"] >
|
  <SELECT: ["S","s"]["E","e"]["L","l"]["E","e"]["C","c"]["T","t"]>
|
  < FROM: ["F","f"]["R","r"]["O","o"]["M","m"] >
|
  < SELECTION: <ID> "." <ID> >
|
  < WHERE:["W","w"]["H","h"]["E","e"]["R","r"]["E","e"] >
|
  < ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
|
  <INTEGER: ( ["0"-"9"] )+ >
|
  < DOUBLE: ( ["0"-"9"] )+ "."( ["0"-"9"] )+  >
|
  < ADD: ("+"|"-") >
|
  < MULT: ("*"|"/"|"%") >
|
  < LOGIC: ("<"|">"|"!="|"=") >
|
  < JOINT: ("||"|"&&") >
}


Query query() :
{
	java.util.Vector selectClause;
	java.util.Vector fromClause;
	Expression whereClause = null;
}
{
        <SELECT> selectClause = SelectClause() 
        <FROM>  fromClause = FromClause()
        [ <WHERE>  whereClause = WhereClause() ]
	{
		return new Query(selectClause, fromClause, whereClause);		
	}
  <EOF>
}


java.util.Vector SelectClause() :
{
	java.util.Vector expressionList = new java.util.Vector();
	Expression e;
}
{
	e = LogicalExpression()
		{
			expressionList.addElement(e);
		}
	( "," e= LogicalExpression()
		{
			expressionList.addElement(e);
		}
	)*
        
        {
                return expressionList;
        }


}


Expression WhereClause() :
{
	
	Expression e;
}
{
	e = JointExpression()
                {
                  return e;
                }


}


java.util.Vector FromClause() :
{
	java.util.Vector relationIdList = new java.util.Vector();
        java.util.Vector aliasList = new java.util.Vector();
        java.util.Vector tableAliasList  = new java.util.Vector();
	RelationId r;
        String alias;
        RelationId  rid;
        String a;
        TableAlias ta;
        int count = 0;
}
{



	r = relationId()
		{
			relationIdList.addElement(r);
		}
	[  <AS>  alias=Alias()
		{
			aliasList.setSize( count + 1 );
			aliasList.setElementAt( alias,count);
		}
	]


        (

   	   "," r = relationId()
		   {
			   relationIdList.addElement(r);
                           count++;
			   aliasList.setSize( count + 1 );
		   }
	   [  <AS> alias=Alias()
		   {
			   aliasList.setElementAt(alias,count);
		   }
 	   ]


        )*


        
        {
               for( int i = 0; i < relationIdList.size(); i++ )
               {
                  rid = (RelationId) (relationIdList.elementAt(i));
                  
                  if (aliasList.elementAt(i) != null )
                      a = (String)(aliasList.elementAt(i));
                  else
                      a = "null";
                  ta = new TableAlias(  rid, a );
                  tableAliasList.addElement(ta);  



               } 



                return tableAliasList;
        }


}        



Expression JointExpression() :
{
        java.util.Vector logicimage = new java.util.Vector();
        java.util.Vector operatorList = new java.util.Vector();
        Token t;      
	Expression s;
}
{ 
  s=LogicalExpression()
	{
	  logicimage.addElement(s);
	}
  ( t = <JOINT> s=LogicalExpression()
	{
          operatorList.addElement(t.image);
	  logicimage.addElement(s);
	}
  )*
	{
	    s =  (Expression)(logicimage.elementAt(0));

	    for (int i = 1; i < logicimage.size(); i++) 
              s = (Expression)( new Operator( (String)( operatorList.elementAt(i-1) ),
                                               s, (Expression)( logicimage.elementAt(i) ) ) ); 

	    return s;
          
	}
}








Expression LogicalExpression() :
{
	java.util.Vector addimage = new java.util.Vector();
        java.util.Vector operatorList = new java.util.Vector();
        Token t;
	Expression s;
}
{
  s=AdditiveExpression()
	{
	  addimage.addElement(s);
	}
  ( t = <LOGIC> s=AdditiveExpression()
	{
          operatorList.addElement(t.image);
	  addimage.addElement(s);
	}
  )*
	{
	    s =  (Expression)(addimage.elementAt(0));

	    for (int i = 1; i < addimage.size(); i++) 
              s = (Expression)( new Operator( (String)( operatorList.elementAt(i-1) ),
                                               s, (Expression)( addimage.elementAt(i) ) ) ); 

	    return s;
          
	}
}



Expression AdditiveExpression() :
{
        java.util.Vector multimage = new java.util.Vector();
        java.util.Vector operatorList = new java.util.Vector();
        Expression s;
        Token t;
}
{
  s=MultiplicativeExpression()
        {
          multimage.addElement(s);
        }
  ( t = <ADD> s=MultiplicativeExpression()
        {
          operatorList.addElement(t.image);
          multimage.addElement(s);
        }
  )*
        {

            s = (Expression)(multimage.elementAt(0));
            for (int i = 1; i < multimage.size(); i++) 
              s = (Expression)( new Operator( (String)( operatorList.elementAt(i-1) ),
                                               s, (Expression)( multimage.elementAt(i) ) ) ); 

            return s;
        
        } 
}


Expression MultiplicativeExpression() :
{
        java.util.Vector unaryimage = new java.util.Vector();
        java.util.Vector operatorList = new java.util.Vector();
        Expression s;
        Token t;
}
{
  s=UnaryExpression() 
        {
          unaryimage.addElement(s);
        }
  ( t = <MULT>  s= UnaryExpression()
        {
          unaryimage.addElement(s);
          operatorList.addElement(t.image);
        }
  )*
        {

            s =  (Expression)unaryimage.elementAt(0);
            for (int i = 1; i < unaryimage.size(); i++) 
              s = (Expression)( new Operator( (String)( operatorList.elementAt(i-1) ),
                                               s, (Expression)( unaryimage.elementAt(i) ) ) ); 

            return s;

        } 
}




Expression UnaryExpression() :
{
	String alias;
        String attribute;
        Token t;
        Integer Value;
        Double value;
  	Expression s;
	String str;
	int pos = 0;
}
{

  t=<SELECTION>
	{
	  str = t.image;
          for ( int i = 0; i < str.length(); i ++ )
	  {
	    if ( str.charAt(i) == '.')
	    {
	       pos = i;
	       break;
            }
          }
          alias = str.substring( 0, pos );
          attribute = str.substring( pos + 1 );
	  return ( Expression )( new Selection( alias, attribute ) );
        }
|


  t=<DOUBLE>
	{
          value = new Double( t.image );        
	  return (Expression) (new Constant( new DTE_Double (value.doubleValue()) ) );
	}

| 
  t=<INTEGER>
	{
          Value = new Integer( t.image );        
	  return (Expression) (new Constant( new DTE_Int (Value.intValue() )) );
	}




|
  "(" ( s=JointExpression() ) ")"
	{
	  return s;
	}


}


RelationId  relationId() :
{
       Token t;      
       int i1;
       int i2;
       int pos = 0;
       String str;
       RelationId rid;

}  
{

  t = <DOUBLE>
       {
          str = t.image;
          for ( int i = 0; i < str.length(); i ++ )
          {    
             if ( str.charAt(i) == '.')
             {
               pos = i;
               break;
             }
          }

          i1 = ( new Integer( str.substring( 0, pos ) ) ).intValue(); 
          i2 = ( new Integer( str.substring( pos + 1 ) ) ).intValue();

          rid = new RelationId(i1,i2);
          return rid;
       }


}
 
String Alias() :
{
       Token t;
}
{
  t=<ID>
       {
         return t.image;
       }
} 



