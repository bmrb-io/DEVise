/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. SQLParser.jj */
/*@egen*/                                                   



PARSER_BEGIN(SQLParser)

package Parser;

import Expressions.*;

class SQLParser/*@bgen(jjtree)*/implements SQLParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTSQLParserState jjtree = new JJTSQLParserState();

/*@egen*/

  public static void main(String args[]) throws ParseException {

    SQLParser parser = new SQLParser( System.in );    
    try {
      ASTStart n = parser.Start();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    parser.query();

  }

}


PARSER_END(SQLParser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}


TOKEN :
{
  < ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
|
  < DOUBLE: ( ["0"-"9"] )+ "."( ["0"-"9"] )+  >
|
  < INTEGER: ( ["0"-"9"] )+ >
|
  < ADD: ("+"|"-") >
|
  < MULT: ("*"|"/"|"%") >
|
  < LOGIC: ("<"|">"|"!="|"=") >
|
  < JOINT: ("||"|"&&") >
|
  <AS : ["A","a"]["S","s"] >
|
  < SELECT: ["S","s"]["E","e"]["L","l"]["E","e"]["C","c"]["T","t"] >
|
  < FROM: ["F","f"]["R","r"]["O","o"]["M","m"] >
|
  < WHERE:["W","w"]["H","h"]["E","e"]["R","r"]["E","e"] >
}



ASTStart Start()        : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  query()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}




Query query() :
{
	java.util.Vector selectClause;
	java.util.Vector fromClause;
	Expression whereClause;
}
{
	<SELECT> selectClause = SelectClause() 
 //       <FROM> fromClause = FromClause()
        <WHERE> whereClase = WhereClause()
	{
		return new Query(selectClause, fromClause, whereClause);		
	}
  <EOF>
}


java.util.Vector SelectClause() :
{
	java.util.Vector expressionList = new java.util.Vector();
	Expression e;
}
{
	e = LogicalExpression()
		{
			expressionList.addElement(e);
		}
	( "," e= LogicalExpression()
		{
			expressionList.addElement(e);
		}
	)*
        
        {
                return expressionList;
        }


}


Expression WhereClause() :
{
	
	Expression e;
}
{
	e = JointExpression()
                {
                  return e;
                }


}

/*
java.util.Vector FromClause() :
{
	java.util.Vector relationIdList = new java.util.Vector();
        java.util.Vector aliaslist = new java.util.Vector();
        java.util.Vector tableAliasList  = new java.util.Vector();
	RelationId e;
        String alias;
        RelationId  rid;
        String a;
        RelationManager rm;
        TableAlias ta;
        int count = 0;
}
{



	e = relationId()
		{
			relationIdList.addElement(e);
		}
	[ <AS> alias=Alias()
		{
			aliasList.setElementAt(e,count);
		}
	]


        (

   	   "," e = relationId()
		   {
			   relationIdList.addElement(e);
                           count++;
		   }
	   [ <AS> alias=Alias()
		   {
			   aliasList.setElementAt(e,count);
		   }
 	   ]


        )*


        
        {
               for( int i = 0; i < relationIdList.size(); i++ )
               {
                  rid = (RelationId) (relationIdList.elementAt(i));
                  
                  if (aliasList.elementAt(i) != null )
                      a = (String)(aliasList.elementAt(i));
                  else
                      a = "null";
                  rm = new RelationManager( rid.getServerId(), rid.getLocalId() );                          
                  ta = new TableAlias( rm , rid, a );
                  tableAliasList.addElement(ta);  



               } 



                return tableAliasList;
        }


}        

*/

Expression JointExpression() :
{
        java.util.Vector logicimage = new java.util.Vector();
        java.util.Vector operatorList = new java.util.Vector();
        Token t;
	Expression s;
}
{ 
  s=LogicalExpression()
	{
	  logicimage.addElement(s);
	}
  ( t=<JOINT> s=LogicalExpression()
	{
          operatorList.addElement(t.image);
	  addimage.addElement(s);
	}
  )*
	{
	    s =  (Exprssion)(logicimage.elementAt(0));

	    for (int i = 1; i < logicimage.size(); i++) 
              s = (Expression)( new Operator( (String)( operatorList.elementAt(i-1) ),
                                               s, (Expression)( logicimage.elementAt(i) ) ) ); 

	    return s;
          
	}
}








Expression LogicalExpression() :
{
	java.util.Vector addimage = new java.util.Vector();
        java.util.Vector operatorList = new java.util.Vector();
        Token t;
	Expression s;
}
{
  s=AdditiveExpression()
	{
	  addimage.addElement(s);
	}
  ( t=<LOGIC> s=AdditiveExpression()
	{
          operatorList.addElement(t.image);
	  addimage.addElement(s);
	}
  )*
	{
	    s =  (Expression)(addimage.elementAt(0));

	    for (int i = 1; i < addimage.size(); i++) 
              s = (Expression)( new Operator( (String)( operatorList.elementAt(i-1) ),
                                               s, (Expression)( addimage.elementAt(i) ) ) ); 

	    return s;
          
	}
}



Expression AdditiveExpression() :
{
        java.util.Vector multimage = new java.util.Vector();
        java.util.Vector operatorList = new java.util.Vector();
        Expression s;
        Token t;
}
{
  s=MultiplicativeExpression()
        {
          multimage.addElement(s);
        }
  ( t=<ADD> s=MultiplicativeExpression()
        {
          operatorList.addElement(t.image);
          multimage.addElement(s);
        }
  )*
        {

            s = (Expression)(multimage.elementAt(0));
            for (int i = 1; i < multimage.size(); i++) 
              s = (Expression)( new Operator( (String)( operatorList.elementAt(i-1) ),
                                               s, (Expression)( multimage.elementAt(i) ) ) ); 

            return s;
        
        } 
}


Expression MultiplicativeExpression() :
{
        java.util.Vector unaryimage = new java.util.Vector();
        java.util.Vector operatorList = new java.util.Vector();
        Expression s;
        Token t;
}
{
  s=UnaryExpression() 
        {
          unaryimage.addElement(s);
        }
  ( t=<MULT>  s= UnaryExpression()
        {
          unaryimage.addElement(s);
          operatorList.addElement(t.image);
        }
  )*
        {

            s =  (Expression)unaryimage.elementAt(0);
            for (int i = 1; i < unaryimage.size(); i++) 
              s = (Expression)( new Operator( (String)( operatorList.elementAt(i-1) ),
                                               s, (Expression)( unaryimage.elementAt(i) ) ) ); 

            return s;

        } 
}




Expression UnaryExpression() :
{
	Token alias;
        Token attribute;
        Token t;
        Integer Value;
        Double value;
  	Expression s;
}
{


  t=<DOUBLE>
	{
          value = new Double( t.image );        
	  return (Expression) (new Constant( value.doubleValue() ) );
	}

|
  t=<INTEGER>
	{
          Value = new Integer( t.image );        
	  return (Expression) (new Constant( Value.intValue() ) );
	}




|
  "(" ( s=JointExpression() ) ")"
	{
	  return s;
	}
/*

|  s=JointExpression() 

	{
	  return s;
	}

*/


}
/*

RelationId  relationId() :
{ 
       Token t1;
       Token t2;
       int i1;
       int i2;
       RelationId rid;

}  
{
  (
  t1=<INTEGER>
       {
         i1 = ( new Integer( t1.image) ).intValue();
       }
  "."
  
  t2=<INTEGER>

       {
         i2 = ( new Integer( t2.image) ).intValue();
       }
  )


  {
    
      rid = new RelationId(i1,i2);
      return rid;
  }


}
 
String Alias() :
{
       Token t;
}
{
  t=<ID>
       {
         return t.image;
       }
} 




*/

















