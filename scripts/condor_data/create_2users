#! /s/std/bin/perl

#  ========================================================================
#  DEVise Data Visualization Software
#  (c) Copyright 1999
#  By the DEVise Development Group
#  Madison, Wisconsin
#  All Rights Reserved.
#  ========================================================================
#
#  Under no circumstances is this software to be copied, distributed,
#  or altered in any way without prior permission from the DEVise
#  Development Group.

#  This script takes Condor data, already split by split_user_data,
#  and creates a DEVise session file that displays
#  each user's data as a view symbol.

#  Note: this script relies on there being a 'Total' user in the data.

############################################################

#  $Id$

#  $Log$
#  Revision 1.14  1999/09/07 19:01:06  wenger
#  dteInsertCatalogEntry command changed to tolerate an attempt to insert
#  duplicate entries without causing a problem (to allow us to get rid of
#  Tcl in session files); changed Condor session scripts to take out Tcl
#  control statements in data source definitions; added viewGetImplicitHome
#  and related code in Session class so this gets saved in session files
#  (still no GUI for setting this, though); removed SEQ-related code.
#
#  Revision 1.13  1999/09/03 16:59:46  wenger
#  Fixed problems in defining top-level user list data source.
#
#  Revision 1.12  1999/08/30 20:11:45  wenger
#  Turned on axes without ticks in user data views.
#
#  Revision 1.11  1999/08/17 19:47:10  wenger
#  Converted Condor UserMonth session from high/low symbols to piles for
#  better representation of data; fixed some cursor/pile drawing bugs and
#  TData switching bugs that I found in the process.
#
#  Revision 1.10  1999/08/10 18:30:18  wenger
#  Reduced font size for user names; user names now drawn by the JavaScreen;
#  reduced size of user name window.
#
#  Revision 1.9  1999/08/06 17:59:53  wenger
#  Changed data font from Courier to New Century Schoolbook.
#
#  Revision 1.8  1999/07/23 20:37:50  wenger
#  Added disabling of user actions in relevant views.
#
#  Revision 1.7  1999/07/22 14:52:13  wenger
#  Updated Condor scripts for alignment info in mapping instead of view.
#
#  Revision 1.6  1999/07/15 19:26:42  wenger
#  Decreased font sizes for better appearance.
#
#  Revision 1.5  1999/06/30 17:39:11  wenger
#  Changed Condor session creation scripts because of new view symbol
#  color feature.
#
#  Revision 1.4  1999/06/04 20:53:35  wenger
#  Made total views view symbols so they line up with the other views;
#  fixed a few other minor problems.
#
#  Revision 1.3  1999/05/07 20:39:39  wenger
#  Made improvements to Condor user session scripts as requested by Miron.
#
#  Revision 1.2  1999/04/29 15:50:12  wenger
#  Changed HighLow symbols so that Y is the top rather than the middle (so
#  visual filter and home work better); changed Condor session scripts
#  accordingly.
#
#  Revision 1.1  1999/04/28 18:30:18  wenger
#  Split up data-splitting and session-creating parts of Condor session
#  scripts; made a new script to make a session with thumbnails for each
#  user; moved the scripts into scripts/condor.
#
#  Revision 1.8  1999/04/22 19:30:02  wenger
#  Separated the configuration of explicit (user-requested) and implicit
#  home actions (no GUI for configuring the implicit home); changed the
#  Condor user script accordingly; modified JavaScreen support so that this
#  all works for the JS.
#
#  Revision 1.7  1999/04/21 14:54:44  wenger
#  Text scaling in text symbols can be bypassed with negative width and
#  non-zero orientation (actually an unintentional affect of the previous
#  change); changed GUI and Condor user session script accordingly.
#
#  Revision 1.6  1999/04/20 13:46:10  wenger
#  Updated Condor user script as per Miron's changes to the session.
#
#  Revision 1.5  1999/04/16 20:59:30  wenger
#  Fixed various bugs related to view symbols, including memory problem
#  with MappingInterp dimensionInfo; updated create_condor_session script
#  to take advantage of view symbol TData switching capability.
#
#  Revision 1.4  1999/04/02 22:27:21  wenger
#  Modified session to allow comparison of two users, as per request from
#  Miron.
#
#  Revision 1.3  1999/03/24 22:05:21  wenger
#  Viewsyms now arranged vertically; added second window with user names.
#
#  Revision 1.2  1999/03/23 20:57:24  wenger
#  Session code checks for existance of data sources.
#
#  Revision 1.1  1999/03/23 20:31:16  wenger
#  First version -- still needs a little cleanup, but almost there.
#

############################################################

$debug = 0;

die "usage: create_2users <data directory> <session file>\n",
    "  <user list schema file> <data schema file>\n" if ($#ARGV != 3);

$data_dir = shift(@ARGV);
$session_file = shift(@ARGV);
$user_schema = shift(@ARGV);
$data_schema = shift(@ARGV);

# Find all of the users in the data file.
%userlist = ();
GetUsers();
@userarray = sort keys %userlist;
$usercount = $#userarray + 1;

# Create the session file.
CreateSession($session_file);

#-----------------------------------------------------------

sub GetUsers {

  open(DATA_IN, "${data_dir}/UserList") ||
      die "Couldn't open data file $data_file: $!\n";

  while ($line = <DATA_IN>) {
    print "line = $line" if ($debug);
    $tmpuser = GetUserFromLine($line);
    print "  tmpuser = $tmpuser\n" if ($debug);
    $userlist{$tmpuser} = 1;
  }
  print "\n" if ($debug);

  close(DATA_IN);
}

#-----------------------------------------------------------

sub GetUserFromLine {
  my $line = shift(@_);

  my @tmpuser = split(" ", $line);

  return $tmpuser[0];
}

#-----------------------------------------------------------

sub CreateSession {
  my $session_file = shift(@_);

  open(SES_OUT, ">$session_file") ||
      die "Can't create session_file $session_file: $!";

  #TEMP -- add std header??
  print SES_OUT "# DEVise session file created by create_condor_session\n\n";

  my $data_prefix = "Condor_";

  # Define data sources.
  DefineData($data_prefix);

  # Create views.
  CreateViews();

  # Create the mapping class and mappings.
  $mapClass = CreateMappings($data_prefix);

  # Insert mappings into views.
  InsertMappings($mapClass);

  # Create links and cursors and insert them into views.
  CreateLinksCursors();

  # Create the windows and insert the views into them.
  CreateWindows();

  # Force the visual filters to get updated when this session is opened.
  print SES_OUT "DEVise updateFilters\n";

  # Initialize views to show the full X range of data.
  print SES_OUT "DEVise viewGoHome Total_viewsymA\n";
  print SES_OUT "DEVise waitForQueries\n";
  print SES_OUT "DEVise viewGoHome User1_viewsymA\n";
  print SES_OUT "DEVise viewGoHome Total_viewsymA\n";

  close(SES_OUT);
}

#-----------------------------------------------------------

sub DefineData {
  my $data_prefix = shift(@_);

  print SES_OUT "# Define data sources\n";

  use Cwd;
  $data_path = cwd() . "/$data_dir";

  # Create a data source for the top-level data (list of users).
  #TEMP -- name should probably be a variable
  my $dataName = $data_prefix . "UserList";
  my $dataFile = "UserList";

  #TEMP?
  my $schemaType = "CondorUserList";

  print SES_OUT "DEVise dteInsertCatalogEntry . {\"$dataName\" UNIXFILE $dataFile $schemaType $user_schema \"\" 100 50 \"$data_path\" \"\"\} ;\n";

  #TEMP?
  $schemaType = "CondorUser";

  # Create a data source for each user's data.
  my $user;
  foreach $user (@userarray) {
    $dataName = $data_prefix . $user;
    $dataFile = $user . ".dat";

    print SES_OUT "DEVise dteInsertCatalogEntry . {\"$dataName\" UNIXFILE $dataFile $schemaType $data_schema \"\" 100 50 \"$data_path\" \"\"\} ;\n";
  }
}

#-----------------------------------------------------------

sub CreateViews {
  print SES_OUT "\n# Create views\n";

  print SES_OUT "DEVise create {view} {Scatter} UserList_view -0.05 1.05 0 1 36 9\n";
  print SES_OUT "DEVise viewSetImplicitHome {UserList_view} 0 1 1 1 0.55 0.55 0.0 0.0 ",
      "100.0 100.0\n";
  print SES_OUT "DEVise setViewAutoFilter UserList_view 1\n";
  print SES_OUT "DEVise viewSetDisabledActions UserList_view 1 0 0 1\n";
  print SES_OUT "DEVise viewSetJSSendP UserList_view 0 1 0 {} 1 { } 1";
  print SES_OUT "\n";

  print SES_OUT "DEVise create {view} {Scatter} Select1_view 0 1 0 1 36 2\n";
  print SES_OUT "DEVise viewSetImplicitHome {Select1_view} 1 1 1 1 0.55 0.55 0.0 0.0 ",
      "100.0 100.0\n";
  print SES_OUT "DEVise setViewAutoFilter Select1_view 1\n";
  print SES_OUT "DEVise viewSetDisabledActions Select1_view 1 0 0 1\n";
  print SES_OUT "\n";

  print SES_OUT "DEVise create {view} {Scatter} Select2_view 0 1 0 1 36 9\n";
  print SES_OUT "DEVise viewSetImplicitHome {Select2_view} 1 1 1 1 0.55 0.55 0.0 0.0 ",
      "100.0 100.0\n";
  print SES_OUT "DEVise setViewAutoFilter Select2_view 1\n";
  print SES_OUT "DEVise viewSetDisabledActions Select2_view 1 0 0 1\n";
  print SES_OUT "\n";

  print SES_OUT "DEVise create {view} {Scatter} User1_viewA 0 1 -1 -2 36 2\n";
  $top = $usercount - 0.5;
  $bottom = $usercount - 1.5;
  print SES_OUT "DEVise viewSetImplicitHome {User1_viewA} 1 1 2 1 0.5 0.5 -0.5 ",
      "$bottom 0.5 $top\n";
  print SES_OUT "DEVise setViewAutoFilter User1_viewA 1\n";
  print SES_OUT "DEVise viewSetDisabledActions User1_viewA 1 1 1 1\n";
  print SES_OUT "\n";

  print SES_OUT "DEVise create {view} {Scatter} User1_viewB 0 1 -1 -2 36 2\n";
  $top = $usercount - 0.5;
  $bottom = $usercount - 1.5;
  print SES_OUT "DEVise viewSetImplicitHome {User1_viewB} 1 1 2 1 0.5 0.5 -0.5 ",
      "$bottom 0.5 $top\n";
  print SES_OUT "DEVise setViewAutoFilter User1_viewB 1\n";
  print SES_OUT "DEVise viewSetDisabledActions User1_viewB 1 1 1 1\n";
  print SES_OUT "\n";

  print SES_OUT "DEVise create {view} {Scatter} User2_viewA 0 1 -1 -2 36 9\n";
  $top = $usercount - 1.5;
  $bottom = $usercount - 2.5;
  print SES_OUT "DEVise viewSetImplicitHome {User2_viewA} 1 1 2 1 0.5 0.5 -0.5 ",
      "$bottom 0.5 $top\n";
  print SES_OUT "DEVise setViewAutoFilter User2_viewA 1\n";
  print SES_OUT "DEVise viewSetDisabledActions User2_viewA 1 1 1 1\n";
  print SES_OUT "\n";

  print SES_OUT "DEVise create {view} {Scatter} User2_viewB 0 1 -1 -2 36 9\n";
  $top = $usercount - 1.5;
  $bottom = $usercount - 2.5;
  print SES_OUT "DEVise viewSetImplicitHome {User2_viewB} 1 1 2 1 0.5 0.5 -0.5 ",
      "$bottom 0.5 $top\n";
  print SES_OUT "DEVise setViewAutoFilter User2_viewB 1\n";
  print SES_OUT "DEVise viewSetDisabledActions User2_viewB 1 1 1 1\n";
  print SES_OUT "\n";

  print SES_OUT "DEVise create {view} {Scatter} TotalLinked_viewA ",
      "-0.5 0.5 -0.5 0.5 36 9\n";
  print SES_OUT "DEVise viewSetDisabledActions TotalLinked_viewA 1 1 1 1\n";
  print SES_OUT "\n";

  print SES_OUT "DEVise create {view} {Scatter} TotalLinked_viewB ",
      "-0.5 0.5 -0.5 0.5 36 9\n";
  print SES_OUT "DEVise viewSetDisabledActions TotalLinked_viewB 1 1 1 1\n";
  print SES_OUT "\n";

  print SES_OUT "DEVise create {view} {Scatter} Total_viewA ",
      "-0.5 0.5 -0.5 0.5 36 9\n";
  print SES_OUT "DEVise viewSetDisabledActions Total_viewA 1 1 1 1\n";
  print SES_OUT "\n";

  print SES_OUT "DEVise create {view} {Scatter} Total_viewB ",
      "-0.5 0.5 -0.5 0.5 36 9\n";
  print SES_OUT "DEVise viewSetDisabledActions Total_viewB 1 1 1 1\n";
  print SES_OUT "\n";

  my @users;
  $users[0] = "User1";
  $users[1] = "User2";
  $users[2] = "TotalLinked";
  $users[3] = "Total";
  my %bgColor;
  $bgColor{$users[0]} = 2;
  $bgColor{$users[1]} = 9;
  $bgColor{$users[2]} = 9;
  $bgColor{$users[3]} = 9;
  my $user;
  foreach $user (@users) {
    # Create the view.
    print SES_OUT "DEVise create {view} {Scatter} ${user}_viewsymA 0 1 0 1 36 $bgColor{$user}\n";

    # Force the bottom of the visual filter to be set to 0 on home.
    print SES_OUT "DEVise viewSetImplicitHome {${user}_viewsymA} ",
      "0 1 1 1 0.0 0.0 0.0 0.0 100.0 100.0\n";
    print SES_OUT "DEVise viewSetHome {${user}_viewsymA} ",
      "1 1 1 1 0.0 0.0 0.0 0.0 100.0 100.0\n";

    # Set this view for automatic filter updating.
    print SES_OUT "DEVise setViewAutoFilter ${user}_viewsymA 1\n";

    # Turn on the X and Y axes.
    #if ($user ne "User1" && $user ne "User2") {
      print SES_OUT "DEVise setAxisDisplay ${user}_viewsymA {X} 1\n";
    #}
    print SES_OUT "DEVise setAxisDisplay ${user}_viewsymA {Y} 1\n";

    if ($user eq "User1" || $user eq "User2") {
      print SES_OUT "DEVise setAxisTicks ${user}_viewsymA {X} 0\n";
    }

    print SES_OUT "DEVise setXAxisDateFormat ${user}_viewsymA {%b %d %H:%M}\n";

    print SES_OUT "DEVise setFont ${user}_viewsymA {x axis} 0 10 0 0\n";
    print SES_OUT "DEVise setFont ${user}_viewsymA {y axis} 0 10 0 0\n";

    print SES_OUT "\n";


    # Create the view.
    print SES_OUT "DEVise create {view} {Scatter} ${user}_viewsymB 0 1 0 1 36 $bgColor{$user}\n";

    # Force the bottom of the visual filter to be set to 0 on home.
    print SES_OUT "DEVise viewSetImplicitHome {${user}_viewsymB} ",
      "0 1 1 1 0.0 0.0 0.0 0.0 100.0 100.0\n";
    print SES_OUT "DEVise viewSetHome {${user}_viewsymB} ",
      "1 1 1 1 0.0 0.0 0.0 0.0 100.0 100.0\n";

    # Set this view for automatic filter updating.
    print SES_OUT "DEVise setViewAutoFilter ${user}_viewsymB 1\n";

    # Turn on the X and Y axes.
    if ($user ne "User1" && $user ne "User2") {
      print SES_OUT "DEVise setAxisDisplay ${user}_viewsymB {X} 1\n";
    }
    print SES_OUT "DEVise setAxisDisplay ${user}_viewsymB {Y} 1\n";

    print SES_OUT "DEVise setXAxisDateFormat ${user}_viewsymB {%b %d %H:%M}\n";

    print SES_OUT "DEVise setFont ${user}_viewsymB {x axis} 0 10 0 0\n";
    print SES_OUT "DEVise setFont ${user}_viewsymB {y axis} 0 10 0 0\n";

    print SES_OUT "\n";
  }

  print SES_OUT "DEVise viewSetDisabledActions Total_viewsymA 1 0 0 1\n";
}

#-----------------------------------------------------------

sub CreateMappings {
  my $data_prefix = shift(@_);

  print SES_OUT "\n# Create mapping class\n";

  # Just use a single mapping class for all mappings.  Not the way
  # DEVise does it, but there doesn't seem to be any reason for
  # multiple mapping classes.
  my $mappingClass = "condor_user_mc";
  print SES_OUT "DEVise createMappingClass {$mappingClass}\n";

  print SES_OUT "\n# Create mappings\n";

  my $dataName = "${data_prefix}UserList";
  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "AllUser#$mappingClass {} {0} {\$X} {} 8 0.9 0 0 17 {\$ViewName} ",
      "1 1 {} {} {} {} {} {} {}\n";
  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "UserList#$mappingClass {} {0} {\$X} {} 37 0.9 0 360 12 {\$UserName} ",
      "{} {-2} {0.6} {} {-3} {4} {} {} {}\n";

  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "Select1#$mappingClass {} {0} {\$X} {} 8 0.5 0 0 0 1 1 ",
      "{} {} {} {} {} {} {} {}\n";
  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "Select2#$mappingClass {} {0} {\$X} {} 8 0.5 0 0 0 1 1 ",
      "{} {} {} {} {} {} {} {}\n";

  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "User1A#$mappingClass {} {0} {\$X} {} {} 0.98 0 0 17 ",
      "{\"User1_viewsymA\"} 1 1 {\$TDataName} {\"User1Pile\"} {} {} {} {} {}\n";
  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "User1B#$mappingClass {} {0} {\$X} {} {} 0.98 0 0 17 ",
      "{\"User1_viewsymB\"} 1 1 {\$TDataName} {\"User1Pile\"} {} {} {} {} {}\n";

  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "User2A#$mappingClass {} {0} {\$X} {} {} 0.98 0 0 17 ",
      "{\"User2_viewsymA\"} 1 1 {\$TDataName} {\"User2Pile\"} {} {} {} {} {}\n";
  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "User2B#$mappingClass {} {0} {\$X} {} {} 0.98 0 0 17 ",
      "{\"User2_viewsymB\"} 1 1 {\$TDataName} {\"User2Pile\"} {} {} {} {} {}\n";

  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "TotalA#$mappingClass {} {0} {\$X} {} {} 0.98 0 0 17 ",
	  "{\"Total_viewsymA\"} 1 1 {} {\"TotalPile\"} {} {} {} {} {}\n";
  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "TotalB#$mappingClass {} {0} {\$X} {} {} 0.98 0 0 17 ",
	  "{\"Total_viewsymB\"} 1 1 {} {\"TotalPile\"} {} {} {} {} {}\n";

  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "TotalLinkedA#$mappingClass {} {0} {\$X} {} {} 0.98 0 0 17 ",
	  "{\"TotalLinked_viewsymA\"} 1 1 {} {\"TotalLinkedPile\"} {} {} {} {} {}\n";
  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "TotalLinkedB#$mappingClass {} {0} {\$X} {} {} 0.98 0 0 17 ",
	  "{\"TotalLinked_viewsymB\"} 1 1 {} {\"TotalLinkedPile\"} {} {} {} {} {}\n";

  # Note: this is really a "dummy" TData for the User1 and User2 views --
  # it will get switched when the view symbol is drawn.
  $dataName = "Condor_Total";
  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "User1symA#$mappingClass {} {\$time} {\$total_jobs} {} 36 1 0 0 2 1 ",
      "{} {} {} {3} {} {} {} {} {}\n";
  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "User1symB#$mappingClass {} {\$time} {\$jobs_running} {} 31 1 0 0 2 1 ",
      "{} {} {} {3} {} {} {} {} {}\n";

  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "User2symA#$mappingClass {} {\$time} {\$total_jobs} {} 36 1 0 0 2 1 ",
      "{} {} {} {3} {} {} {} {} {}\n";
  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "User2symB#$mappingClass {} {\$time} {\$jobs_running} {} 31 1 0 0 2 1 ",
      "{} {} {} {3} {} {} {} {} {}\n";

  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "TotalsymA#$mappingClass {} {\$time} {\$total_jobs} {} 36 1 0 0 2 1 ",
      "{} {} {} {3} {} {} {} {} {}\n";
  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "TotalsymB#$mappingClass {} {\$time} {\$jobs_running} {} 31 1 0 0 2 1 ",
      "{} {} {} {3} {} {} {} {} {}\n";

  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "TotalLinkedsymA#$mappingClass {} {\$time} {\$total_jobs} {} 36 1 0 0 2 1 ",
      "{} {} {} {3} {} {} {} {} {}\n";
  print SES_OUT "DEVise create {mapping} $mappingClass .$dataName ",
      "TotalLinkedsymB#$mappingClass {} {\$time} {\$jobs_running} {} 31 1 0 0 2 1 ",
      "{} {} {} {3} {} {} {} {} {}\n";

  return $mappingClass;
}

#-----------------------------------------------------------

sub InsertMappings {
  my $mappingClass = shift(@_);

  print SES_OUT "\n# Insert mappings into views\n";

  print SES_OUT "DEVise insertMapping {UserList_view} ",
      "{UserList#$mappingClass}\n";

  print SES_OUT "DEVise insertMapping {Select1_view} ",
      "{Select1#$mappingClass}\n";
  print SES_OUT "DEVise insertMapping {Select2_view} ",
      "{Select2#$mappingClass}\n";

  print SES_OUT "DEVise insertMapping {User1_viewA} ",
      "{User1A#$mappingClass}\n";
  print SES_OUT "DEVise insertMapping {User1_viewB} ",
      "{User1B#$mappingClass}\n";

  print SES_OUT "DEVise insertMapping {User2_viewA} ",
      "{User2A#$mappingClass}\n";
  print SES_OUT "DEVise insertMapping {User2_viewB} ",
      "{User2B#$mappingClass}\n";

  print SES_OUT "DEVise insertMapping {User1_viewsymA} ",
      "{User1symA#$mappingClass}\n";
  print SES_OUT "DEVise insertMapping {User1_viewsymB} ",
      "{User1symB#$mappingClass}\n";

  print SES_OUT "DEVise insertMapping {User2_viewsymA} ",
      "{User2symA#$mappingClass}\n";
  print SES_OUT "DEVise insertMapping {User2_viewsymB} ",
      "{User2symB#$mappingClass}\n";

  print SES_OUT "DEVise insertMapping {Total_viewsymA} ",
      "{TotalsymA#$mappingClass}\n";
  print SES_OUT "DEVise insertMapping {Total_viewsymB} ",
      "{TotalsymB#$mappingClass}\n";

  print SES_OUT "DEVise insertMapping {TotalLinked_viewsymA} ",
      "{TotalLinkedsymA#$mappingClass}\n";
  print SES_OUT "DEVise insertMapping {TotalLinked_viewsymB} ",
      "{TotalLinkedsymB#$mappingClass}\n";

  print SES_OUT "DEVise insertMapping {Total_viewA} ",
      "{TotalA#$mappingClass}\n";
  print SES_OUT "DEVise insertMapping {Total_viewB} ",
      "{TotalB#$mappingClass}\n";

  print SES_OUT "DEVise insertMapping {TotalLinked_viewA} ",
      "{TotalLinkedA#$mappingClass}\n";
  print SES_OUT "DEVise insertMapping {TotalLinked_viewB} ",
      "{TotalLinkedB#$mappingClass}\n";
}

#-----------------------------------------------------------

sub CreateLinksCursors {

  # Cursor to select first user to view.
  print SES_OUT "DEVise create {cursor} {Cursor} UserCursor1 2 1 1.000000 ",
      "1.000000\n";
  print SES_OUT "DEVise setCursorFixedSize UserCursor1 1\n";
  print SES_OUT "DEVise setCursorSrc {UserCursor1} {User1_viewA}\n";
  print SES_OUT "DEVise setCursorDst {UserCursor1} {Select1_view}\n";

  # Cursor to select second user to view.
  print SES_OUT "DEVise create {cursor} {Cursor} UserCursor2 2 1 1.000000 ",
      "1.000000\n";
  print SES_OUT "DEVise setCursorFixedSize UserCursor2 1\n";
  print SES_OUT "DEVise setCursorSrc {UserCursor2} {User2_viewA}\n";
  print SES_OUT "DEVise setCursorDst {UserCursor2} {Select2_view}\n";

  print SES_OUT "DEVise create {link} {Visual_Link} TimeLink 1\n";
  print SES_OUT "DEVise insertLink {TimeLink} {User1_viewsymA}\n";
  print SES_OUT "DEVise insertLink {TimeLink} {User2_viewsymA}\n";
  print SES_OUT "DEVise insertLink {TimeLink} {TotalLinked_viewsymA}\n";

  # Cursor to select time range for user data.
  print SES_OUT "DEVise create {cursor} {Cursor} TimeCursor 1 0 1.000000 ",
      "1.000000\n";
  print SES_OUT "DEVise setCursorSrc {TimeCursor} {User1_viewsymA}\n";
  print SES_OUT "DEVise setCursorDst {TimeCursor} {Total_viewsymA}\n";
}

#-----------------------------------------------------------

sub CreateWindows {

  print SES_OUT "\n# Create windows and insert views\n";

  print SES_OUT "DEVise create {window} {TileLayout} UserList 0.10 0.20 ",
      "0.15 0.74 0 0\n";
  print SES_OUT "DEVise insertWindow {UserList_view} {UserList}\n";

  print SES_OUT "DEVise create {window} {TileLayout} Total 0.25 0.87 0.73 ",
      "0.07 0 0\n";
  print SES_OUT "DEVise insertWindow {Total_viewA} {Total}\n";
  print SES_OUT "DEVise insertWindow {Total_viewB} {Total}\n";

  print SES_OUT "DEVise create {window} {TileLayout} Select1 0.02 0.20 ",
      "0.04 0.74 0 0\n";
  print SES_OUT "DEVise insertWindow {Select1_view} {Select1}\n";

  print SES_OUT "DEVise create {window} {TileLayout} Select2 0.06 0.20 ",
      "0.04 0.74 0 0\n";
  print SES_OUT "DEVise insertWindow {Select2_view} {Select2}\n";

  print SES_OUT "DEVise create {window} {TileLayout} User1 0.25 0.20 0.73 ",
      "0.22 0 0\n";
  print SES_OUT "DEVise insertWindow {User1_viewA} {User1}\n";
  print SES_OUT "DEVise insertWindow {User1_viewB} {User1}\n";

  print SES_OUT "DEVise create {window} {TileLayout} User2 0.25 0.42 0.73 ",
      "0.22 0 0\n";
  print SES_OUT "DEVise insertWindow {User2_viewA} {User2}\n";
  print SES_OUT "DEVise insertWindow {User2_viewB} {User2}\n";

  print SES_OUT "DEVise create {window} {TileLayout} TotalLinked ",
      "0.25 0.64 0.73 0.23 0 0\n";
  print SES_OUT "DEVise insertWindow {TotalLinked_viewA} {TotalLinked}\n";
  print SES_OUT "DEVise insertWindow {TotalLinked_viewB} {TotalLinked}\n";

  print SES_OUT "DEVise setPileStackState {User1} 4\n";
  print SES_OUT "DEVise setPileStackState {User2} 4\n";
  print SES_OUT "DEVise setPileStackState {TotalLinked} 4\n";
  print SES_OUT "DEVise setPileStackState {Total} 4\n";
}

#-----------------------------------------------------------
