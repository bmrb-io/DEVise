// ========================================================================
// DEVise Data Visualization Software
// (c) Copyright 2003-2007
// By the DEVise Development Group
// Madison, Wisconsin
// All Rights Reserved.
// ========================================================================

// Under no circumstances is this software to be copied, distributed,
// or altered in any way without prior permission from the DEVise
// Development Group.

// ------------------------------------------------------------------------

// This class keeps a list of the residues for the entry being processed.

// ------------------------------------------------------------------------

// $Id$

// $Log$
// Revision 1.2  2006/02/01 20:23:12  wenger
// Merged V2_1b4_br_0 thru peptide_cgi_10_8_0_base to the
// trunk.
//
// Revision 1.1.2.5  2004/12/03 17:18:34  wenger
// Added BMRB accession number, PDB ID (if relevant), timestamp and
// Peptide-CGI version number to Peptide-CGI visualizations.
//
// Revision 1.1.2.4  2004/06/16 19:23:31  wenger
// Added headers to data files generated by Peptide-CGI.
//
// Revision 1.1.2.3  2003/11/30 23:39:06  wenger
// Fixed up chem shift ref output in summary html file; added more
// debug code to S2DResList.
//
// Revision 1.1.2.2  2003/05/14 21:45:52  wenger
// Changed "/"s in file names to File.separator (hope I got them all!).
//
// Revision 1.1.2.1  2003/04/22 21:58:15  wenger
// Added package name to peptide-cgi java code and put everything into
// a single jar file; version is now 6.0.
//
// Revision 1.1.2.3  2003/04/09 18:02:13  wenger
// First version of visualization-server capability now in place; still
// needs some fixes.
//
// Revision 1.1.2.2  2003/03/19 17:43:02  wenger
// Fixed bug 019 (problem with residue lists in the atomic coordinate
// sessions).
//
// Revision 1.1.2.1  2003/03/06 20:39:16  wenger
// Residue lists in the 3D visualizations now correctly come from the
// monomeric_polymer save frame, as opposed to the coordinate data.
//

// ========================================================================

package star2devise;

import java.io.*;
import java.util.*;

public class S2DResList {
    //===================================================================
    // VARIABLES

    private static final int DEBUG = 0;

    private String _name;
    private String _dataDir;

    private int[] _resSeqCodes;
    private String[] _residueLabels;

    private String[] _acidList = new String[] { "ALA", "ARG", "ASP", "ASN",
      "CYS", "GLU", "GLN", "GLY", "HIS", "ILE", "LEU", "LYS", "MET", "PHE",
      "PRO", "SER", "THR", "TRP", "TYR", "VAL" };
    private Hashtable _ht = null;

    //===================================================================
    // PUBLIC METHODS
    public S2DResList(String name, String dataDir, int[] resSeqCodes,
      String[] residueLabels)
    {
        if (doDebugOutput(11)) {
	    System.out.println("S2DResList.S2DResList()");
	}

        _name = name;
	_dataDir = dataDir;

        _resSeqCodes = resSeqCodes;
	_residueLabels = residueLabels;

	//
        // Pre-load hash table with all amino acids, count of 0.
	//
	_ht = new Hashtable(_acidList.length);

	Integer tmpInt = new Integer(0);
	for (int index = 0; index < _acidList.length; index++) {
	    _ht.put (_acidList[index], tmpInt);
	}
    }

    public void write(int frameIndex) throws S2DException
    {
        if (doDebugOutput(11)) {
	    System.out.println("S2DResList.write(" + frameIndex + ")");
	}

        String filename = _dataDir + File.separator + _name +
	  S2DNames.RES_LIST_SUFFIX + frameIndex + S2DNames.DAT_SUFFIX;
        write(filename);
    }

    public void write(String filename) throws S2DException
    {
        if (doDebugOutput(11)) {
	    System.out.println("S2DResList.write(" + filename + ")");
	}

        FileWriter listWriter = null;
        try {
            listWriter = S2DFileWriter.create(filename);
	    listWriter.write("# Data: residue list for " + _name + "\n");
	    listWriter.write("# Schema: bmrb-ResList\n");
	    listWriter.write("# Attributes: Residue_seq_code; ResLabel\n");
            listWriter.write("# Peptide-CGI version: " +
	      S2DMain.PEP_CGI_VERSION + "\n");
            listWriter.write("# Generation date: " +
	      S2DMain.getTimestamp() + "\n");
	    listWriter.write("#\n");
        } catch(IOException ex) {
            System.err.println("IOException writing amino acid counts: " +
	      ex.toString());
            throw new S2DError("Can't write amino acid counts");
        }

        try {
            write(listWriter);
        } finally {
            try {
                listWriter.close();
            } catch (IOException ex) {
                System.err.println("IOException: " + ex.toString());
            }
        }
    }

    //TEMPTEMP -- must change this!!!!
    public void write(Writer writer) throws S2DException
    {
        if (doDebugOutput(11)) {
	    System.out.println("S2DResList.write()");
	}

	//
	// Count up the number of each amino acid.
	//
	if (_resSeqCodes != null && _residueLabels != null) {
	    int prevCode = -1;
            for (int index = 0; index < _resSeqCodes.length; index++) {
	        if (_resSeqCodes[index] != prevCode) {
		    incrementCount(_residueLabels[index]);
	            prevCode = _resSeqCodes[index];
	        }
	    }
	}

	//
	// Write out the totals.
	//
        try {

	    //TEMPTEMP?

	    if (_resSeqCodes != null && _residueLabels != null) {
	        int prevCode = -1;
                for (int index = 0; index < _resSeqCodes.length; index++) {
	            if (_resSeqCodes[index] != prevCode) {
		        writer.write(_resSeqCodes[index] + "\t" +
			  _residueLabels[index] + "\n");
	            }
	        }
	    }



        } catch (IOException ex) {
            System.err.println("IOException writing amino acid counts: " +
              ex.toString());
            throw new S2DError("Can't write amino acid counts");
        }
    }

    //===================================================================
    // PRIVATE METHODS
    private void incrementCount(String residueLabel) {
        Integer tmpInt = null;
        if (_ht.containsKey(residueLabel)) {
            tmpInt = (Integer)_ht.get(residueLabel);
            int tmpVal = tmpInt.intValue();
            tmpInt = new Integer(tmpVal + 1);
        } else {
            tmpInt = new Integer(1);
        }
        _ht.put(residueLabel, tmpInt);
    }

    //-------------------------------------------------------------------
    // Determine whether to do debug output based on the current debug
    // level settings and the debug level of the output.
    private static boolean doDebugOutput(int level)
    {
    	if (DEBUG >= level || S2DMain._verbosity >= level) {
	    if (level > 0) System.out.print("DEBUG " + level + ": ");
	    return true;
	}

	return false;
    }
}

// ========================================================================
