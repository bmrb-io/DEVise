// ========================================================================
// DEVise Data Visualization Software
// (c) Copyright 2001-2009
// By the DEVise Development Group
// Madison, Wisconsin
// All Rights Reserved.
// ========================================================================

// Under no circumstances is this software to be copied, distributed,
// or altered in any way without prior permission from the DEVise
// Development Group.

// ------------------------------------------------------------------------

// This class implements the counting of the number of residues for each
// amino acid.

// ------------------------------------------------------------------------

// $Id$

// $Log$
// Revision 1.5  2009/01/29 16:43:31  wenger
// A lot of the nucleic acid code is working, but I need to add in
// the detection of what type of polymer we're processing -- so I'm
// just committing this with 'protein' hard-coded in for now, so
// the existing stuff all works.
//
// Revision 1.4  2007/11/15 17:15:35  wenger
// Cleaned out cvs history in source files.
//
// Revision 1.3  2007/08/20 20:26:09  wenger
// Added -verb command-line flag and property so we can turn on debug
// output without recompiling; added debug_level property corresponding
// to the existing -debug command-line flag.
//
// Revision 1.2  2006/02/01 20:23:12  wenger
// Merged V2_1b4_br_0 thru peptide_cgi_10_8_0_base to the
// trunk.
//
// Revision 1.1.2.4  2004/12/03 17:18:34  wenger
// Added BMRB accession number, PDB ID (if relevant), timestamp and
// Peptide-CGI version number to Peptide-CGI visualizations.
//
// Revision 1.1.2.3  2004/06/16 19:23:31  wenger
// Added headers to data files generated by Peptide-CGI.
//
// ...

// ========================================================================

package star2devise;

import java.io.*;
import java.util.*;

public class S2DResCount {
    //===================================================================
    // VARIABLES

    private static final int DEBUG = 0;

    private String _name;
    private String _dataDir;

    private int[] _resSeqCodes;
    private String[] _residueLabels;

    private String[] _acidList;
    private Hashtable _ht = null;

    //===================================================================
    // PUBLIC METHODS
    public S2DResCount(String name, String dataDir, int[] resSeqCodes,
      String[] residueLabels, int polymerType) throws S2DException
    {
        if (doDebugOutput(11)) {
	    System.out.println("S2DResCount.S2DResCount(" +
	      polymerType + ")");
	}

	// Initialize the list of "amino acids" according to the type
	// of polymer we have.
	switch (polymerType) {
	case S2DResidues.POLYMER_TYPE_PROTEIN:
            _acidList = new String[] { "ALA", "ARG", "ASP", "ASN",
	      "CYS", "GLU", "GLN", "GLY", "HIS", "ILE", "LEU", "LYS",
	      "MET", "PHE", "PRO", "SER", "THR", "TRP", "TYR", "VAL" };
	    break;

	case S2DResidues.POLYMER_TYPE_DNA:
            _acidList = new String[] { "DA", "DC", "DG", "DT" };
	    break;

	case S2DResidues.POLYMER_TYPE_RNA:
            _acidList = new String[] { "A", "C", "G", "U" };
	    break;

	default:
	    throw new S2DError("Illegal polymer type: " + polymerType);
	}

        _name = name;
	_dataDir = dataDir;

        _resSeqCodes = resSeqCodes;
	_residueLabels = residueLabels;

	//
        // Pre-load hash table with all amino acids, count of 0.
	//
	_ht = new Hashtable(_acidList.length);

	Integer tmpInt = new Integer(0);
	for (int index = 0; index < _acidList.length; index++) {
	    _ht.put (_acidList[index], tmpInt);
	}
    }

    public void write(int frameIndex) throws S2DException
    {
        String filename = _dataDir + File.separator + _name +
	  S2DNames.RES_COUNT_SUFFIX + frameIndex + S2DNames.DAT_SUFFIX;
        write(filename);
    }

    public void write(String filename) throws S2DException
    {
        FileWriter countWriter = null;
        try {
            countWriter = S2DFileWriter.create(filename);
	    countWriter.write("# Data: residue counts for " + _name + "\n");
	    countWriter.write("# Schema: bmrb-ResCount\n");
	    countWriter.write("# Attributes: ResLabel; ResCount\n");
            countWriter.write("# Peptide-CGI version: " +
	      S2DMain.PEP_CGI_VERSION + "\n");
            countWriter.write("# Generation date: " +
	      S2DMain.getTimestamp() + "\n");
	    countWriter.write("#\n");
        } catch(IOException ex) {
            System.err.println("IOException writing amino acid counts: " +
	      ex.toString());
            throw new S2DError("Can't write amino acid counts");
        }

        try {
            write(countWriter);
        } finally {
            try {
                countWriter.close();
            } catch (IOException ex) {
                System.err.println("IOException: " + ex.toString());
            }
        }
    }

    public void write(Writer writer) throws S2DException
    {

	//
	// Count up the number of each amino acid.
	//
	if (_resSeqCodes != null && _residueLabels != null) {
	    int prevCode = -1;
            for (int index = 0; index < _resSeqCodes.length; index++) {
	        if (_resSeqCodes[index] != prevCode) {
		    incrementCount(_residueLabels[index]);
	            prevCode = _resSeqCodes[index];
	        }
	    }
	}

	//
	// Write out the totals.
	//
        try {
	    if (_ht.size() != _acidList.length) {
	        System.err.println("Warning: probable bad entries in amino " +
		  "acid count list");
	    }
	    for (int index = 0; index < _acidList.length; index++) {
	        String residueLabel = _acidList[index];
	        Integer tmpInt = (Integer)_ht.get(residueLabel);
	        writer.write(residueLabel + " " + tmpInt + "\n");
	    }
        } catch (IOException ex) {
            System.err.println("IOException writing amino acid counts: " +
              ex.toString());
            throw new S2DError("Can't write amino acid counts");
        }
    }

    //===================================================================
    // PRIVATE METHODS
    private void incrementCount(String residueLabel) {
        Integer tmpInt = null;
        if (_ht.containsKey(residueLabel)) {
            tmpInt = (Integer)_ht.get(residueLabel);
            int tmpVal = tmpInt.intValue();
            tmpInt = new Integer(tmpVal + 1);
        } else {
            tmpInt = new Integer(1);
        }
        _ht.put(residueLabel, tmpInt);
    }

    //-------------------------------------------------------------------
    // Determine whether to do debug output based on the current debug
    // level settings and the debug level of the output.
    private static boolean doDebugOutput(int level)
    {
    	if (DEBUG >= level || S2DMain._verbosity >= level) {
	    if (level > 0) System.out.print("DEBUG " + level + ": ");
	    return true;
	}

	return false;
    }
}

// ========================================================================
