#!/s/perl/bin/perl -w
# For yola.bmrb.wisc.edu
#!/usr/freeware/bin/perl -w

#  ========================================================================
#  DEVise Data Visualization Software
#  (c) Copyright 1999-2000
#  By the DEVise Development Group
#  Madison, Wisconsin
#  All Rights Reserved.
#  ========================================================================
#
#  Under no circumstances is this software to be copied, distributed,
#  or altered in any way without prior permission from the DEVise
#  Development Group.

#  This script generates the data, session files, and html files for a
#  given BMRB entry (accession number).

#  Parameters:
#   number - the accession number of the file, ie 4101

#  can call using
#  http://pumori.cs.wisc.edu/cgi-bin/bmrb/make_view?number=4101
#    or
#  http://bmrb.wisc.edu/cgi-bin/peptide-cgi/make_view?number=4101

############################################################

# $Id$

############################################################

use CGI; # qw/:standard :html3/;
use strict;

my ($bmrb_file, $acc_num, $summary_page, $query);
$query = new CGI;

# BMRB accession number.
$acc_num = $query->param('number') || '4101';

# Corresponding BMRB file name.
$bmrb_file = 'bmr' . $acc_num . '.str';

# File name of html summary page to generate.
$summary_page = $acc_num . 'y.html';

my ($current_dir, $session_dir, $data_dir);
$current_dir = `pwd`;
chomp $current_dir;
$session_dir = $current_dir . '/session_dir';
$data_dir = $current_dir . '/data_dir';

# Go to the data directory.
chdir ($data_dir)
  or dienice('Could not change to data directory ($data_dir)');

# If the summary page for this accession number already exists, assume
# that we don't have to generate any files.
if (! -e $summary_page) {
  if (system ("./summarize $bmrb_file" ) ) {
    my ($tmpmsg);
    $tmpmsg = "";
    if (open(SUMM_OUT, "summarize.out")) {
      while (<SUMM_OUT>) {
        $tmpmsg .= $_ . '<p>';
      }
      close(SUMM_OUT);
    }
    dienice($tmpmsg);
  }

  # Make sure the summary page is world-readable.
  chmod 0644, "$summary_page";
  
  # Note: all html pages are now generated by summarize.

  # Generate new sessions
  my($index, $found_any);
  $index = 1;
  $found_any = 1;
  while ($found_any) {
    $found_any = 0;

    my($check_file);

    # CSI.
    $check_file = $acc_num . 'c' . $index . '.dat';
    if (-e $check_file) {
      $found_any = 1;
      chdir ($session_dir) 
        or dienice('Could not change to session_directory ($session_dir)');
      change_file2('csi', $index, 4081);
      chdir ($data_dir) 
        or dienice('Could not change to data_dir ($data_dir)');
    }
      
    # Delta shifts.
    $check_file = $acc_num . 'd' . $index . '.dat';
    if (-e $check_file) {
      $found_any = 1;
      chdir ($session_dir) 
        or dienice('Could not change to session_directory ($session_dir)');
      change_file2('deltashift', $index, 4081);
      chdir ($data_dir) 
        or dienice('Could not change to data_dir ($data_dir)');
    }

    # Percent assignments.
    $check_file = $acc_num . 'p' . $index . '.dat';
    if (-e $check_file) {
      $found_any = 1;
      chdir ($session_dir) 
        or dienice('Could not change to session_directory ($session_dir)');
      change_file2('percent', $index, 4081);
      chdir ($data_dir) 
        or dienice('Could not change to data_dir ($data_dir)');
    }

    $index++;
  }
  
  # Note: the following section assumes that there is only one (at most)
  # of each type of data.  I'm doing that temporarily until I clean things
  # up more.  RKW 2000-10-11.

  # Coupling constants.
  if (-e $acc_num.'g1.dat') {
    chdir ($session_dir)
      or dienice('Could not change to session_directory ($session_dir)');

    change_not_insert('coupling');
    #TEMP change_not_insert('hxrates');
    #TEMP change_not_insert('order');
    #TEMP change_not_insert('relax');

    chdir ($data_dir) 
      or dienice('Could not change to data_dir ($data_dir)');
  }

  # Make sure things are world-readable (there doesn't seem to be a way
  # to do this in Java).
  system("chmod 0644 $acc_num*.dat");
  system("chmod 0644 $acc_num*.html");

} # end if summary page doesn't exist

# return summary page
#TEMP -- can this be made relative?
print $query->redirect("http://pumori.cs.wisc.edu/bmrb/html/$summary_page");
# For yola
#print $query->redirect("http://bmrb.wisc.edu/devise/peptide-cgi/data_dir/$summary_page");
exit;

#------------------------------------------------------------------------
# Die in a way that generates output appropriate for a CGI script.

sub dienice {
  my ($errmsg);
  ($errmsg) = @_;
  print $query->header;
  print $query->start_html;
  print "<h2>CGI Error</h2>\n";
  print "$errmsg<p>\n";
  print $query->end_html;
  exit;
}

#------------------------------------------------------------------------
# Generates a DEVise session file for the given data type of the
# sample we're processing.  Note: this subroutine uses the 'new-style'
# base files, don't require as much modification as the 'old-style' ones.
# (This doesn't add the dteInsertCatalogEntry to the front, because these
# base files are better prepared.)

# Parameters:
#  0: data type (e.g., 'csi').

sub change_not_insert {
  my($data_type, $mode);
  $data_type = $_[0];

  open(INPUT, "$data_type.base") ||
    dienice "Can't read $data_type.base";

  my($session_file);
  #TEMP -- fixed '1' here is temporary
  $session_file = $acc_num . type2let($data_type) . '1.ds';
  open(OUTSESSION, ">$session_file") ||
    dienice "Can't output $data_type.ds";

  print OUTSESSION ("# DEVise session file generated by make_view\n\n");

  # The base file has 4096s in it -- change these to the correct
  # accession number.
  while (<INPUT>) {
    s/4096/$acc_num/g;
    print OUTSESSION $_;
  }
  
  close(INPUT);
  close(OUTSESSION);
  $mode = 0644; chmod $mode, "$session_file";
}

#------------------------------------------------------------------------
# Generates a DEVise session file for the given data type of the
# sample we're processing.  Note: this subroutine uses the 'new-style'
# base files, don't require as much modification as the 'old-style' ones.
# (This doesn't add the dteInsertCatalogEntry to the front, because these
# base files are better prepared.)

# This should replace change_not_insert once the non-chem-shift stuff
# is set up properly.

# Parameters:
#  0: data type (e.g., 'csi').
#  1: index
#  2: accession number in base file

sub change_file2 {
  my($data_type, $index, $base_num, $mode);
  $data_type = $_[0];
  $index = $_[1];
  $base_num = $_[2];

  my($type_let);
  $type_let = type2let($data_type);

  open(INPUT, "$data_type.base") ||
    dienice "Can't read $data_type.base";

  my($session_file);
  $session_file = $acc_num . $type_let . $index . '.ds';
  open(OUTSESSION, ">$session_file") ||
    dienice "Can't output $data_type.ds";

  print OUTSESSION ("# DEVise session file generated by make_view\n\n");

  my($old_str, $new_str);
  $old_str = $base_num . $type_let . '1';
  $new_str = $acc_num . $type_let . $index;

  # Change the data name strings (e.g., 4081c1) in the base file to the
  # appropriate string for the file we're generating.
  while (<INPUT>) {
    s/$old_str/$new_str/g;
    print OUTSESSION $_;
  }
  
  close(INPUT);
  close(OUTSESSION);
  $mode = 0644; chmod $mode, "$session_file";
}

#------------------------------------------------------------------------
# Converts a data type name (e.g., 'csi') to the corresponding file
# name letter (e.g., 'c').

# Parameters:
#  0: data type (e.g., 'csi').
# Returns:
#  letter corresponding to data type.

sub type2let {
  my($data_type, $letter);
  $data_type = $_[0];

  if ($data_type eq 'coupling') {
    $letter = 'g';
  } else {
    $letter = substr($data_type, 0, 1);
  }
  
  return $letter;
}

#------------------------------------------------------------------------
# Converts a data type name (e.g., 'csi') to the corresponding full
# name (e.g., 'Chemical Shift Index').

# Parameters:
#  0: data type (e.g., 'csi').
# Returns:
#  full name corresponding to data type.

sub type2name {
  my($data_type, $full_name);
  $data_type = $_[0];

  $full_name = 'unknown';

  if ($data_type eq 'csi') {
    $full_name = 'Chemical Shift Index';
  } elsif ($data_type eq 'deltashift') {
    $full_name = 'Chemical Shift Delta';
  } elsif ($data_type eq 'percent') {
    $full_name = 'Percent Assigned Atoms';
  }  elsif ($data_type eq 'coupling') {
    $full_name = 'Coupling Constants';
  }  elsif ($data_type eq 'hxrates') {
    $full_name = 'H-Exchange Rates';
  }  elsif ($data_type eq 'order') {
    $full_name = 'Order Parameters';
  }  elsif ($data_type eq 'relax') {
    $full_name = 'Relaxation Parameters';
  }

  return $full_name;
}
