#!/s/perl/bin/perl -w
# For yola.bmrb.wisc.edu
#!/usr/freeware/bin/perl -w

#  ========================================================================
#  DEVise Data Visualization Software
#  (c) Copyright 1999-2000
#  By the DEVise Development Group
#  Madison, Wisconsin
#  All Rights Reserved.
#  ========================================================================
#
#  Under no circumstances is this software to be copied, distributed,
#  or altered in any way without prior permission from the DEVise
#  Development Group.

#  This script generates the data, session files, and html files for a
#  given BMRB entry (accession number).

#  Parameters:
#   number - the accession number of the file, ie 4101

#  can call using
#  http://pumori.cs.wisc.edu/cgi-bin/bmrb/make_view?number=4101
#    or
#  http://bmrb.wisc.edu/cgi-bin/peptide-cgi/make_view?number=4101

############################################################

# $Id$

############################################################

use CGI; # qw/:standard :html3/;
use strict;

my ($bmrb_file, $acc_num, $summary_page, $query);
$query = new CGI;

# BMRB accession number.
$acc_num = $query->param('number') || '4101';

# Corresponding BMRB file name.
$bmrb_file = 'bmr' . $acc_num . '.str';

# File name of html summary page to generate.
$summary_page = $acc_num . 'y.html';

my ($current_dir, $session_dir, $data_dir);
$current_dir = `pwd`;
chomp $current_dir;
$session_dir = $current_dir . '/session_dir';
$data_dir = $current_dir . '/data_dir';

# Go to the data directory.
chdir ($data_dir)
  or dienice('Could not change to data directory ($data_dir)');

# If the summary page for this accession number already exists, assume
# that we don't have to generate any files.
if (! -e $summary_page) {
  if (system ("./summarize $bmrb_file" ) ) {
    my ($tmpmsg);
    $tmpmsg = "";
    if (open(SUMM_OUT, "summarize.out")) {
      while (<SUMM_OUT>) {
        $tmpmsg .= $_ . '<p>';
      }
      close(SUMM_OUT);
    }
    dienice($tmpmsg);
  }

  # Make sure the summary page is world-readable.
  chmod 0644, "$summary_page";
  
  # Generate html pages...

  # First, chemical shift info.
  if (-e $acc_num.'c.dat') {
    gen_html('csi');
    gen_html('deltashift');
    gen_html('percent');
  }

  # Then, additional stuff like in bmr4096.str.
  #TEMP -- this is not general
  if (-e $acc_num.'g.dat') {
    gen_html('coupling');
    gen_html('hxrates');
    gen_html('order');
    gen_html('relax');
  }
      
  # Generate new sessions
  if (-e $acc_num.'c.dat') {
    chdir ($session_dir) 
      or dienice('Could not change to session_directory ($session_dir)');

    change_file('Csi','csi');
    change_file('DeltaShift','deltashift');
    change_file('Percent','percent');
  }
  
  if (-e $acc_num.'g.dat') {
    chdir ($session_dir)
      or dienice('Could not change to session_directory ($session_dir)');
    change_not_insert('coupling');
    change_not_insert('hxrates');
    change_not_insert('order');
    change_not_insert('relax');
  }
} # end if summary page doesn't exist

# return summary page
#TEMP -- can this be made relative?
print $query->redirect("http://pumori.cs.wisc.edu/bmrb/html/$summary_page");
# For yola
#print $query->redirect("http://bmrb.wisc.edu/devise/peptide-cgi/data_dir/$summary_page");
exit;

#------------------------------------------------------------------------
# Die in a way that generates output appropriate for a CGI script.

sub dienice {
  my ($errmsg);
  ($errmsg) = @_;
  print $query->header;
  print $query->start_html;
  print "<h2>CGI Error</h2>\n";
  print "$errmsg<p>\n";
  print $query->end_html;
  exit;
}

#------------------------------------------------------------------------
# Generates a DEVise session file for the given data type of the
# sample we're processing.  Note: this subroutine uses the 'new-style'
# base files, don't require as much modification as the 'old-style' ones.
# (This doesn't add the dteInsertCatalogEntry to the front, because these
# base files are better prepared.)

# Parameters:
#  0: data type (e.g., 'csi').

sub change_not_insert {
  my($data_type, $mode);
  $data_type = $_[0];

  open(INPUT, "$data_type.base") ||
    dienice "Can't read $data_type.base";

  my($session_file);
  $session_file = $acc_num . type2let($data_type) . '.ds';
  open(OUTSESSION, ">$session_file") ||
    dienice "Can't output $data_type.ds";

  print OUTSESSION ("# DEVise session file generated by make_view\n\n");

  # The base file has 4096s in it -- change these to the correct
  # accession number.
  while (<INPUT>) {
    s/4096/$acc_num/g;
    print OUTSESSION $_;
  }
  
  close(INPUT);
  close(OUTSESSION);
  $mode = 0644; chmod $mode, "$session_file";
}

#------------------------------------------------------------------------
# Generates a DEVise session file for the given data type of the
# sample we're processing.  Note: this subroutine uses the 'old-style'
# base files, which require more modification than the 'new-style' ones.

# Parameters:
#  0: the DEVise schema file, typically capitalized
#  1: data type (e.g., 'csi').
sub change_file {
  my($schema_file, $schema_path, $data_name, $data_file, $data_path,
     $full_data_stream, $mode, $data_type, $schema_type);
  $schema_file = $_[0];
  $data_type = $_[1];

  $schema_path =
    '/p/devise/demo/schema/schema/physical/bmrb:'.$schema_file;

  if ($schema_file eq 'Percent') {
    $schema_type = 'ChemShiftPercentage';
  } else {
    $schema_type = $schema_file;
  }

  $data_name = $acc_num . type2let($data_type);
  $data_file = $data_name . '.dat';
  $data_path = '/p/devise/demo/dat/bmrb/dynamic_data';
  $full_data_stream = '.' . $data_name;
  
  open(INPUT, "$data_type.base") ||
    dienice "Can't read $data_type.base";

  my($session_file);
  $session_file = $acc_num . type2let($data_type) . '.ds';
  open(OUTSESSION, ">$session_file") ||
    dienice "Can't output $data_type.ds";
  
  print OUTSESSION ("# DEVise session file generated by make_view\n\n");
  print OUTSESSION ("# Per-session data source definitions\n");
  print OUTSESSION ("DEVise dteInsertCatalogEntry . {\"$data_name\" UNIXFILE $data_file $schema_type $schema_path \"\" 100 50 \"$data_path\" \"\"}\n\n");
  
  while (<INPUT>) {
    s/.$data_type/$full_data_stream/g;
    print OUTSESSION $_;
  }
  
  close(INPUT);
  close(OUTSESSION);
  $mode = 0644; chmod $mode, "$session_file";
}

#------------------------------------------------------------------------
# This creates the html page to run the JavaScreen with the appropriate
# session.

# Parameters:
#  0: data type (e.g., 'csi').

sub gen_html {
  my($letter, $outfile, $data_type, $data_name, $help_page, $session_file);
  $data_type = $_[0];

  # Letter corresponding to this data type.
  $letter = type2let($data_type);
  
  $data_name = $acc_num . $letter;
  $outfile = $data_name . '.html';
  $help_page = 'help_' . $letter . '.html';

  $session_file = 'bmrb/dynamic_sessions/' . $data_name . '.ds';

  open(OUTPUT, ">$outfile") ||
    die("can't output $outfile");
  
  print OUTPUT <<EndHeader;
  <HTML><HEAD><TITLE>BMRB Data Viewer for $bmrb_file</TITLE>
    <script type="text/javascript" language="JavaScript"
      src="helpmaster.js">
    </script>
    <script language="JavaScript">
      <!--
      function openhelp() {
      newwin= window.open("help.html",
      "per",
      "toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=300,height=300");
      // -->
      }
    </script>
  </HEAD><BODY BGCOLOR="white">

    <script language="JavaScript">
      popupvar1 = 'Return to summary page';
      popupvar2 = 'Keyboard shortcuts';
      popupvar3 = 'Explanations for plots';
      popupvar4 = 'DEVise home page';
    </script>
    <div id="popup" style="position:absolute; z-index:1;
      visibility: hidden"></div>

    <center>
    <table border=0 width=500>
      <tr align=center>
	  <td><a href="$summary_page" onMouseOut = "popupoff()" 
	      onMouseOver="popupon(popupvar1, document.all 
               || document.layers?event:null)">
	      <img onMouseOver="Return"
		border=0 src="arrow.gif"></a></td>
		  
	  <td><a href="JavaScript:openhelp()"
	      onMouseOut = "popupoff()"
	      onMouseOver="popupon(popupvar2, document.all 
	      || document.layers?event:null)">
	      <img border=0 src="keyboard.gif"></a></td>
	  
	  <td><a href="$help_page" onMouseOut = "popupoff()" 
	      onMouseOver="popupon(popupvar3, document.all 
	      || document.layers?event:null)">
	      <img border=0 src="qmark.gif"></a></td>
		
	  <td><a href="http://www.cs.wisc.edu/~devise"
	      onMouseOut = "popupoff()" 
	      onMouseOver="popupon(popupvar4, document.all 
	      || document.layers?event:null)">
	      <img border=0 src="devise_logo.jpg"></a></td>
	</tr>
      </table>
    </center>
    <hr>
EndHeader
;

  my($full_name);
  $full_name = type2name($data_type);
  # print OUTPUT $query->h2($full_name);
  
  # JavaScreen applet here.
  print OUTPUT <<EndApp;
  <applet code=DEViseJSBLoader.class archive=../../jsb1.jar,../../jsb2.jar width=800 height=600>
    <param name="debug" value="0">
    <param name="session" value="$session_file">
    <param name="cmdport" value="6666">
    <param name="imgport" value="6644">
    <param name="rubberbandlimit" value="4x4">
    <!-- old bgcolor     <param name="bgcolor" value="64+96+0"> -->
    <param name="bgcolor" value="0+0+0">
    <param name="screensize" value="800x600">
  </applet>
    
  <br><br>
  <center><h6>Comments?  Contact <a
    href="mailto:bmrbhelp\@bmrb.wisc.edu">bmrbhelp\@bmrb.wisc.edu</a>
   </h6></center>
EndApp
;
  print OUTPUT $query->end_html;
  
  close(OUTPUT);

  chmod 0644, "$outfile";
  chmod 0644, "$data_name.dat";
}

#------------------------------------------------------------------------
# Converts a data type name (e.g., 'csi') to the corresponding file
# name letter (e.g., 'c').

# Parameters:
#  0: data type (e.g., 'csi').
# Returns:
#  letter corresponding to data type.

sub type2let {
  my($data_type, $letter);
  $data_type = $_[0];

  if ($data_type eq 'coupling') {
    $letter = 'g';
  } else {
    $letter = substr($data_type, 0, 1);
  }
  
  return $letter;
}

#------------------------------------------------------------------------
# Converts a data type name (e.g., 'csi') to the corresponding full
# name (e.g., 'Chemical Shift Index').

# Parameters:
#  0: data type (e.g., 'csi').
# Returns:
#  full name corresponding to data type.

sub type2name {
  my($data_type, $full_name);
  $data_type = $_[0];

  $full_name = 'unknown';

  if ($data_type eq 'csi') {
    $full_name = 'Chemical Shift Index';
  } elsif ($data_type eq 'deltashift') {
    $full_name = 'Chemical Shift Delta';
  } elsif ($data_type eq 'percent') {
    $full_name = 'Percent Assigned Atoms';
  }  elsif ($data_type eq 'coupling') {
    $full_name = 'Coupling Constants';
  }  elsif ($data_type eq 'hxrates') {
    $full_name = 'H-Exchange Rates';
  }  elsif ($data_type eq 'order') {
    $full_name = 'Order Parameters';
  }  elsif ($data_type eq 'relax') {
    $full_name = 'Relaxation Parameters';
  }

  return $full_name;
}
