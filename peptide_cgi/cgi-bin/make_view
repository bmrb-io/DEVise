#! bin/perl -w

#  ========================================================================
#  DEVise Data Visualization Software
#  (c) Copyright 1999-2001
#  By the DEVise Development Group
#  Madison, Wisconsin
#  All Rights Reserved.
#  ========================================================================
#
#  Under no circumstances is this software to be copied, distributed,
#  or altered in any way without prior permission from the DEVise
#  Development Group.

#  This script generates the data, session files, and html files for a
#  given BMRB entry (accession number).

#  Parameters:
#   number - the accession number of the file, ie 4101

#  can call using
#  http://pumori.cs.wisc.edu/cgi-bin/bmrb/make_view?number=4101
#    or
#  http://bmrb.wisc.edu/cgi-bin/peptide-cgi/make_view?number=4101

############################################################

# $Id$

############################################################

use CGI; # qw/:standard :html3/;
use strict;

my ($acc_num, $summary_page, $query);
$query = new CGI;

# BMRB accession number.
$acc_num = $query->param('number') || '4101';

# File name of html summary page to generate.
my $summary_page_dir = getProperty("bmrb_mirror.summary_page_dir");
$summary_page = $summary_page_dir . "/" . $acc_num . 'y.html';

my ($current_dir, $data_dir);
$current_dir = `pwd`;
chomp $current_dir;
$data_dir = $current_dir . '/data_dir';

if (system ("./s2d $acc_num" ) ) {
  my ($tmpmsg);
  $tmpmsg = "Unable to process data for accession number " . $acc_num . ".";
  dienice($tmpmsg);
}

# return summary page
print $query->redirect($summary_page);
exit;

#------------------------------------------------------------------------
# Die in a way that generates output appropriate for a CGI script.

sub dienice {
  my ($errmsg);
  ($errmsg) = $_[0];
  print $query->header;
  print $query->start_html;
  print "<h2>CGI Error</h2>\n";
  print "$errmsg<p>\n";
  print $query->end_html;
  exit;
}

#------------------------------------------------------------------------
# Get the value of a given s2d property.

# Parameters:
#   property name

# Returns:
#   property value

sub getProperty {
  my $prop_name = shift(@_);

  my $value = "";

  open(PROP_IN, "s2d.props") or dienice("Couldn't open property file: $!\n");

  my $line;
  while ($line = <PROP_IN>) {
    chomp $line;
    if (substr($line, 0, 1) ne "#") {
      if ($line =~ /^$prop_name=(.*)/) {
	$value = $1;
      }
    }
  }

  close(PROP_IN);

  return $value;
}
