#! /usr/bin/perl

# Dummy ChemShift server to allow better testing.

# This is based on the "real" csr_server script.

use strict;

my $usage = "Usage: dummy_csr_server [-exit] [-exit_on_success] [-time_limit <sec>]\n";

my $exit = 0;
my $exitOnSuccess = 0;
my $timeLimit = 0;

my $arg;
while ($arg = shift(@ARGV)) {
  if ($arg eq "-usage") {
    print "$usage";
    exit(0);
  } elsif ($arg eq "-exit") {
    $exit = 1;
  } elsif ($arg eq "-exit_on_success") {
    $exitOnSuccess = 1;
  } elsif ($arg eq "-time_limit") {
    my $waitTime;
    if ($waitTime = shift(@ARGV)) {
      $timeLimit = time() + $waitTime;
    } else {
      print "-time_limit argument requires value\n";
      exit(1);
    }
  } else {
    print "Illegal argument: $arg\n";
    print "$usage";
    exit(1);
  }
}

while (1) {
  if ($timeLimit ne 0 and time() gt $timeLimit) {
    print "tests/dummy_csr_server hit time limit; exiting\n";
    exit(0);
  }

  sleep 1;

  my $runFile = "data_dir/csr.run";
  if (-e $runFile) {
    ProcessRunFile($runFile);
  }

  $runFile = "data_dir/vis_server/csr.run";
  if (-e $runFile) {
    ProcessRunFile($runFile);
  }

  $runFile = "data_dir/uvd/csr.run";
  if (-e $runFile) {
    ProcessRunFile($runFile);
  }
}

#-----------------------------------------------------------
# Do the processing once we've found a run file.
# Arguments: <run file name>
# Returns: none
sub ProcessRunFile() {
  my $thisRunFile = shift(@_);

  my $line = `cat $thisRunFile`;
  chomp $line;
  my @args = split / /, $line;
  #TEMPTEMP -- don't strip this anymore?
  if (@args[0] eq "-l") {
    shift @args;
  }
  unlink $thisRunFile;

  @args = ("tests/dummy_csr", @args);

  print "\nRunning ChemShift simulator (@args)\n";
  if (system(@args) != 0) {
    print "dummy_csr failed\n";
  }

  if ($exit) { exit(0) };
}
