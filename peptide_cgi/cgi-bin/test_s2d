#! bin/perl -w

#  ========================================================================
#  DEVise Data Visualization Software
#  (c) Copyright 2001-2004
#  By the DEVise Development Group
#  Madison, Wisconsin
#  All Rights Reserved.
#  ========================================================================
#
#  Under no circumstances is this software to be copied, distributed,
#  or altered in any way without prior permission from the DEVise
#  Development Group.

#  This script tests the s2d program on all available star files
#  from BMRB.

############################################################

# $Id$

############################################################

use strict;

my($show_warnings) = 0;
my($save_warning_output) = 0;

mkdir "session_dir/bad_sessions";
mkdir "data_dir/bad_data";
mkdir "html_dir/bad_html";

my($err_file);
$err_file = "error_summary";
unlink $err_file;
open(ERRFILE, ">$err_file") or die "Can't open error summary file: $!\n";

#TEMP -- arg for file name??
my($input_file);
$input_file = "star_file_list.txt";
open(INPUT, $input_file) or die "Can't open $input_file: $!\n";

my($line);
while ($line = <INPUT>) {
  if ($line =~ m/bmrbId=(.{1,4})>/) {
    my($star_file);
    $star_file = $1;
    test_star($star_file);
  }
}

close(INPUT);
close(ERRFILE);

#-----------------------------------------------------------
# Test a specific star file.

# Parameters:
#   0: star file name

sub test_star {
  my($star_name, $star_num);
  $star_name = $_[0];

  $star_num = $star_name;
  $star_num =~ s/^bmr//;
  $star_num =~ s/.str$//;

  my($dat_names, $html_names, $sess_names);
  $dat_names = $star_num . '*.dat';
  $html_names = $star_num . '*.html';
  $sess_names = $star_num . '*.ds';

  my $cmd = "./s2d -nomail -bmrbid $star_num -do_pdb 1";
  my $result = `$cmd`;
  chomp $result;

  if ($result ne "OK") {
    print STDERR "ERROR processing star file $star_name\n";
    print ERRFILE "-----------------\n";
    print ERRFILE "ERROR processing star file $star_name\n\n";
    copy_resfile();

    system("mv tmp/s2d.out tmp/s2d.out.$star_num");
    system("mv data_dir/$dat_names data_dir/bad_data");
    system("mv data_dir/$html_names data_dir/bad_data");
    system("mv session_dir/$sess_names session_dir/bad_sessions");
  } elsif ($show_warnings && -s "tmp/s2d.out") {
    print STDERR "Possible error or warning processing star file $star_name\n";
    print ERRFILE "-----------------\n";
    print ERRFILE "Possible error or warning processing star file $star_name\n\n";
    copy_resfile();

    system("mv tmp/s2d.out tmp/s2d.out.$star_num");
    if ($save_warning_output) {
      system("mv data_dir/$dat_names data_dir/bad_data");
      system("mv html_dir/$html_names html_dir/bad_html");
      system("mv session_dir/$sess_names session_dir/bad_sessions");
    } else {
      system("rm data_dir/$dat_names");
      system("rm html_dir/$html_names");
      system("rm session_dir/$sess_names");
    }
  } else {
    print "Successfully processed star file $star_name\n";
    system("rm data_dir/$dat_names");
    system("rm html_dir/$html_names");
    system("rm session_dir/$sess_names");
  }
}

#-----------------------------------------------------------
# Copy s2d.out to the error summary file.

# Parameters:
#   none

sub copy_resfile {
  my($resfile);
  $resfile = "tmp/s2d.out";
  open(RESULT, $resfile) or die "Can't open $resfile: $!\n";


  my($line);
  while ($line = <RESULT>) {
    print ERRFILE "    $line";
  }
  print ERRFILE "\n";

  close(RESULT);
}

############################################################
