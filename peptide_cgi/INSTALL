		Peptide-CGI Installation Instructions
		$Id$

* NOTES

Before installing the peptide-cgi software, you should install DEVise
and the DEVise JavaScreen.  You must also have access to the BMRB web
site or a mirror of that site.


* BASIC INSTALLATION

- Pick the Makefile.config.* file that most closely matches your situation,
and copy it to Makefile.config.  (If you are a BMRB mirror site, you should
most likely pick Makefile.config.bmrb.)

- Edit Makefile.config as necessary, to account for any differences in
your setup, compared to what is specified in the config file.

- Run the command 'make setup'.

- At this point, you may want to do some testing before you do the actual
installation (see TESTING below).

- Once you are ready to go ahead, run the command 'make install'.


* TESTING

Pre-installation testing:

You can test the peptide-cgi code before doing an actual installation by
doing the following:

- In the top-level directory, run the command 'make testsetup'.

- Then go into the cgi-bin directory and run make_view.  Specify
number=<accession number> (for example, number=4081), followed by
<enter> and <control-d>.  This should (eventually) produce output that
looks something like this:

    Status: 302 Moved
    Location: http://pumori.cs.wisc.edu/bmrb/html/4081y.html

If not, see DEBUGGING below.


Post-installation testing:

The simplest way to do post-installation testing is to go to the
bmrb_select.html file in your web browser (the full URL obviously
depends exactly on how you set up your installation, but it should
be something like this:

    http://www.bmrb.wisc.edu/devise/peptide-cgi/bmrb_select.html

Enter an accession number (4081, for example), in the form, and click
the "View data" button.  You should eventually get a web page listing
the visualizations available for the given entry number, with links
to all of those visualizations.  When you click on one of the links,
you should go to a page that automatically starts up the DEVise JavaScreen
and loads the given visualization.

You should also be able to access the same visualizations by using the
NMR Data Browser.  Once you've gotten the data for a particular entry,
click the "See interactive data graphs" button to get to the page that
lists the visualizations for the entry.


* DEBUGGING

There are several areas where problems can occur:

1. In the peptide-cgi code itself.
2. Loading the DEVise JavaScreen applet.
3. Establishing the connection between the applet and the JSPoP.
4. Opening the appropriate session.

In case 1, the best thing to do is to take a look at the s2d.out file,
which is in the cgi-bin directory.  If there are any errors in the
actually running of the peptide-cgi code, they should be in here, unless
it's a problem with the CGI setup itself, causing the peptide-cgi code
to not be run at all.  Note that s2d.out gets overwritten with each request
for data, so you may want to reproduce the error and then copy it.

In case 2 or case 3, this isn't really a peptide-cgi problem, so please
refer to the DEVise JavaScreen documentation.

In case 4, the best thing to do is to try opening the session directly in
DEVise, because you will get better error messages that way.  You can
also look in the JavaScreen/DEVise log files, which are in the directory
or directories where the JSPoP, JSS, and DEVise servers are installed.


FILES

The following files are generated by each invocation of the peptide-cgi
code:
- Summary html page (<number>y.html)
- Visualization-specific html page (<number>*.html)
- Visualization-specific session file (<number>*.ds)
- Visualization-specific data file (<number>*.dat)
- s2d.out (log file, empty if no errors)


CACHING

The files generated by an invocation of the peptide-cgi code are cached
and re-used when a previously-processed entry is requested again.  There
are two cases where the cached files are normally deleted and re-generated:
- The NMR-STAR file for the entry has changed more recently than the
summary html file for the entry.
- The version of the peptide-cgi code has been incremented since the summary
html file was generated.

You can force a deletion and re-generation of all files by deleting the
summary html file (<accession number>y.html).
