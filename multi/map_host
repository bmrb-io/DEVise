/*
  ========================================================================
  DEVise Data Visualization Software
  (c) Copyright 1992-1997
  By the DEVise Development Group
  Madison, Wisconsin
  All Rights Reserved.
  ========================================================================

  Under no circumstances is this software to be copied, distributed,
  or altered in any way without prior permission from the DEVise
  Development Group.
*/

/*
  $Id$

  $Log$
 */

mapping HostMapping HostRec {
  shape { RectShape }
  static {
    double attrs[2];
    attrs[0] = 1; attrs[1] = 0.5;
    TDataMap::SetDefaultShape(HostMapping_RectShapeID,2,attrs);
    TDataMap::SetDefaultColor(ColorMgr::AllocColor("red"));

    /*
       offsets of GData attributes must correspond to the dynamic
       GData attributes listed in the next section
    */
    GDataAttrOffset *_offsets = new GDataAttrOffset;
    _offsets->xOffset = 0;
    _offsets->yOffset = sizeof(double);
    _offsets->zOffset = -1;
    _offsets->colorOffset = 2 * sizeof(double);
    _offsets->sizeOffset = _offsets->shapeOffset = -1;
    _offsets->patternOffset = _offsets->orientationOffset = -1;
    _offsets->shapeAttrOffset[0] = 2 * sizeof(double) + sizeof(unsigned long);
    _offsets->shapeAttrOffset[1] = 3 * sizeof(double) + sizeof(unsigned long);
    for(int i = 2; i < MAX_GDATA_ATTRS; i++)
      _offsets->shapeAttrOffset[i] = -1;
    TDataMap::SetGDataOffset(_offsets);
  }
  dynamic x,y,color, shapeAttr[1], shapeAttr[0] {
    static int last_time = 10000;
    static int last_working = -1;
    /*
       MapInfo *mapInfo = (MapInfo *)userData;
    */
#if 1
    if (data->time > last_time) {
      symbol->x = (((float)(data->time + last_time)) / 2.0);
      symbol->shapeAttr_0 = data->time - last_time;
    } else {
      symbol->x = (float)(data->time);
      symbol->shapeAttr_0 = 2;
    }
    last_time = data->time;
    if (last_working > 0) {
      symbol->y = (((float)(data->hosts + last_working)) / 2.0 );
      symbol->shapeAttr_1 = data->hosts - last_working;
    } else {
      symbol->y = (((float) (data->hosts + data->working)) / 2.0 );
      symbol->shapeAttr_1 = data->hosts - data->working;
    }
    last_working = data->working;
#else
    
    symbol->shapeAttr_0 = 1;
    symbol->shapeAttr_1 = data->hosts - data->working;
    symbol->x = data->time;
    symbol->y = (((float) (data->hosts + data->working)) / 2.0 );
#endif
    
    symbol->color = some_idleColor;
    if (symbol->shapeAttr_1 < 1) {
      symbol->shapeAttr_1 = 0.5;
      symbol->y -= 0.25;
      symbol->color = all_busyColor;
    }
    
    /*
       printf("sym %d (%f,%f,%f,%f) color %d\n", recId,
       symbol->x, symbol->y, symbol->shapeAttr_0, symbol->shapeAttr_1,
       symbol->color);
    */
  }
}
