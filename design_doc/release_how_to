		How to do a DEVise/JavaScreen Release
		$Id$

This is a quick-and-dirty documentation of what needs to be done for
a DEVise/JavaScreen release (by a release, I mean making a new version
of DEVise accessible to users running from /p/devise in the CS AFS tree,
and putting a new version of the JavaScreen on the "standard" installation
on teal).

This document should probably be improved eventually -- right now it's
mainly just a reminder to myself so I don't miss any steps.  RKW, 2002-09-24.

- Make sure the version history is complete.

- Get rid of the x<whatever> on the DEVise version -- e.g., change "1.9.2x3" to "1.9.2".

- Update sources.
    - Check out/update sources (make sure they're on the right branch,
      if that's necessary).

- Build/test DEVise.
    - Build DEVise on all release architectures (see scripts/release_std).

    - Make strip after building.

    - Test run the monolithic and client-server DEVise (dev, devcs) on all
      relevant architectures.

    - Make the 'release' and 'dyn_lib' targets.

- Build/test JavaScreen:
    - Build the JavaScreen (including jar files).

    - Make sure JavaScreen help version matches the actual software.

    - Run "autotest all" in the JS directory.

    - Test the new DEVise/JSPoP with the standard Peptide-CGI release
      tests:
        - Run the new DEVise/JSPop on teal as the 'test' ID.
	- Go through the Peptide-CGI pre-release tests (following
	  appropriate links in a browser so the right sessions get
	  created), but instead of running the (released) JavaScreen
	  client in the browser, run a JavaScreen client locally,
	  connecting to the test JSPoP, and open the sessions in
	  that client.
        (Maybe a better way to do this would be to set things up so
	that the bmrb_test setup on teal uses a test JavaScreen.)

- Test release:
    - Run scripts/release_tst and scripts/release.js_tst and make sure
      the software in the test release area works correctly.

- Actual release:
    - Send email warning of the release.

    - After a suitable time, actually run the DEVise and JavaScreen release
      scripts (scripts/release_std and scripts/release.js_std).
    
    - Make sure the released versions actually run on the relevant
      architectures.

    - Send an email with the details of what changed since the last release.

- JavaScreen install on teal:
    - Go to /p/devise/release/JavaScreen *on teal*, as the devise user.

    - Make sure Makefile.config points to the appropriate configuration file
      for the setup you want to install.

    - Run the jspop, etc., as test or tst2 and make sure things work.

    - Test run "make -f Makefile.setup install" in
      /p/devise/release/JavaScreen (ANSWER NO WHEN ASKED IF YOU REALLY WANT
      TO DO IT).

    - Send email warning of the release.

    - After a suitable time, do the following:
        - As devise, edit the crontab file so that the check script doesn't
	  run.

	- Also as devise, kill the appropriate JavaScreen processes
	  (kill_jsall).

	- Possibly move the installed JavaScreen directory
	  (/scratch/devise/js.regular or whatever) to a backup
	  directory (so you can easily back out the installation if
	  necessary).

        - In /p/devise/release/JavaScreen, run "make -f Makefile.setup install"
	  for real.

	- If doing a Wavelet-IDR install, edit the html files in
	  /var/home/www/public/waveletidr on pumori, and change the cmdport
	  to 6866.

	- If doing a soil science install, edit the html files in
	  /var/home/www/public/soil_sci on pumori, and change the cmdport
	  to 5966.

        - As devise, edit the crontab file so that the check scripts are
	  run again.

        - Wait for the JSPoP to get restarted, and run the JS in a web
	  browser to make sure it works.

        - Send an email with the details of what changed since the last
	  release.

- Tag/archive sources:
    - Cvs tag the source tree (the tag should be of the form devise_<x>_<y>_<z> --
      e.g., devise_1_9_2, matching the DEVise version.

    - Make a tar file of the sources and archive it (run scripts/tarsrcs
      and copy the file to /p/devise/wenger/src_archive).

- Prepare for future releases:
    - If we released from a stable series branch, merge the latest round
      of changes to the trunk.

    - On the branch we released from:
        - Increment DEVise version (with x1 on the end).
        - Add a corresponding section to the DEVise version history.
        - Increment JavaScreen version (with x1 on the end).
        - Add a corresponding section to the JavaScreen version history.
        - Commit sources.
