				Signing Jar Files
				2013-12-12

(Hopefully this is fairly complete -- I guess I should have kept track of
everything I did as I went along.)

## Introduction

Note:  This document is oriented towards signing a jar file and getting
the jar file to work in a browser when embedded in an html page -- there's
more to that than just signing the jar file.

There are a couple of important points that are not very clearly
documented:

1) To successfully sign the jar file, you need a certificate that
specifically has code signing enabled.

2) To get the jar file to work within a browser, you need to sign the jar
file with a credential file that not only has the public and private keys
for your code-signing certificate, but also the public keys for a chain
of certificates up to, and including, a root certificate that is trusted
by the user's browser.

I'll explain these in more detail below.


## Process overview

To get the whole business to work, there are two main steps, with a bunch
of sub-steps each.

1) Get things to work with a self-signed cert:
     1) Set up your jar file correctly.
     2) Create a Java keystore.
     3) Actually sign the jar file.
     4) Properly set up the html pages that use the jar file.
2) Get things to work with a "real" cert:
     1) Using an existing (non-Java specific) cert:
         1) Get a cert.
         2) Properly configure your credential file.
         3) Actually sign the jar file.
     OR
     2) Using a new cert specifically for signing jar files:
         1) Create a Java keystore.
         2) Get a corresponding cert.
         3) Import the cert into your keystore.
         4) Actually sign the jar file.

You could skip right to step #2, but I recommend getting things working
with a self-signed cert -- that allows you to get your manifest file,
html files, etc., properly set up without worrying about the complications
of a "real" cert.


## Self-signed cert specifics

Note that this is really just a testing step -- if you sign your jar
file with a self-signed cert, the JVM in the browser will report that
the jar file is signed, but with an unknown author, and that in the
future you won't be allowed to run such files.

# Setting up the jar file

To get a browser to run your signed jar file, you have to have a manifest
included in the jar file.  The manifest file needs to look something like
this:

   Permissions: sandbox
   Codebase: *.cs.wisc.edu *.bmrb.wisc.edu
   Application-name: DEVise JavaScreen

As far as I can figure out, the permissions need to be "sandbox".  The other
option is "all-permissions", but if you set it to that the JVM in the
browser will refuse to run the jar file.

Codebase is the tricky part -- you need to specify the domains from
which your jar file will be served.  Wildcards are allowed, but I
don't know how far you can go with them.  For example, I haven't tried
just "*" for Codebase, but people suggest that it won't work.  *.cs.wisc.edu
works, but I don't know whether *.wisc.edu works.

I think Application-name is informational only.

The command to actually create the jar file looks like this:

   jar cfm <jar file> <manifest file> <other stuff to go into jar>


# Creating the keystore

Note:  The keystore is basically a file containing a number of 
private/public key pairs, where each key pair is referred to by an
*alias*.

To create the keystore, you can use a command like this:

   keytool -genkey -keyalg RSA -alias <alias> -keystore <file> \
     -validity 360 -keysize 2048

<file> is just the name of a file to hold your Java keystore
(conventionally with the extension .jks).

<alias> is an alias for a particular entry within the keystore (you can
have multiple entries within one keystore file, but I haven't tried that
yet).  Basically, most commands relating to the keystore need to
reference both the keystore file and the alias.

When you run the command above, it will ask you a bunch of questions such
as your name and your organization.  (You can also specify that stuff on
the command line.)  You'll also have to specify a password for the
keystore and a password for the particular entry you're creating.  It
seems to be easiest if both of those passwords are the same.  When you
want to sign a jar file using a given keystore entry, you'll have to give 
that password or passwords.

The above command will generate a keystore with a self-signed cert.


# Actually signing the jar file

Once you have your keystore created, you can sign a jar file as follows:

   jarsigner -keystore <file> devise_js.jar <alias>

That command will prompt you for the keystore and alias passwords (or just
one if they're the same).


# Setting up your html

In the html code that uses the jar file, you have to have this in the
applet or object tag:

   <param name="permissions" value="sandbox">

With an unsigned jar file this doesn't seem to be required, but with
a signed file it's required for the JVM to run the applet inside a
browser.


## "Real" cert specifics

I broke this out into a separate section because there are a lot of
complications involved, and there are two ways to go about it.
Probably the "right" way (the only way that's really documented by
Oracle) is to get a code signing cert that's specifically tied to
a Java keystore.  However, I requested a cert before I fully understood
what they want you to do there.  And there are probably lots of
people who already have code signing certs, who want to use those to
sign jar files instead of getting a new cert just for that.

Anyhow, I'm going to document this way first because it's the way
I ended up doing it.

## Using a non-Java specific cert

# Getting a cert

I filled out a web form somewhere at the UW (I think I can find the
link if necessary).  Anyhow, I ended up talking to some people at
DoIT, and the UW web forms are not set up to get you a code signing
cert.  So it seems like if you don't have a cert already, you'll have
to talk to the people at DoIT "out of band" (Linda Pruss <lmpruss@wisc.edu>
is the person I ended up mostly dealing with).

# Configuring your credential file

The cert that I got via DoIT is saved in a .p12 file -- this has a
private/public key pair, and you can sign a jar file with it (without
messing around with a Java keystore).  But the problem is that the
browser still won't recognize the signing as being valid, because
the .p12 credential file only has the public key for my cert, not for
the full chain of certs up to and including a trusted root cert.

But, you can create a new credential file that has the full chain
of public keys.  Here are a couple of pages with info:
http://stackoverflow.com/questions/18787491/adding-certificate-chain-to-p12pfx-certificate
http://windows.microsoft.com/en-us/windows/import-export-certificates-private-keys#1TC=windows-7

I ended up doing it with the Windows cert tool, but the first of
these links has a way to do it on the Unix/Linux command line (which
I didn't try).  I ended up with a .pfx file -- I'm not sure whether it
matters whether you call it .pfx or .p12, but it may, because some of
the tools apparently pay attention to the file extensions and behave
differently accordingly.

(It took me a while to figure this out, because a lot of the pages I found
talked about converting formats, but it seems like the key thing is getting
the full cert chain into the file, as opposed to just the one cert.)

Once you've created your .pfx file, you can print out the info with
a command like this:

   keytool -storetype pkcs12 -keystore <file>.pfx -list -v

Make sure you have the full chain of certs.

My file looks like this (with lots of stuff removed for clarity):

   ...
   Certificate[1]:
   Owner: CN=University of Wisconsin-Madison, OU=Biological Magnetic Resonance Data Bank, O=University of Wisconsin-Madison, STREET=Computer Science, L=Madison, ST=Wisconsin, OID.2.5.4.17=53706, C=US
   ...
   Certificate[2]:
   Owner: CN=InCommon Code Signing CA, OU=InCommon, O=Internet2, C=US
   ...
   Certificate[3]:
   Owner: CN=UTN-USERFirst-Object, OU=http://www.usertrust.com, O=The USERTRUST Network, L=Salt Lake City, ST=UT, C=US
   ...
   Certificate[4]:
   Owner: CN=AddTrust External CA Root, OU=AddTrust External TTP Network, O=AddTrust AB, C=SE


# Actually signing the jar file

Once you have a credential file with the full cert chain, you can sign
your jar file.  You need to run a command like this:

   jarsigner -storetype pkcs12 -keystore <cert_file>.pfx \
     <jar file> <alias>

where <alias> is the Alias name that's shown when you print your cert
(see above).


## Using a Java-specific cert

(Note:  This method is documented somewhere by Oracle, although I can't
find exactly the right page now.)

# Creating a keystore

You create a keystore the same way you did for the self-signed cert
above:

   keytool -genkey -keyalg RSA -alias <alias> -keystore <file> \
     -validity 360 -keysize 2048


# Getting a corresponding cert

You need to generate a cert request file, with a command like this:

     keytool -certreq -alias <alias> -file <file>.csr -keystore <file>.jks

This creates a .csr file, WHICH NEEDS TO BE INCLUDED IN YOUR CERTIFICATE
REQUEST.

Then, when you get back a cert, it's specifically tied to the private
key corresponding to the given alias in your keystore.  It seems like
the cert you get back is supposed to include the full chain you need,
but I can't verify this because I haven't done things this way.

# Importing the cert into the keystore

Once you have your cert, you need to import it into the keystore like this:

   keytool -importcert -trustcacerts -alias <alias> -file \
     <file>.p12 -keystore <file>.jks

# Actually signing the jar file

You need to run a command like this to sign the jar file:

   jarsigner -keystore <file>.jks <jar_file> <alias>
