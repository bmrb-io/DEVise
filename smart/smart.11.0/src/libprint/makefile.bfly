#               LIBRARY MAKEFILE

# Module name
LIBNAME = libprint

# Files for this particular library module
# Low-level procedures to print individual smart tuples
INDIV     = p_condoc.o p_display.o p_long.o p_parsedoc.o p_spec.o \
            p_sm_display.o p_vector.o p_string.o p_account.o p_tr_vec.o \
            p_tr.o p_rr.o p_eval.o p_float.o p_top_res.o p_full_res.o \
            p_fdbk_info.o p_inv.o

# Low-level procedures to print interpreted smart tuples (ie, what the smart 
# tuple describes instead of the smart tuple itself)
INTER     = p_textdoc.o p_textdisp.o print_result.o p_rclprn.o p_trprn.o \
            p_trrcl.o p_trlprn.o

# High-level procedures to print individual smart tuples
INDIV_H   = p_text_pp.o p_text_raw.o p_text_form.o p_vec_dict.o

# Procedures to print entire relational objects
RELOBJS   = print_text.o

LIBFILES  =  $(INDIV) $(INTER) $(INDIV_H) $(RELOBJS)


#############################################################################
# START BFLY STUFF
#
# Anything between the START and END lines is preserved when the makefile
# is remade.  These lines are executed AFTER the stuff from the general
# makefile.
#
# Add bfly-specific modules for this library here...


BFLY_LIBFILES = $(LIBFILES)


######################################################################
# END BFLY STUFF
#  All code below this line (except for automatically created dependencies)
#  is independent of this particular makefile, and should not be changed!
#############################################################################

# Flags normally set in top level makefile.  Make sure you want these
# default if you compile locally in this directory
PREFIX = $(PWD)/..
BIN = $(PREFIX)/bin
LIB = $(PREFIX)/lib
H   = -I../h

# Version numbers
MAJOR = 10
MINOR = 1

# Sun shared libraries with cc
#CC     = cc
#CFLAGS = -g -pic -L$(LIB) $H
#LIBEXT = so

# Static libraries with gcc
#CC       = gcc
#CFLAGS   = $H -L$(LIB) -g -traditional -Wall
#LIBEXT   = a

# Libraries on the butterfly
CC	= cc
CFLAGS	= $H -L$(LIB) -g -DBFLY
LIBEXT	= a


# Other macros used in some or all makefiles
PRINT  = print
AR     = -ar
ARFLAGS= urv
RANLIB = ranlib

# For use in GNU make; in other makes, this does very little...
# makes a list of "arc.a(libfile.o) arc.a(libfile2.o)..."
ARC_LIBFILES = $(foreach obj,$(BFLY_LIBFILES),$(LIB)/$(LIBNAME).a($(obj)))

# Entry points install and all are the same.  If you want to "make install"
# a non-test version in this directory alone, YOU MUST SPECIFY "PREFIX=..." ON
# THE COMMAND LINE  where ".../lib" gives the location you wish the
# library placed.  By default it will end up in the test directory.

install all:  $(LIB)/$(LIBNAME).$(LIBEXT)

#########################################################################
# Compilation of Libraries                                              #
# ##Note that a copy of the library is NOT kept in the current directory. #
# ##    This seems necessary to handle shared libraries                       #
#########################################################################
$(LIB)/$(LIBNAME).a: $(ARC_LIBFILES)
	$(RANLIB) $(LIB)/$(LIBNAME).a

$(LIBNAME).so: $(BFLY_LIBFILES)
	$(LD) $(BFLY_LIBFILES) -o $(LIBNAME).so.$(MAJOR).$(MINOR)
	$(LD) $(BFLY_LIBFILES) -o $(LIB)/$(LIBNAME).so.$(MAJOR).$(MINOR)


#########################################################################
# Putting the .o into the .a file...
#########################################################################
(%.o): %.c
	$(CC) -c $(CFLAGS) $<
	$(AR) $(ARFLAGS) $@ $%
	$(RM) $%

#########################################################################
# Saving program versions                                               #
#########################################################################
rcs:
	-ci -q "-mAutomatic checkin" *.c

#########################################################################
# Odds and ends                                                         #
#########################################################################
clean:
	/bin/rm -f *.o *.BAK *~ $(LIBNAME).a $(LIBNAME).so

print: # $(FILES) makefile
	$(PRINT) $?
	cat >print </dev/null

lint:
	$(LINT) -I../h -C$(LIBNAME) *.c
	mv llib-l$(LIBNAME).ln $(LIB)


#########################################################################
# Determining program dependencies                                      #
#########################################################################
depend:
	grep '^#[ ]*include' *.c \
		| sed -e 's?:[^"]*"\([^"]*\)".*?: \$H/\1?' \
			-e '/</d' \
		        -e 's/\.c/.o/' \
		        -e 's/\.y/.o/' \
		        -e 's/\.l/.o/' \
		> makedep
	echo '/^# DO NOT DELETE THIS LINE/+2,$$d' >eddep
	echo '$$r makedep' >>eddep
	echo 'w' >>eddep
	cp makefile makefile.bak
	ed - makefile < eddep
	/bin/rm eddep makedep
	echo '# DEPENDENCIES MUST END AT END OF FILE' >> makefile
	echo '# IF YOU PUT STUFF HERE IT WILL GO AWAY' >> makefile
	echo '# see make depend above' >> makefile

# DO NOT DELETE THIS LINE -- make depend uses it

# DEPENDENCIES MUST END AT END OF FILE
# IF YOU PUT STUFF HERE IT WILL GO AWAY
# see make depend above

