#  ========================================================================
#  DEVise Data Visualization Software
#  (c) Copyright 1992-1995
#  By the DEVise Development Group
#  Madison, Wisconsin
#  All Rights Reserved.
#  ========================================================================
#
#  Under no circumstances is this software to be copied, distributed,
#  or altered in any way without prior permission from the DEVise
#  Development Group.

############################################################

#	$Id$

#	$Log$
#	Revision 1.4  1995/09/22 17:33:39  jussi
#	Added copyright message.
#
#	Revision 1.3  1995/09/21 15:35:58  jussi
#	Minor changes.
#
#	Revision 1.2  1995/09/05 22:47:58  jussi
#	Added/updated CVS header.

############################################################

# dialog box with item lists
#	sort == 1 to sort all items
# Return the button pressed.
# Global variable dialogListVar(selected) is set to the current selection, or ""
set dialogListVar(selected) ""
proc dialogList { w title text bitmap default args items {sort 1 } } {
	global button
	global dialogListVar

#	Find width of listbox
	set listWidth 1
	foreach item $items {
		set len [LineWidth $item]
		if {$len > $listWidth } {
			set listWidth [expr $len+1]
		}
	}

	# 1. Create the top-level window and divide it into top
	# and bottom parts.

	toplevel $w -class Dialog
	wm geometry $w +100+100
	wm title $w $title
	wm iconname $w Dialog
	frame $w.top -relief raised -bd 1
	frame $w.listFrame
	pack $w.top $w.listFrame -side top -fill both
	frame $w.bot -relief raised -bd 1
	pack $w.bot -side bottom -fill both

	# 2. Fill the top part with the bitmap and message.

	set txtWidth [LineWidth $text]
	set txtHeight [LineHeight $text]
	text $w.top.msg -width $txtWidth -height $txtHeight \
		-font -*-*-medium-r-normal-*-140-*-*-m-* \
		-relief flat
	$w.top.msg insert end $text
	$w.top.msg configure -state disabled
	#	message $w.top.msg -width 3i -text $text\
	#			-font -Adobe-Times-Medium-R-Normal-*-180-*
	pack $w.top.msg -side right -expand 1 -fill both\
			-padx 3m -pady 3m
	if {$bitmap != ""} {
		label $w.top.bitmap -bitmap $bitmap
		pack $w.top.bitmap -side left -padx 3m -pady 3m
	}

	# Create a list box for items
	listbox $w.list -relief raised -yscrollcommand "$w.scroll set" \
		-width $listWidth -selectmode single
	scrollbar $w.scroll -command "$w.list yview"
	pack $w.list -in $w.listFrame -side left -fill x -expand 1
	pack $w.scroll -in $w.listFrame -side right -fill y
	if {$sort} {
		set items [lsort $items]
	}
	foreach i $items {
		$w.list insert end $i
	}
	$w.list selection set 0

	# 3. Create a row of buttons at the bottom of the dialog.

	set i 0
	foreach but $args {
		button $w.bot.button$i -text $but -command\
				"set button $i"
		if {$i == $default} {
			frame $w.bot.default -relief sunken -bd 1
			raise $w.bot.button$i
			pack $w.bot.default -side left -expand 1 -fill x
#					-padx 3m -pady 2m
			pack $w.bot.button$i -in $w.bot.default\
					-side left -expand 1 -fill x
#					-padx 2m -pady 2m -ipadx 2m -ipady 1m
		} else {
			pack $w.bot.button$i -side left -expand 1 -fill x
#					-padx 3m -pady 3m -ipadx 2m -ipady 1m
		}
		incr i
	}

	# 4. Set up a binding for <Return>, if there`s a default,
	# set a grab, and claim the focus too.

	if {$default >= 0} {
		bind $w <Return> "$w.bot.button$default flash; \
			set button $default"
	}
	set oldFocus [focus]
	tkwait visibility $w
	grab set $w
	focus $w

	# 5. Wait for the user to respond, then restore the focus
	# and return the index of the selected button.

	tkwait variable button

	set index [ $w.list curselection ]
	if { $index >= 0 } {
		set dialogListVar(selected) [ $w.list get $index ]
	} else {
		set dialogListVar(selected) ""
	}

	destroy $w
	focus $oldFocus
	return $button
}
