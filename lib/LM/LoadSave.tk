# Routines to Load and Save layouts from a file 

proc LoadFromFile { isDEViseLayout } {
    global currentLoadFile defaultFileName currentSaveFile
    if { [Saved] == 0 } {
	set but [dialog .errorLM "LM Message" \
		"Save current layout ?" "" 0 "Ok" "Discard" "Cancel"]
	if { $but == 0 } {
	    SaveToFile 
	} elseif { $but == 1 } {
	    ClearCanvas 
	} elseif { $but == 2 } {
	    return
	} 
    }
    while { 1 }  {
	set currentLoadFile [FileSelectDialog "Select file to load layout" \
		$defaultFileName]
	if { $currentLoadFile == "" } {
	    set but [dialog .errorLM "LM Error Message" \
		    "No file selected" "" 0 "Ok" "Select Another" ]
	    if { $but == 0 } {
		return
	    }
	} else {
	    break
	}
    }
    set currentSaveFile $currentLoadFile
    ClearCanvas 
    DoActualLoad $currentLoadFile $isDEViseLayout
}

proc ClearCanvas {} {
    global canvas
    $canvas delete all
    DoActualDeleteWindow Display "" 0
}
    
proc SaveToFile { isDEViseLayout } {
    global currentSaveFile defaultFileName currentLoadFile

    if { $currentSaveFile == "" } {
	while { 1 }  {
	    set currentSaveFile [FileSelectDialog \
		    "Select file to save layout" $defaultFileName]
	    if { $currentSaveFile == "" } {
		set but [dialog .errorLM "LM Error Message" \
			"No file selected" "" 0 "Ok" "Select Another" 
		if { $but == 0 } {
		    return
		} 		    
	    } else {
		break
	    }
	}
    }
    set currentLoadFile $currentSaveFile
    DoActualSave $currentSaveFile $isDEViseLayout
}

proc SaveToGivenFile { isDEViseLayout } {
    global defaultFileName
    while { 1 } {
	set saveFile [FileSelectDialog "Select file to save layout" \
		$defaultFileName]
	if { $saveFile == "" } {
	    set but [dialog .errorLM "LM Error Message" \
		    "No file selected" "" 0 "Ok" "Select Another" ]
	    if {$but == 0 } {
		return
	    }
	} else {
	    break
	}
    }
    DoActualSave $saveFile $isDEViseLayout
}

proc FileSelectDialog { str default } {
    global fsBox   
    set fsBox(path) .
    set fsBox(pattern) *.layout
    set file [FSBox $str $default]
    return $file
}

proc DoActualSave { file isDEViseLayout} {
    puts "Saving to file $file isDEViseLayout = $isDEViseLayout"
    set fd [open $file w]
    puts "fd = $fd"
    if { $fd == "" } {
	dialog .errorLM "LM Error Message" \
		"File $file could not be opened" \
		"" 0 "Ok"
    } else {
	if { $isDEViseLayout } {
	    SaveAsDEViseViews $fd Display 1
	} else {
	    SaveFrame $fd Display 1
	}
    }	
    close $fd
    SetSaveState 0
}

proc DoActualLoad { file isDEViseLayout } {
    puts "Loading from file $file"
    set fd [open $file r]
    puts "fd = $fd"
    if { $fd == "" } {
	dialog .errorLM "LM Error Message" \
		"File $file could not be opened" \
		"" 0 "Ok"
    } else {
	if { $isDEViseLayout } {
	    LoadDEViseViews $fd 
	} else {
	    LoadFrame $fd 
	}
    }	
    close $fd
    SetSaveState 0
}


proc SaveFrame { fd frame recursive } {
    set props [LM getProperties $frame]
    set parent  [LM getParent $frame]
    if { $parent == "" } {
	set parent -1
    }
    set layoutProps [LM getLayoutProperties $frame]
    set props [concat $props $parent]
    set props [concat $props $layoutProps]
    puts "Saving $props" 
    puts $fd $props
    set children [LM getChildren $frame]
    if { $recursive } {
	foreach child $children  {
	    SaveFrame $fd $child $recursive
	}
    }
}

proc LoadFrame { fd } {
    global name origX origY relX relY dimW dimH parent \
	    colorBg colorFg layoutMode layoutRow layoutCol level \
	    maxX maxY
    while { [gets $fd line] >= 0 } {
	scan $line "%s %d %d %d %d %d %d %s %s %s %s %d %d" \
		name(newChild) origX(newChild) origY(newChild) \
		relX(newChild) relY(newChild) dimW(newChild) dimH(newChild) \
		colorBg(newChild) colorFg(newChild) parent(newChild)  \
		layoutMode(newChild) layoutRow(newChild) layoutCol(newChild)
	if { $name(newChild) == "Display" } {
	    set newParent ""
	    set parent(newChild) ""
	    set level(newChild) 0
	    PrintWinParams newChild
	    set maxX(newChild) $dimW(newChild)
	    set maxY(newChild) $dimH(newChild)
	    CopyWinParams Display newChild
	} else {
	    set newParent $parent(newChild)
	}
	DoActualCreateWindow newChild
	global canvas frameWidth

	if { $newParent != "" } {
	    set isFrame [LM numChildren $newParent]
	    if { !$isFrame } {
		puts "deep: $newParent "
		DeepenFrame $canvas $newParent $colorBg(newParent) $frameWidth
	    }
	}
	DrawOutline $canvas newChild
    }
}


proc SetSaveState { state } {
    global saveState 
    set saveState $state
    puts "savestate = $saveState"
}

proc Saved { } {
    global saveState
    puts "savestate = $saveState"
    return [expr !$saveState ]
}


# When the layout is to be stored as DEVise views the following has to 
# be done 
# The schema for the saved file is 
# 
# // Parent x y z color size pattern orientation shape shapeattr1 shapeattr2 shapeattr3
# Parent = view in which this view should be drawn, -1 => this is a root 
#          view and will appear directly on the X display
# x,y = Absolute position of the view as screen coordinates
# color = bg color of the view
# The next 3 attribute are not used yet and so we fill in 1 for these
# size = don't care
# pattern = don't care
# orientation = don't care
# shape = 16 (View Shape)
# shapeattr1 = name of the view
# shapeattr2 = width of the view
# shapeattr3 = height of the view
# NOTE that all the numbers here have to be multiplied by the scale of the LM
# display relative to actual X display.

proc SaveAsDEViseViews { fd frame recursive } {
    puts "Saving as DEVise Views"
    global xscale yscale 

    # Do not save the display 
    if {$frame != "Display"} {
	set props [LM getProperties $frame]
	puts "Properties of $frame : $props"
	
	set parent  [LM getParent $frame]
	
	if { $parent == "Display" } {
	    # The chilren of the Display are root views
	    set parent -1		
	}
	set layoutProps [LM getLayoutProperties $frame]
	# The first parameter of layoutProps is its layout mode
	puts "layout: $layoutProps"
	set x [expr [lindex $props 1] + [lindex $props 3]]
	set deviseX [expr $x / $xscale]
	set y [expr [lindex $props 2] + [lindex $props 4]]
	set deviseY [expr $y / $yscale]
	set deviseWidth [expr [lindex $props 5] / $xscale]
	set deviseHeight [expr [lindex $props 6] / $yscale]

	puts "x = $x, y = $y, deviseX = $deviseX , deviseY = $deviseY deviseWidth = $deviseWidth deviseHeight = $deviseHeight"

	set tosave [format "%s %f %f %f %d %d %d %d %d %s %f %f"  \
		$parent $deviseX $deviseY 1 2 1 1 1 16 [lindex $props 0] \
		$deviseWidth $deviseHeight ]
	puts "Saving $tosave"
	#set props [concat $props $parent]
	#set props [concat $props $layoutProps]
	#puts "Saving $props" 
	puts $fd $tosave
    }
    set children [LM getChildren $frame]
    if { $recursive } {
	foreach child $children  {
	    SaveAsDEViseViews $fd $child $recursive
	}
    }
}

proc LoadDEViseViews { fd } {
    puts "Not Implemented yet"
}


