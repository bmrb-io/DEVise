#  ========================================================================
#  DEVise Data Visualization Software
#  (c) Copyright 1992-1995
#  By the DEVise Development Group
#  Madison, Wisconsin
#  All Rights Reserved.
#  ========================================================================
#
#  Under no circumstances is this software to be copied, distributed,
#  or altered in any way without prior permission from the DEVise
#  Development Group.

############################################################

#	$Id$

#	$Log$
#	Revision 1.1.2.1  1997/05/20 16:05:01  ssl
#	Initial Revision : Layout manager gui.
#
#	Revision 1.3.4.1  1997/02/07 15:21:45  wenger
#	Updated Devise version to 1.3.1; fixed bug 148 (GUI now forces unique
#	window names); added axis toggling and color selections to Window menu;
#	other minor fixes to GUI; show command to Tasvir now requests image to
#	be shown all at once.
#
#	Revision 1.3  1995/09/22 17:33:43  jussi
#	Added copyright message.
#
#	Revision 1.2  1995/09/05 22:47:59  jussi
#	Added/updated CVS header.

############################################################

# dialog box with item lists
# Return the button pressed.
# Global variable dialogParamVar(params) is set to the text variables
# of the parameters
# params is of the form: { { name val} {name val } ... }
set dialogParamVar(params) { }
proc dialogParam { w title text bitmap default args params } {
	global button
	global dialogParamVar

	set nameWidth 1
	foreach parm $params {
		set temp [LineWidth [lindex $parm 0]]
		if {$temp > $nameWidth} {
			set nameWidth $temp
		}
	}

	# 1. Create the top-level window and divide it into top
	# and bottom parts.

	toplevel $w -class Dialog
	wm geometry $w +100+100
	wm title $w $title
	wm iconname $w Dialog
	frame $w.top -relief raised -bd 1
	frame $w.listFrame
	pack $w.top $w.listFrame -side top -fill both
	frame $w.bot -relief raised -bd 1
	pack $w.bot -side bottom -fill both

	# 2. Fill the top part with the bitmap and message.

        set txtWidth [LineWidth $text]
	set txtHeight [LineHeight $text]
	text $w.top.msg -width $txtWidth -height $txtHeight \
			-font -*-*-medium-r-normal-*-140-*-*-m-* \
			-borderwidth 0
	$w.top.msg insert end $text
	$w.top.msg configure -state disabled

#	message $w.top.msg -width 3i -text $text\
#			-font -Adobe-Times-Medium-R-Normal-*-180-*

	pack $w.top.msg -side right -expand 1 -fill both\
			-padx 3m -pady 3m
	if {$bitmap != ""} {
		label $w.top.bitmap -bitmap $bitmap
		pack $w.top.bitmap -side left -padx 3m -pady 3m
	}

	# Create a text box for items
	set frameNames { }
	set entryNames { }
	frame $w.listFrame.left
	frame $w.listFrame.right

	foreach i $params {
		set parm [ lindex $i 0]

		set frameName $w.frame_$parm
		frame $frameName
		lappend frameNames $frameName

		set labelName $frameName.label 
		label $labelName -text "$parm" -width $nameWidth

		set val [ lindex $i 1 ]
		set name $frameName.entry 
		entry $name -relief sunken -width 60
		lappend entryNames $name
		$name insert 0 $val

#		pack $name $labelName -in $frameName -side right -fill x 
		pack $labelName -in $frameName -side left 
		pack $name -in $frameName -side left -fill x 
	}
	eval pack $frameNames  -side top -fill x -expand 1

	pack $w.listFrame.left $w.listFrame.right -side left

	# 3. Create a row of buttons at the bottom of the dialog.

	set i 0
	foreach but $args {
		button $w.bot.button$i -text $but -command\
				"set button $i"
		if {$i == $default} {
			frame $w.bot.default -relief sunken -bd 1
			raise $w.bot.button$i
			pack $w.bot.default -side left -expand 1 -fill x
#					-padx 3m -pady 2m
			pack $w.bot.button$i -in $w.bot.default\
					-side left -expand 1 -fill x
#					-padx 2m -pady 2m -ipadx 2m -ipady 1m
		} else {
			pack $w.bot.button$i -side left -expand 1 -fill x
#					-padx 3m -pady 3m -ipadx 2m -ipady 1m
		}
		incr i
	}

	# 4. Set up a binding for <Return>, if there`s a default,
	# set a grab, and claim the focus too.

	if {$default >= 0} {
		bind $w <Return> "$w.bot.button$default flash; \
			set button $default"
	}
	set oldFocus [focus]
	grab set $w
	focus $w

	# 5. Wait for the user to respond, then restore the focus
	# and return the index of the selected button.

	tkwait variable button

	set dialogParamVar(params) { }
	foreach i $entryNames {
		lappend dialogParamVar(params) [ $i get ]
	}

	destroy $w
	focus $oldFocus
	return $button
}
