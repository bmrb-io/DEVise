global lastWin
global editCanvas 
global nodeIndex
global edgeIndex
global XLinkIndex
global YlinkIndex
global rectIndex

set nodeIndex 0
set edgeIndex 0
set XLinkIndex 0
set YLinkIndex 0
set rectIndex 0

$editCanvas bind rect <Enter> {
    global colorBg colorFg
    set curname [lindex [$editCanvas gettags current] 1]
    set bg [LM getBgColor $curname]
    set fg [LM getFgColor $curname]
    puts " $curname $bg $fg"

    $editCanvas itemconfigure current -fill $bg
    $editCanvas create text 400 400  -text $curname -tags curTxt \
	    -fill $fg
    $editCanvas raise curTxt
}

$editCanvas bind rect <Leave> {
    $editCanvas itemconfigure current -fill $glassColor
    $editCanvas delete curTxt
}

$editCanvas bind edge <Button-1> {
    global selectedEdge selectedTag changedCoord
    global changedNodes
    global changedEdges
    global linkIndex
    
    set selectedTag [$editCanvas find withtag current]
    if { $selectedTag != "" } {
	set selectedEdge  $edgeTagList($selectedTag)
	puts "edge to move : $edgeList($selectedEdge)"
	set changedCoord [lindex $edgeList($selectedEdge) 3]
	
	set linkIndexNodes [FindLinkedNodes $selectedEdge $changedCoord]
	set linkIndex [lindex $linkIndexNodes 0]
	set changedNodes [lindex $linkIndexNodes 1]
	set changedEdges [FindEdges changedNodes]
	
	puts "changedNodes -> $changedNodes"
	puts "changedEdges -> $changedEdges"
	
	foreach edge $changedEdges {
	    HighLight $editCanvas [lindex $edgeList($edge) 2] "red"
	}
	foreach node $changedNodes {
	    HighLight $editCanvas [lindex $nodeList($node) 2] "black"
	}
    } else {
	set selectedEdge -1
    }
}
    
$editCanvas bind edge <ButtonRelease-1> {
    global selectedEdge selectedTag changedCoord
    global changedNodes
    global changedEdges
    global linkIndex
    
    if { $selectedEdge == -1 } {
	return
    }
    foreach edge $changedEdges {
	HighLight $editCanvas [lindex $edgeList($edge) 2] "black"
    }
    foreach node $changedNodes {
	HighLight $editCanvas [lindex $nodeList($node) 2] "white"
    }
    Print "nodeList" nodeList $nodeIndex "list"
    Print "edgeList" edgeList $edgeIndex "list"
    Print "XLinkList" XLinkList $XLinkIndex "list"
    Print "YLinkList" YLinkList $YLinkIndex "list"
    #    Print "RectList"  rectList $rectIndex "list"
}

$editCanvas bind edge <Button1-Motion> {
    global XLinkList YLinkList
    global selectedEdge selectedTag changedCoord
    global changedNodes
    global changedEdges
    
    global linkIndex
    
    if { $selectedEdge == -1 } {
	return
    }
    puts "changedCoord = $changedCoord"
    if  { $changedCoord == "x" } {
	foreach node $changedNodes {
	    UpdateNode $node 0 %x
	    RedrawNode $editCanvas $node
	}
	puts "x link"
    } else {
	foreach node $changedNodes {
	    UpdateNode $node 1 %y
	    RedrawNode $editCanvas $node	    
	}
	puts "y link"
    }
    foreach edge $changedEdges {
	RedrawEdge $editCanvas $edge 
    }
    RedrawRectangles  $editCanvas
}

proc ApplyLayoutEdits { xscale yscale } {
    puts "Applying edits ..."
    # Apply the edits to the C++ data base
    # Convert to true scale while doing this
    global nodeList rectList rectIndex frameWidth
    global origX origY relX relY
    set i 0
    puts "orig $origX(edit), $origY(edit)"
    while { $i < $rectIndex } {
	set winname [lindex $rectList($i) 5]
	#	set properties [LM getProperties $winname]
	set node1 $nodeList([lindex $rectList($i) 0])
	set node3 $nodeList([lindex $rectList($i) 2])
	set relx [expr ([lindex $node1 0] - 10 - $frameWidth) / $xscale ]
	set rely [expr ([lindex $node1 1] - 10 - $frameWidth) / $yscale ]
	set width [expr ([lindex $node3 0] - [lindex $node1 0]) /$xscale]
	set height [expr ([lindex $node3 1] - [lindex $node1 1]) /$yscale]
	puts "$winname $relx $rely $width $height"
	LM setPosn $winname $relx $rely $width $height
	set origx [expr $origX(edit) + $relX(edit) + $frameWidth]
	set origy [expr $origY(edit) + $relY(edit) + $frameWidth]
#	MoveWindow $winname \
#		[expr $origx + $relx] \
#		[expr $origy + $rely] \
#		[expr $origx + $relx + $width] \
#		[expr $origy + $rely + $height] $frameWidth
        LM printWindow $winname
	incr i 1
    }
    SetSaveState 1
}

proc ApplyPropertiesEdit {} {
    global name relX relY origX origY dimW dimH colorBg colorFg 
    global layoutMode layoutRow layoutCol
    global maxX maxY frameWidth parent

    # Check if within bounds and change maxX and maxY if needed
    if { $dimW(edit) != $dimW(current) ||  \
	    $dimH(edit) != $dimH(current) } {
	if { $parent(edit) !=  "" } {
	    set parDims [LM getPosn $parent(edit)]
	    set actWd [expr [lindex $parDims 4] - 2 * $frameWidth]
	    set actHt [expr [lindex $parDims 5] - 2 * $frameWidth]
	    
	    if { $dimW(edit) > $actWd } {
		set dimW(edit) $dimW(current)
	    } 
	    if { $dimH(edit) > $actHt } {
		set dimH(edit) $dimH(current)
	    }
	    set maxX(edit) [expr $actWd - $dimW(edit)]
	    set maxY(edit) [expr $actHt - $dimH(edit)]
	}
    }

    if { $relX(edit) < 0  ||  $relX(edit) > $maxX(edit) } {
	set relX(edit) $relX(current)
    } 
    if { $relY(edit) < 0  || $relY(edit) > $maxY(edit) } {
	set relY(edit) $relX(current)
    } 

    ConfigureWin $name(edit) edit
    PrintWinParams edit 
    PrintWinParams current
    if { [expr ($relX(edit) != $relX(current)) \
	    || ($relY(edit) != $relY(current)) \
	    || ($dimW(edit) != $dimW(current)) \
	    || ($dimH(edit) != $dimH(current)) ] } {
	LM setPosn $name(current) $relX(edit) $relY(edit) \
		$dimW(edit) $dimH(edit)
    } 
    if { $colorBg(edit) != $colorBg(current) } {
	LM setBgColor $name(current) $colorBg(edit)
    }
    if { $colorFg(edit) != $colorFg(current) } {
	LM setFgColor $name(current) $colorFg(edit)
    }
    if { $layoutMode(edit) != $layoutMode(current) } {
	LM setLayoutProperties $name(current) $layoutMode(edit) \
		$layoutRow(edit) $layoutCol(edit) 
    } elseif { [expr ($layoutRow(edit) != $layoutRow(current))  \
	    || ($layoutCol(edit) != $layoutCol(current)) ] } {
	LM setLayoutProperties $name(current) $layoutMode(edit) \
		$layoutRow(edit) $layoutCol(edit) 
    }
    CopyWinParams current edit
    if { $name(edit) == "Display" } {
	CopyWinParams Display current 
    }
    SetSaveState 1
}

proc ClearEditCanvas { } {
    global nodeList
    global nodeIndex
    puts "Clearing nodelist"
    ClearList nodeList nodeIndex
#    set nodeIndex 0
    
    global edgeList
    global edgeIndex
    puts "Clearing edgelist"
    ClearList edgeList edgeIndex
#    set edgeIndex 0
    
    global nodeTagList
    global edgeTagList
    
    global XLinkList 
    global XLinkIndex
    puts "Clearing XLinklist"
    ClearList XLinkList XLinkIndex
#    set XLinkIndex 0
    
    global YLinkList
    global YLinkIndex
    puts "Clearing YLinklist"
    ClearList YLinkList YLinkIndex
#    set YLinkIndex 0

    global rectList
    global rectIndex
    puts "Clearing rectlist"
    ClearList rectList rectIndex
#    set rectIndex 0

    global rectTagList

    global editCanvas
    $editCanvas delete all
}

proc ClearList { l max } {
    upvar $l list
    upvar $max maxindex
    
    set i 0
    while { $i < $maxindex } {
	puts "$list($i) "
	unset list($i)
	incr i
    }
    set maxindex 0
}

proc InitEditCanvas { xscale yscale } {
    global editEditCanvas currentWin
    
    ClearEditCanvas 
    CreateLayout $xscale $yscale 
}

proc CreateLayout { xscale yscale } {
    global name 
    global relX relY origX origY 
    global dimW dimH maxX maxY
    global colorFg colorBg 
    global layoutMode 
    global parent level

    global currentWin editCanvas
    global frameWidth

    
    set x1 10
    set y1 10
    set x2 [expr $x1 + $xscale * $dimW(edit) ]
    set y2 [expr $y1 + $yscale * $dimH(edit) ]
    set appWd [expr $xscale * $dimW(edit)  + 20] 
    set appHt [expr $yscale * $dimH(edit)  + 20]
    $editCanvas configure -width $appWd
    $editCanvas configure -height $appHt
    
    DrawFixedFrame $editCanvas $currentWin $x1 $y1 $x2 $y2 $colorBg(edit) 1

    if { [LM numChildren $currentWin] } {
	DeepenFrame $editCanvas $currentWin $colorBg(edit) $frameWidth
	foreach child [LM getChildren $currentWin] {
	    set properties [LM getProperties $child]
	    set posx [expr $x1 + $frameWidth + \
		    $xscale * [lindex $properties 3]]
	    set posy [expr $y1 + $frameWidth + \
		    $yscale * [lindex $properties 4]]
	    set width [expr $xscale * [lindex $properties 5]]
	    set height [expr $yscale * [lindex $properties 6]]
	    CreateRectangle $editCanvas $child $posx $posy $width $height \
		    [lindex $properties 8]
	}
    }
}

proc CreateRectangle { w name x1 y1 wd ht color } {
    global rectList rectIndex
    global rectTagList

    set x2 [ expr $x1 + $wd]
    set y2 [ expr $y1 + $ht]
    
    set node1 [ CreateNode $w $x1 $y1 ]
    set node2 [ CreateNode $w $x1 $y2 ]
    set node3 [ CreateNode $w $x2 $y2 ]
    set node4 [ CreateNode $w $x2 $y1 ]
    
    set edge1 [ CreateEdge $w $node1 $node2 x $x1]
    set edge2 [ CreateEdge $w $node2 $node3 y $y2]
    set edge3 [ CreateEdge $w $node3 $node4 x $x2]
    set edge4 [ CreateEdge $w $node4 $node1 y $y1]

    set index $rectIndex
    set rectIndex [expr $rectIndex + 1]
    set tag [DrawRect $w $name $x1 $y1 $x2 $y2 $color ]
    set rectTagList($tag) $index
    set rectList($index) [list $node1 $node2 $node3 $node4 $tag $name]
    $w raise $tag glass
}

proc CreateEdge { w node1 node2 dep val } {
    global edgeList edgeIndex
    global edgeTagList
    global nodeList

    set index [ FindEdge $node1 $node2 ]
    if { $index != -1} {
	return $index
    }
    set index $edgeIndex
    set edgeIndex [expr $edgeIndex + 1]
    
    set tag [ DrawEdge $w $node1 $node2 ]
    set edgeList($index) [list $node1 $node2 $tag $dep]
    set edgeTagList($tag) $index

    set nodeList($node1) [lappend nodeList($node1) $index]
    set nodeList($node2) [lappend nodeList($node2) $index]
    
    global XLinkList XLinkIndex
    global YLinkList YLinkIndex
    if { $dep == "x" } {
	CreateLink $node1 $node2 XLinkList XLinkIndex 3
    } else {
	CreateLink $node1 $node2 YLinkList YLinkIndex 4
    }
    return $index
}

proc CreateLink { node1 node2 depList depIndex coord}  {
    global nodeList
    upvar $depList list
    upvar $depIndex index
    
    set xindex1 [lindex $nodeList($node1) $coord]
    set xindex2 [lindex $nodeList($node2) $coord]
    if { $xindex1 != -1 } {
	if { $xindex2 != -1 } {
	    if { $xindex2 != $xindex1 } {
		puts "!!!!!!!!!something is wrong!!!!!!!!!!!"
		exit
	    } else {
		#should never come here
		return
	    }
	} else {
	    set xindex2 $xindex1
	    set list($xindex1) [lappend list($xindex1) $node2]
	    set nodeList($node2) \
		    [lreplace $nodeList($node2) $coord $coord $xindex1]
	}
    } else {
	if { $xindex2 != -1 } {
	    set xindex1 $xindex2
	    set list($xindex1) [lappend list($xindex1) $node1]
	    set nodeList($node1) \
		    [lreplace $nodeList($node1) $coord $coord $xindex1]
	} else {
	    set xindex $index
	    set index [expr $index + 1]
	    set nodeList($node1) \
		    [lreplace $nodeList($node1) $coord $coord $xindex]
	    set nodeList($node2) \
		    [lreplace $nodeList($node2) $coord $coord $xindex]
	    set list($xindex) [lappend list($xindex) $node1]
	    set list($xindex) [lappend list($xindex) $node2]
	}
    }
}

proc CreateNode { w x y } {
    global XLinkList XLinkIndex
    global YLinkList YLinkIndex
    global nodeList nodeIndex
    global nodeTagList

    set index [ FindNode $x $y ]
    if { $index != -1 } {
	return $index
    }
    set index $nodeIndex
    set nodeIndex [expr $nodeIndex + 1]
    
    set tag [DrawNode $w $x $y]
    set nodeTagList($tag) $index
    
    #set XLink and YLink to -1
    #when an edge is created a new link is also created
    set nodeList($index) [list $x $y $tag -1 -1]
    return $index
}

proc DrawRect { w name x1 y1 x2 y2 color } {
    global glassColor
    set tag [ $w create rectangle \
	    $x1 $y1 $x2 $y2 -tags "rect $name" -fill $glassColor]
    $w lower $tag
    return $tag
}

proc DrawNode { w x y } {
    set tag [ $w create rectangle  \
	    [expr $x - 2] [expr $y - 2] \
	    [expr $x + 2] [expr $y + 2] -tags node  -fill white ]
    return $tag
}

proc UpdateRectangles { oldNode1 oldNode2 newNode1 newNode2 } {
    global rectList rectTagList
    global rectIndex
    global nodeList
    
    set i 0
    while { $i < $rectIndex } {
	puts "Updating rect"

	set rect $rectList($i) 
	puts "oldrect $rectList($i), old1 = $oldNode1, old2 = $oldNode2"
	set pos1 [lsearch [lrange $rect 0 3] $oldNode1]
	set pos2 [lsearch [lrange $rect 0 3] $oldNode2]
	puts "pos1 = $pos1 , pos2 = $pos2"
	if { $pos1 != -1 } {
	    if { $pos2 != -1 } {
		set i [expr $i + 1]
		continue
	    } else { 
		puts "replacing at $pos1 : $newNode1"
		set rectList($i) [lreplace $rectList($i) $pos1 $pos1 $newNode1]
	    }
	} else {
	    if { $pos2 != -1 } {
		puts "replacing at $pos2 : $newNode2"
		set rectList($i) [lreplace $rectList($i) $pos2 $pos2 $newNode2]
	    } 
	}
	puts "newrect $rectList($i)"

	set i [expr $i + 1]
    }
}

proc RedrawRectangles { w } {
    global rectList rectTagList
    global rectIndex
    global nodeList

    set i 0
    while { $i < $rectIndex } {
	set rect $rectList($i) 
	set node1 [lindex $rect 0]
	set node3 [lindex $rect 2]
	$w coords [lindex $rect 4]\
		[lindex $nodeList($node1) 0] \
		[lindex $nodeList($node1) 1] \
		[lindex $nodeList($node3) 0] \
		[lindex $nodeList($node3) 1]
	set i [expr $i + 1]
	$w raise [lindex $rect 4] glass
    }
}

proc DrawEdge { w node1 node2 } {
    global nodeList

    set tag [ $w create line \
	    [lindex $nodeList($node1) 0] \
	    [lindex $nodeList($node1) 1] \
	    [lindex $nodeList($node2) 0] \
	    [lindex $nodeList($node2) 1] \
	    -tags edge ]
    return $tag
}
	    
proc FindEdge { node1 node2 } {
    global edgeIndex edgeList

    set i 0
    while { $i < $edgeIndex } {
	if { [expr [lindex $edgeList($i) 0] == $node1 &&  \
		[lindex $edgeList($i) 1] == $node2 ] } {
	    return $i
	}
	if { [expr [lindex $edgeList($i) 0] == $node2 &&  \
		[lindex $edgeList($i) 1] == $node1 ] } {
	    return $i
	}
	set i [expr $i + 1]
    }
    return -1
}

proc FindNode { x y } {
    global nodeIndex nodeList

    set i 0
    while { $i < $nodeIndex } {
	if { [expr [lindex $nodeList($i) 0] == $x && \
		[lindex $nodeList($i) 1] == $y ] } {
		return $i
	}
	set i [expr $i + 1]
    }
    return -1
}

proc Print {str list max format} {
    upvar $list a
    puts "**************Printing  $str ********************"
    set i 0
    while { $i < $max } {
	if { $format == "coord" } {
	    puts "$i : ([lindex $a($i) 0], [lindex $a($i) 1])" 
	} elseif  { $format == "list" } {
	    puts "$i : ($a($i))"
	}
	set i [expr $i + 1]
    }
    puts "***************End of  $str *********************"
}


proc FindLinkedNodes { edge coord } {
    global XLinkList XLinkIndex
    global YLinkList YLinkIndex

    global edgeList nodeList
    
    set node1 [lindex $edgeList($edge) 0]
    
    if { $coord == "x" } {
	set index [lindex $nodeList($node1) 3]
	if { $index == -1 } {
	    set list {} 
	} else { 
	    set list  $XLinkList($index)
	}
    } elseif { $coord == "y" } {
	set index [lindex $nodeList($node1) 4]
	if { $index == -1 } {
	    set list {} 
	} else {
	    set list  $YLinkList($index) 
	}
    }
    return [list $index $list]
}


proc FindEdges { nodelist } {
    global nodeList
    upvar $nodelist nodes
    
    set edges {} 
    foreach node $nodes {
	puts "node $node , edges = [lrange $nodeList($node) 5 end]"
	foreach edge [lrange $nodeList($node) 5 end] {
	    if { [lsearch $edges $edge] == -1 } {
		set edges [lappend edges $edge]
	    }
	}
	puts "linkededges : $edges"
    }
    puts "edgeList = $edges "
    return $edges
}

proc HighLight {w tag color} {
    $w itemconfigure $tag -fill $color
}
    
proc UpdateNode { node coord val } {
    global nodeList
    set nodeList($node) [lreplace $nodeList($node) $coord $coord $val]
}
	
proc RedrawNode { w node } {
    global nodeList

    set x [lindex $nodeList($node) 0]
    set y [lindex $nodeList($node) 1]
    set tag [lindex $nodeList($node) 2]
    $w coords $tag [expr $x - 2 ] [expr $y - 2] \
	    [expr $x + 2] [expr $y + 2]
}

proc RedrawEdge { w index } {
    global edgeList nodeList
    
    set node1 [lindex $edgeList($index) 0]
    set node2 [lindex $edgeList($index) 1]
    set tag   [lindex $edgeList($index) 2]

    $w coords $tag \
	    [lindex $nodeList($node1) 0] \
	    [lindex $nodeList($node1) 1] \
	    [lindex $nodeList($node2) 0] \
	    [lindex $nodeList($node2) 1] 
}



$editCanvas bind edge <Button-2> {
    global freedEdge freedTag 
    global edgeTagList

    set freedTag [$editCanvas find withtag current]
    if { $freedTag != "" } {
	set freedEdge $edgeTagList($freedTag)
	puts "edge to free = $freedEdge"
	HighLight $editCanvas $freedTag "green"
	FreeEdge $editCanvas $freedEdge
    }
    Print "nodeList" nodeList $nodeIndex "list"
    Print "edgeList" edgeList $edgeIndex "list"
    Print "XLinkList" XLinkList $XLinkIndex "list"
    Print "YLinkList" YLinkList $YLinkIndex "list"
#    Print "RectList"  rectList $rectIndex "list"
}

proc FreeEdge  { w freeEdge } {
    global edgeList  nodeList
    global XLinkList YLinkList
    global XLinkIndex YLinkIndex

    set oldNode(1) [ lindex $edgeList($freeEdge) 0]
    set oldNode(2) [ lindex $edgeList($freeEdge) 1]
    set tag [lindex $edgeList($freeEdge) 2]
    set coord [ lindex $edgeList($freeEdge) 3]

    set newNode(1) [CopyNode $w $oldNode(1) $freeEdge]
    set newNode(2) [CopyNode $w $oldNode(2) $freeEdge]
    
    foreach i {1 2} {
	puts "oldNode$i = $oldNode($i) \($nodeList($oldNode($i))\) "
	puts "newNode$i = $newNode($i)\($nodeList($newNode($i))\)"
    }
	
    foreach i { 1 2 } {
	if { $oldNode($i) != $newNode($i) } {
	    set edges [lrange $nodeList($oldNode($i)) 5 end]
	    foreach edge $edges {
		puts "oldedge $edge = $edgeList($edge)"
		set dep [lindex $edgeList($edge) 3]
		if { $edge == $freeEdge} {
		    puts "freeEdge = $edge"
		    continue
		}
		if { $coord == $dep } {
		    # edge in same direction as current edge => opposite edge 
		    # change node in edge to newNode
		    if { [lindex $edgeList($edge) 0] == $oldNode($i) } {
			set edgeList($edge) \
			[lreplace $edgeList($edge) 0 0 $newNode($i)]
		    } elseif {[lindex $edgeList($edge) 1] == $oldNode($i)} {
			set edgeList($edge) \
			[lreplace $edgeList($edge) 1 1 $newNode($i)]
		    }
		    # delete edge from oldNode 
		    set pos [expr  \
			    [lsearch \
			    [lrange $nodeList($oldNode($i)) 5 end] \
			    $edge] \
			    + 5]
		    set nodeList($oldNode($i)) \
			    [lreplace $nodeList($oldNode($i)) $pos $pos]
		    # add edge to newNode
		    set nodeList($newNode($i)) \
			    [lappend nodeList($newNode($i)) $edge]
		    puts "newedge $edge = $edgeList($edge)"
		} else {
		    # create new edge with the copied node as the appropriate
		    set newEdge [CopyEdge $w $edge $oldNode($i) $newNode($i)]
		    puts "newedge $newEdge = $edgeList($newEdge)"
		}
	    }	        
	}
    }
    
    foreach i {1 2} {
	puts "oldNode$i  = $oldNode($i) \($nodeList($oldNode($i))\) "
	puts "newNode$i = $newNode($i)\($nodeList($newNode($i))\)"
    }
    RearrangeLinks $coord oldNode newNode XLinkList YLinkList \
	    XLinkIndex  YLinkIndex
    UpdateRectangles $oldNode(1) $oldNode(2) $newNode(1) $newNode(2)
}

proc RearrangeLinks  {coord old new xlist ylist maxXIndex maxYIndex} {
    #    global XLinkList XLinkIndex
    #    global YLinkList YLinkIndex

    if { $coord == "x" } {
	upvar $xlist fixedCoordList
	upvar $maxXIndex fixedCoordIndex
	upvar $ylist otherCoordList
	upvar $maxYIndex otherCoordIndex
	set fixedCoord 0
	set otherCoord 1
	set coordIndex 3
	set otherIndex 4
    } else  {
	upvar $ylist fixedCoordList
	upvar $maxYIndex fixedCoordIndex
	upvar $xlist otherCoordList
	upvar $maxXIndex otherCoordIndex
	set fixedCoord 1
	set otherCoord 0
	set coordIndex 4
	set otherIndex 3
    }

    global nodeList 
    upvar $old oldNode
    upvar $new newNode
    
    set xindex [lindex $nodeList($oldNode(1)) $coordIndex]
    
    foreach i {1 2} {
	if { $newNode($i) != $oldNode($i) } {
	    set yindex [lindex $nodeList($oldNode($i)) $otherIndex]
	    set fixedCoordList($xindex) \
		    [lappend fixedCoordList($xindex) $newNode($i)]
	    set otherCoordList($yindex) \
		    [lappend otherCoordList($yindex) $newNode($i)]
	    puts "OldNode$i : $nodeList($oldNode($i))"
	    puts "NewNode$i : $nodeList($newNode($i))"
	    puts "FixedCoordlinks($xindex) : $fixedCoordList($xindex)"
	    puts "OtherCoordlinks($yindex) : $otherCoordList($yindex)"
	}
    } 
    set less {}
    set greater {}
    if { [lindex $nodeList($oldNode(1)) $otherCoord] < \
	     [lindex $nodeList($oldNode(2)) $otherCoord] } {
	 set lessKey [lindex $nodeList($oldNode(1)) $otherCoord]
	 set greaterKey [lindex $nodeList($oldNode(2)) $otherCoord]
    } else {
	 set lessKey [lindex $nodeList($oldNode(2)) $otherCoord]
	 set greaterKey [lindex $nodeList($oldNode(1)) $otherCoord]
    }
    
    foreach node $fixedCoordList($xindex) {
	puts  "node $node"
	if { $node == $oldNode(1) || $node == $oldNode(2)} {
	    continue
	}
	if { [lindex $nodeList($node) $otherCoord] <= $greaterKey } {
	    set less [lappend less $node]
	} elseif { [lindex $nodeList($node) $otherCoord] >= $lessKey } {
	    set greater [lappend greater $node]
	} 
    }
    puts "equiv classes " 
    puts "< $less"
    puts "= $oldNode(1) , $oldNode(2)"
    puts "> $greater"
    if { [ Connected less greater ] } {
	puts "connected"
	set less [concat $less $greater]
	puts "after merge : $less"
	set greater {}
    }
    if { [llength $less] > 0 } {
	set index $fixedCoordIndex
	set fixedCoordIndex [expr $fixedCoordIndex + 1]
	set fixedCoordList($index) $less
	foreach node $less {
	    set nodeList($node) [lreplace $nodeList($node) \
		    $coordIndex $coordIndex $index]
	}
    } 
    if { [llength $greater] > 0 } {
	set index $fixedCoordIndex
	set fixedCoordIndex [expr $fixedCoordIndex + 1]
	set fixedCoordList($index) $greater
	foreach node $greater {
	    set nodeList($node) [lreplace $nodeList($node) \
		    $coordIndex $coordIndex $index]
	}
    } 
    set fixedCoordList($xindex) [list $oldNode(1) $oldNode(2)]
    
}

proc Connected { list1 list2 } {
    upvar $list1 l1
    upvar $list2 l2
    
    foreach node1 $l1 {
	foreach node2 $l2 {
	    if { [FindEdge $node1 $node2] != -1 } {
		return 1
	    }
	}
    }
    return 0
}

proc Min { x y } {
   if { $x < $y } {
	return $x
    } else {
	return $y
    }
}

proc Max { x y } {
    if { $x < $y } {
	return $y
    } else {
	return $x
    }
}

proc CopyEdge { w edge oldNode newNode} {
    global edgeTagList
    global edgeList edgeIndex
    global nodeList

    set index $edgeIndex
    set edgeIndex [expr $edgeIndex + 1]

    set node1 [lindex $edgeList($edge) 0]
    set node2 [lindex $edgeList($edge) 1]
    set dep [lindex $edgeList($edge) 3]

    if { $node1 == $oldNode }  {
	set node1 $newNode
    } elseif { $node2 == $oldNode } {
	set node2 $newNode
    }
    set tag [DrawEdge $w $node1 $node2]
    set edgeList($index) [list $node1 $node2 $tag $dep]
    set edgeTagList($tag) $index
    set nodeList($node1) [lappend nodeList($node1) $index]
    set nodeList($node2) [lappend nodeList($node2) $index]
    return $index
}
    
    
proc UpdateLink { depList linkIndex val } {
    if { $linkIndex == -1 } {
	return
    }
    upvar $depList linkList
    puts "linkIndex = $linkIndex" 
    set linkList($linkIndex) [lreplace $linkList($linkIndex) 0 0 $val]
}

proc BreakLink { depList linkIndex index } {
    upvar $depList linkList

    puts "linkList = $linkList($linkIndex)"
    set pos [expr [ lsearch [lrange $linkList($linkIndex) 1 end] $index ]\
	    + 1]
    set linkList($linkIndex) [ lreplace $linkList($linkIndex) $pos $pos]
}

proc CopyNode { w node edge } {
    global nodeList nodeIndex
    global edgeList

    set edges [lrange $nodeList($node) 5 end]
    set pos [lsearch $edges $edge]
    if { $pos == -1 } {
	puts "something wrong"
	exit
    }
    if { [llength $edges] <= 2 } {
	return $node
    } 
    if { [llength $edges] == 3 } {
	set otherEdges [ lreplace $edges $pos $pos ]
	puts "others : $otherEdges"
	if { [lindex $edgeList([lindex $otherEdges 0]) 3] == \
		[lindex $edgeList([lindex $otherEdges 1]) 3] } {
	    return $node
	}
    }
    set index $nodeIndex
    set nodeIndex [expr $nodeIndex + 1]

    set x [lindex $nodeList($node) 0 ] 
    set y [lindex $nodeList($node) 1 ] 
    set tag [DrawNode $w $x $y]
    set xindex [lindex $nodeList($node) 3]
    set yindex [lindex $nodeList($node) 4]
    # copy edges from this node also
    set nodeList($index) [list $x $y $tag $xindex $yindex]
    return $index
}
	
#Print "nodeList" nodeList $nodeIndex "list"
#Print "edgeList" edgeList $edgeIndex "list"
#Print "XLinkList" XLinkList $XLinkIndex "list"
#Print "YLinkList" YLinkList $YLinkIndex "list"



