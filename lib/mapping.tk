#  ========================================================================
#  DEVise Data Visualization Software
#  (c) Copyright 1992-1995
#  By the DEVise Development Group
#  Madison, Wisconsin
#  All Rights Reserved.
#  ========================================================================
#
#  Under no circumstances is this software to be copied, distributed,
#  or altered in any way without prior permission from the DEVise
#  Development Group.

############################################################

#  $Id$

#  $Log$
#  Revision 1.4  1995/12/20 02:23:23  ravim
#  New simplified interface to generate coral mapping program.
#
#  Revision 1.3  1995/11/30 02:23:26  ravim
#  Changed some colors.
#
#  Revision 1.2  1995/11/24 08:49:29  ravim
#  Fixed a small bug.
#
#  Revision 1.1  1995/11/24 07:43:57  ravim
#  Initial Version.
#

############################################################

source $libdir/compcreate.tcl
source $libdir/crspcreate.tcl
source $libdir/resolve.tk

#---------------------------------------------------
#   ROUTINES TO MANAGE THE MAPPING BETWEEN STREAMS FROM DIFFERENT SOURCES
#-----------------------------------------------------

proc DefineMapping {} {
    global iftype1 iftype2 maptablename unres1name unres2name
    
    # Create a window
    toplevel .map -bg red4
    wm title .map "Define Mappings"
    wm iconname .map "Mappings"

    frame .map.first -relief raised -bg honeydew2
    frame .map.second -relief raised -bg honeydew2
    frame .map.third -relief raised -bg honeydew2
    pack .map.first -fill x -padx 1m -pady 1m


    frame .map.first.layer1 -relief raised -bg honeydew2
    frame .map.first.layer2 -relief raised -bg honeydew2
    frame .map.first.layer3 -relief raised -bg honeydew2
    frame .map.first.layer4 -relief raised -bg honeydew2
    pack .map.first.layer1 .map.first.layer2 .map.first.layer3 \
	    .map.first.layer4 -fill x -padx 1m -pady 1m

    label .map.first.l1 -text "Mapping between types " -bg honeydew2 -fg red4
    menubutton .map.first.but1 -relief raised -textvariable iftype1 \
	    -width 14 -menu .map.first.but1.menu
    label .map.first.l2 -text "  and  " -bg honeydew2 -fg red4
    menubutton .map.first.but2 -relief raised -textvariable iftype2 \
	    -width 14 -menu .map.first.but2.menu 

    pack .map.first.l1 .map.first.but1 .map.first.l2 .map.first.but2 \
	    -in .map.first.layer1 -side left
    
    # define menu items
    menu .map.first.but1.menu -tearoff 0
    .map.first.but1.menu add radiobutton -label "COMPUSTAT" -variable iftype1 \
	    -value COMPUSTAT
    .map.first.but1.menu add radiobutton -label "CRSP" -variable iftype1 \
	    -value CRSP

    menu .map.first.but2.menu -tearoff 0
    .map.first.but2.menu add radiobutton -label "COMPUSTAT" -variable iftype2 \
	    -value COMPUSTAT
    .map.first.but2.menu add radiobutton -label "CRSP" -variable iftype2 \
	    -value CRSP

    #defaults
    set iftype1 COMPUSTAT
    set iftype2 CRSP

    label .map.first.fl -text "File containing mapping table : " \
	    -bg honeydew2 -fg red4
    entry .map.first.fle -width 25 -relief sunken -bd 1 \
	    -textvariable maptablename -bg bisque    
    pack .map.first.fl .map.first.fle -in .map.first.layer2 -side left

    label .map.first.un1 -text "Unresolved companies in : " \
	    -bg honeydew2 -fg red4
    entry .map.first.une1 -width 10 -relief sunken -bd 1 \
	    -textvariable unres1name -bg bisque    
    label .map.first.un2 -text "  and  " \
	    -bg honeydew2 -fg red4
    entry .map.first.une2 -width 10 -relief sunken -bd 1 \
	    -textvariable unres2name -bg bisque    
    pack .map.first.un1 .map.first.une1 .map.first.un2 .map.first.une2 \
	    -in .map.first.layer3 -side left


    # Buttons
    button .map.proceed -text Proceed -command {
	# Check that all fields are entered
	if {($maptablename == "") ||($unres1name == "")||($unres2name == "")} {
	    dialog .note Note "Please enter all the file names \
		    before proceeding"  {} 0 OK
	} elseif {$iftype1 == $iftype2} {
	    dialog .err Error "Cannot generate mapping table from a source \
		    to itself." {} 0 OK
	} else {
	    CoralGen
	}
    }
    button .map.cancel -text Cancel -command {destroy .map}
    
    pack .map.proceed .map.cancel -in .map.first.layer4 -side left \
	    -expand 1 -padx 3m -pady 2m

    # Finally grab focus
    tkwait visibility .map
    grab set .map
    tkwait window .map

}



proc OldDefineMapping {} {
    global datadir button iftype

    # Create a window
    toplevel .map -bg red4
    wm title .map "Generate Input Relations"
    wm iconname .map "Relations"

    frame .map.first -relief raised -bg honeydew2
    frame .map.second -relief raised -bg honeydew2
    frame .map.third -relief raised -bg honeydew2
    pack .map.first .map.second .map.third -fill x -padx 1m -pady 1m
    
    # Set defaults
    set ifname ""
    set iftype "COMPUSTAT"

    # Entry for index file name and type
    label .map.iname -text " Index File " -bg honeydew2 -fg red4
    entry .map.ientry -width 25 -relief sunken -bd 1 \
	    -textvariable ifname -bg bisque
    label .map.itype -text " File Type " -bg honeydew2 -fg red4
    menubutton .map.tbut -relief raised -textvariable iftype \
	    -width 14 -menu .map.tbut.menu 
    pack .map.iname .map.ientry .map.itype .map.tbut -in .map.first \
	    -side left -fill x -expand 1 -padx 2m -pady 1m

    # Create menu of types for which relation loading is possible
    menu .map.tbut.menu -tearoff 0
    .map.tbut.menu add radiobutton -label "COMPUSTAT" -variable iftype \
	    -value COMPUSTAT
    .map.tbut.menu add radiobutton -label "CRSP" -variable iftype \
	    -value CRSP

    # Entry for output relation name and output file name
    label .map.rname -text "Output Relation Name" -bg honeydew2 -fg red4
    entry .map.rentry -width 10 -relief sunken -bd 1 \
	    -textvariable rname -bg bisque
    label .map.rfname -text "Output File" -bg honeydew2 -fg red4
    entry .map.rfentry -width 15 -relief sunken -bd 1 \
	    -textvariable rfname -bg bisque
    pack .map.rname .map.rentry .map.rfname .map.rfentry -in .map.second \
	    -side left -fill x -expand 1 -padx 2m -pady 1m


    # Buttons to Create and Done 
    button .map.create -text Create -command {
	if {($rname == "") || ($rfname == "")} {
	    showmesg "Please specify the relation name and the output file in which to store the relation"
	} else {
	    if {$iftype == "COMPUSTAT"} {
		statusWindow .info "Status" \
			"The relation is being created. This will take a few \
			seconds ..."
		compcreate $datadir/$ifname $rname $rfname
		destroy .info
	    } elseif {$iftype == "CRSP"} {
		statusWindow .info "Status" \
			"The relation is being created. This will take a few \
			seconds ..."
		crspcreate $datadir/$ifname $rname $rfname
		destroy .info
	    } else {
		puts "Error : Unknown type of index file. Cannot create realtion"
	    }
	    showmesg "File $rfname contains the CORAL program to \
		    load the relation $rname. If there are no more \
		    index files to be converted into CORAL relations,\
		    click on DONE in the main menu."
	}
	set ifname ""
	set iftype COMPUSTAT
	set rname ""
	set rfname ""
    }

    button .map.done -text "Proceed to Map" -command {
	destroy .map
	# Ask the user if he/she wants to run the mapping program
	dialog .ask "Running the mapping program" "If you have the CORAL \
		program to map the two relations ready, click YES. \
		Otherwise, click NO and you may define the mapping at some \
		later time." {} -1 YES NO

	if {$button == 0} {
	    # Next step is to run the mapping program itself
	    RunCoralMap
	}
    }
    button .map.cancel -text Cancel -command {destroy .map}

    pack .map.create .map.done .map.cancel -in .map.third -side left \
	    -expand 1 -padx 3m -pady 2m

    # Finally grab focus
    tkwait visibility .map
    grab set .map
    tkwait window .map
}

########################################################################

proc ResolveMapping {} {

    # Get the names of the files containing the mapping table and also
    # the those containing the unresolved entries

    global datadir button

    toplevel .coral -bg red4
    wm title .coral "Coral Mapping Program"
    wm iconname .coral "Coral"

    frame .coral.first -relief raised -bg honeydew2
    frame .coral.second -relief raised -bg honeydew2
    frame .coral.third -relief raised -bg honeydew2
    pack .coral.first .coral.second .coral.third -fill x -padx 1m -pady 1m

    label .coral.oname -text " Mapping Table File: " -bg honeydew2 -fg red4
    entry .coral.oentry -width 10 -relief sunken -bd 1 \
	    -textvariable oname -bg bisque
    pack .coral.oname .coral.oentry \
	    -in .coral.first -side left -fill x -expand 1 -padx 3m -pady 1m

    # Also ask for the names of files that contain any unresolved entries
    label .coral.uname -text " Files containing unresolved entries: " \
	    -bg honeydew2 -fg red4
    entry .coral.urel1 -width 10 -relief sunken -bd 1 \
	    -textvariable urel1 -bg bisque
    label .coral.and -text " and " -bg honeydew2 -fg red4
    entry .coral.urel2 -width 10 -relief sunken -bd 1 \
	    -textvariable urel2 -bg bisque
    pack .coral.uname .coral.urel1 .coral.and .coral.urel2 -in .coral.second \
	    -side left -fill x -expand 1 -padx 2m -pady 1m

    # Buttons to Resolve or Cancel
    button .coral.resolve -text Resolve -command {
	# Check if all the required entries are there
	if {($oname == "") || ($urel1 == "") || ($urel2 == "")} {
	    showmesg "Please specify the names of the files containg the \
		    mapping table and the unresolved entries of the two \
		    relations."
	} else {
	    destroy .coral
	    resolve $oname $urel1 $urel2 
	}
    }
    
    button .coral.cancel -text Cancel -command {destroy .coral}

    pack .coral.resolve .coral.cancel -side left -in .coral.third \
	    -expand 1 -padx 3m -pady 1m

    # Finally grab focus
    tkwait visibility .coral
    grab set .coral
    tkwait window .coral
}

########################################################################

proc RunCoralMap {} {
    global datadir button

    toplevel .coral -bg red4
    wm title .coral "Coral Mapping Program"
    wm iconname .coral "Coral"

    frame .coral.first -relief raised -bg honeydew2
    frame .coral.second -relief raised -bg honeydew2
    frame .coral.third -relief raised -bg honeydew2
    pack .coral.first .coral.second .coral.third -fill x -padx 1m -pady 1m

    # Ask the user for the name of the coral mapping program
    label .coral.pname -text " Coral File: " -bg honeydew2 -fg red4
    entry .coral.pentry -width 10 -relief sunken -bd 1 \
	    -textvariable pname -bg bisque
    label .coral.oname -text " Mapping Table File: " -bg honeydew2 -fg red4
    entry .coral.oentry -width 10 -relief sunken -bd 1 \
	    -textvariable oname -bg bisque
    pack .coral.pname .coral.pentry .coral.oname .coral.oentry \
	    -in .coral.first -side left -fill x -expand 1 -padx 3m -pady 1m

    # Also ask for the names of files that contain any unresolved entries
    label .coral.uname -text " Files containing unresolved entries: " \
	    -bg honeydew2 -fg red4
    entry .coral.urel1 -width 10 -relief sunken -bd 1 \
	    -textvariable urel1 -bg bisque
    label .coral.and -text " and " -bg honeydew2 -fg red4
    entry .coral.urel2 -width 10 -relief sunken -bd 1 \
	    -textvariable urel2 -bg bisque
    pack .coral.uname .coral.urel1 .coral.and .coral.urel2 -in .coral.second \
	    -side left -fill x -expand 1 -padx 2m -pady 1m

    # Buttons to Run or Cancel
    button .coral.run -text Run -command {
	# CHeck if all required entries are present
	if {($pname == "") || ($oname == "") || ($urel1 == "") || ($urel2 == "")} {
	    showmesg "Please enter the names of the mapping program and \
		    the files containing the unresolved entries."
	} else {
	    destroy .coral
	    statusWindow .info "Status" \
		    "The mapping program is being executed. Please wait ..."

	    # Run the mapping program
	    set olddir [pwd]
	    cd $datadir
	    exec coral -e -q -V -I -a empty -P -C -f $pname <quit
	    cd $olddir
	    destroy .info

	    # Check if any unresolved entries
	    set lnum1 [exec wc -l $datadir/$urel1]
	    set lnum2 [exec wc -l $datadir/$urel2]
	    if {([lindex $lnum1 0] < 2) || ([lindex $lnum2 0] < 2)} {
		showmesg "The mapping program has successfully mapped \
			all the entries of the two data sources."
	    } else {
		# Expand and trim the files
		trim $datadir/$oname
		trim $datadir/$urel1
		trim $datadir/$urel2

		dialog .unres "Unresolved Entries" "There are unresolved \
			entries in both the input files which have not \
			been mapped. If you would like to define some \
			mappings manually, click on YES. Otherwise, click \
			on NO." {} -1 YES NO

		if {$button == 0} {
		    resolve $oname $urel1 $urel2
		}
	    }
	}
    }
    
    button .coral.cancel -text Cancel -command {destroy .coral}

    pack .coral.run .coral.cancel -side left -in .coral.third \
	    -expand 1 -padx 3m -pady 1m

    # Finally grab focus
    tkwait visibility .coral
    grab set .coral
    tkwait window .coral
}

########################################################################

proc trim {fname} {
    set infile [open $fname r]
    set outfile [open "/tmp/zzz1" w]

    while {[gets $infile line] >= 0} {
	foreach elem $line {
	    puts -nonewline $outfile "$elem "
	}
	puts $outfile ""
    }

    close $infile
    close $outfile

    # Replace the input file with the output file
    exec rm -f $fname
    exec mv /tmp/zzz1 $fname
}

########################################################################

proc CoralGen {} {
    global iftype1 iftype2 maptablename unres1name unres2name idxFormat \
	    tmpdir maplist datadir button
    
    # Create a window
    toplevel .coral -bg red4
    wm title .coral "Specify Mappings"
    wm iconname .coral "Specify Mappings"

    frame .coral.first -relief raised -bg honeydew2 
    frame .coral.second -relief raised -bg honeydew2 
    frame .coral.third -relief raised -bg honeydew2 
    pack .coral.first .coral.second .coral.third -fill x -padx 1m -pady 1m

    frame .coral.list1 -relief raised -bg honeydew2
    frame .coral.list2 -relief raised -bg honeydew2
    pack .coral.list1 .coral.list2 -side left -in .coral.first

    label .coral.list1.lab1 -text "$iftype1 index" -bg honeydew2 -fg red4
    pack .coral.list1.lab1 -fill x
    frame .coral.list1.top -relief raised -bg honeydew2
    frame .coral.list1.bot -relief raised -bg honeydew2
    pack .coral.list1.top .coral.list1.bot
    listbox .coral.list1.list -relief raised -bd 1 \
	    -yscrollcommand ".coral.list1.scroll set" \
	    -font 9x15 -selectmode single -bg honeydew2
    scrollbar .coral.list1.scroll -command ".coral.list1.list yview" \
	    -bg honeydew2
    pack .coral.list1.scroll -side left -fill y -in .coral.list1.top
    pack .coral.list1.list -in .coral.list1.top -fill x -fill y
    label .coral.list1.lab2 -text "Selection : " -bg  honeydew2 -fg red4
    entry .coral.list1.entry -width 15 -relief sunken -bd 2 \
	    -textvariable idxvar1 -bg bisque
    pack .coral.list1.lab2 .coral.list1.entry -side left -in .coral.list1.bot \
	    -padx 2m -pady 1m



    label .coral.list2.lab1 -text "$iftype2 index" -bg honeydew2 -fg red4
    pack .coral.list2.lab1 -fill x
    frame .coral.list2.top -relief raised -bg honeydew2
    frame .coral.list2.bot -relief raised -bg honeydew2
    pack .coral.list2.top .coral.list2.bot
    listbox .coral.list2.list -relief raised -bd 1 \
	    -yscrollcommand ".coral.list2.scroll set" \
	    -font 9x15 -selectmode single -bg honeydew2
    scrollbar .coral.list2.scroll -command ".coral.list2.list yview" \
	    -bg honeydew2
    pack .coral.list2.scroll -side right -fill y -in .coral.list2.top
    pack .coral.list2.list -in .coral.list2.top -fill x -fill y
    label .coral.list2.lab2 -text "Selection : " -bg  honeydew2 -fg red4
    entry .coral.list2.entry -width 15 -relief sunken -bd 2 \
	    -textvariable idxvar2 -bg bisque
    pack .coral.list2.lab2 .coral.list2.entry -side left -in .coral.list2.bot \
	    -padx 2m -pady 1m
    
    

    frame .coral.mapops -relief raised -bg honeydew2
    frame .coral.maplist -relief raised -bg honeydew2
    pack .coral.mapops .coral.maplist -in .coral.second -fill x 

    button .coral.addmap -text "Add Mapping" -bg gray75 -fg IndianRed4 \
	    -command {
	if {($idxvar1 == "") || ($idxvar2 == "")} {
	    dialog .note Note "Please choose the attributes of both \
		    indexes before adding the mapping." {} 0 OK
	} else {
	    set elem [list $idxvar1 $idxvar2]
	    .coral.mlist insert end $elem
	}
    }
    button .coral.delmap -text "Delete Mapping" -bg gray75 -fg IndianRed4 \
	    -command {
	.coral.mlist delete active

    }
    pack .coral.addmap .coral.delmap -in .coral.mapops -side left -padx 2m \
	    -pady 1m -expand 1

    listbox .coral.mlist -relief raised -bd 1 \
	    -yscrollcommand ".coral.mscroll set" \
	    -font 9x15 -selectmode single -bg honeydew2
    scrollbar .coral.mscroll -command ".coral.mlist yview" -bg honeydew2
    pack .coral.mscroll -in .coral.maplist -side right -fill y
    pack .coral.mlist -in .coral.maplist -fill x

    # Last row of buttons

    button .coral.genmap -text "Generate Mapping Table" -bg gray75 \
	    -fg IndianRed4 -command {
	# Save the contents of the listbox containing the defined mappings
	set len [.coral.mlist index end]
	set i 0
	set maplist {}
	while {$i < $len} {
	    set maplist [lappend $maplist [.coral.mlist get $i]]
	    incr i
	}

	# Generate relations loaders
	statusWindow .info "Status" \
		"The $iftype1 index is being loaded..."

	set command "$LoadPgm($iftype1) [lindex $sourceTypes($iftype1) 2] \
		rel$iftype1 $tmpdir/$iftype1.P"
	eval $command
	destroy .info

	statusWindow .info "Status" \
		"The $iftype2 index is being loaded..."

	set command "$LoadPgm($iftype2) [lindex $sourceTypes($iftype2) 2] \
		rel$iftype2 $tmpdir/$iftype2.P"
	eval $command
	destroy .info

	# Generate coral mapping program
	statusWindow .info "Status" \
		"The coral mapping program is being generated..."
	GenCoralPgm 
	destroy .info

	# run the mapping program
	statusWindow .info "Status" \
		"The mapping program is being executed. Please wait ..."

	# Run the mapping program
        set olddir [pwd]
	cd $tmpdir
	catch {exec echo "quit." | coral -e -q -V -I -a empty -P -C -f $iftype1$iftype2.P > /dev/null}
	cd $olddir
	destroy .info

	# Move them into datadir
	catch {exec rm $datadir/$maptablename}
	catch {exec mv -f $tmpdir/$maptablename $datadir}
	catch {exec rm $datadir/$unres1name}
	catch {exec mv -f $tmpdir/$unres1name $datadir}
	catch {exec rm $datadir/$unres2name}
	catch {exec mv -f $tmpdir/$unres2name $datadir}

	# Check for unresolved and ask if to be resolved
	set lnum1 [exec wc -l $datadir/$unres1name]
	set lnum2 [exec wc -l $datadir/$unres2name]
	if {([lindex $lnum1 0] < 2) || ([lindex $lnum2 0] < 2)} {
	    showmesg "The mapping program has successfully mapped \
		    all the entries of the two data sources."
	} else {
	    # Expand and trim the files
	    trim $datadir/$maptablename
	    trim $datadir/$unres1name
	    trim $datadir/$unres2name

	    destroy .coral
	    destroy .map

	    dialog .unres "Unresolved Entries" "There are unresolved \
		    entries in both the input files which have not \
		    been mapped. If you would like to define some \
		    mappings manually, click on YES. Otherwise, click \
		    on NO." {} 1 YES NO
	    
	    if {$button == 0} {
		resolve $maptablename $unres1name $unres2name
	    }
	}
	
    }

    button .coral.cancel -text Cancel -bg gray75 -fg IndianRed4 -command {
	destroy .coral
    }
    pack .coral.genmap .coral.cancel -side left -in .coral.third \
	    -padx 2m -pady 1m -expand 1 


    # Default load of the index listboxes
    foreach item $idxFormat($iftype1) {
	.coral.list1.list insert end $item
    }
    foreach item $idxFormat($iftype2) {
	.coral.list2.list insert end $item
    }


    # Define key bindings
    bind .coral.list1.list <Double-1> {
	set sel [.coral.list1.list get active]
	set idxvar1 [lindex $sel 0]
    }
    
    bind .coral.list2.list <Double-1> {
	set sel [.coral.list2.list get active]
	set idxvar2 [lindex $sel 0]
    }


    # Finally grab focus
    tkwait visibility .coral
    grab set .coral
    tkwait window .coral

}

# This function actually creates a coral mapping program based on the user's
# choices about the index types and the mapping between attrs of the indexes.
proc GenCoralPgm {} {
    global iftype1 iftype2 maptablename unres1name unres2name tmpdir \
	    idxFormat maplist
    
    # Open output file for writing
    set f [open $tmpdir/$iftype1$iftype2.P w]
    
    puts $f "set(insert_mode)."
    puts $f "t_begin."
    puts $f "schema"
    puts $f "("
    puts -nonewline $f " rel$iftype1\("
    set tlist {}
    foreach item $idxFormat($iftype1) {
	lappend tlist [lindex $item 1]
    }
    puts -nonewline $f [GenComma $tlist]
    puts $f "),"

    puts -nonewline $f " rel$iftype2\("
    set tlist {}
    foreach item $idxFormat($iftype2) {
	lappend tlist [lindex $item 1]
    }
    puts -nonewline $f [GenComma $tlist]
    puts $f "),"

    puts $f " left$iftype1\(string, string),"
    puts $f " left$iftype2\(string, string),"
    puts $f " map(string, string)"
    puts $f ")."
    puts $f "t_commit."

    puts $f "consult(\"$iftype1.P\")."
    puts $f "consult(\"$iftype2.P\")."
    
    puts $f "module mapping."
    puts $f "export map(ff)."
    puts $f "export left$iftype1\(ff)."
    puts $f "export left$iftype2\(ff)."
    
    set numtype1 [llength $idxFormat($iftype1)]
    set numtype2 [llength $idxFormat($iftype2)]
    # Mapping table will contain pairs of CUSIP - so find the position of
    # this attribute in both types
    set cusipos1 [lsearch $idxFormat($iftype1) {CUSIP string}]
    set cusipos2 [lsearch $idxFormat($iftype2) {CUSIP string}]
    

    foreach item $maplist {
	set pos1 [FindPos [lindex $item 0] $iftype1]
	set pos2 [FindPos [lindex $item 1] $iftype2]
	set list1 [GenList X $numtype1 [list [list $pos1 A]]]
	set list2 [GenList Y $numtype2 [list [list $pos2 A]]]

	# Find the fields corr. to the cusips
	set f1 [lindex $list1 $cusipos1]
	set f2 [lindex $list2 $cusipos2]
	
	puts -nonewline $f "map( $f1, $f2 ) :- rel$iftype1\("
	puts -nonewline $f [GenComma $list1]
	puts -nonewline $f "),rel$iftype2\("
	puts -nonewline $f [GenComma $list2]
	puts $f ")."
    }

    # Find position of the name attr
    set namepos1 [lsearch $idxFormat($iftype1) {NAME string}]
    set namepos2 [lsearch $idxFormat($iftype2) {NAME string}]

    # Define the remainders
    set list1 [GenList X $numtype1 {}]
    set namef [lindex $list1 $namepos1]
    set cusipf [lindex $list1 $cusipos1]
    puts -nonewline $f "left$iftype1\( $cusipf, $namef ) :- rel$iftype1\("
    puts -nonewline $f [GenComma $list1]
    puts $f "), not map( $cusipf , Z )."

    set list2 [GenList X $numtype2 {}]
    set namef [lindex $list2 $namepos2]
    set cusipf [lindex $list2 $cusipos2]
    puts -nonewline $f "left$iftype2\( $cusipf, $namef ) :- rel$iftype2\("
    puts -nonewline $f [GenComma $list2]
    puts $f "), not map( $cusipf , Z )."
    
    puts $f "end_module."

    puts $f "write_table(map(X,Y), $maptablename , \"\")."
    puts $f "write_table(left$iftype1\(X,Y), $unres1name , \"\")."
    puts $f "write_table(left$iftype2\(X,Y), $unres2name , \"\")."

    puts $f "quit."

    close $f
}

# Function returns the position of the attribute with the given name 
# in the specified schema. For eg: position of CUSIP in COMPUSTAT is 2.
proc FindPos {attrname schemaname} {
    global idxFormat

    set slist $idxFormat($schemaname)
    set i 0
    set len [llength $slist]
    while {([lindex [lindex $slist $i] 0] != $attrname) && ($i < $len)} {
	incr i
    }
    if {$i == $len} {
	return -1
    } else {
	return $i
    }
}


# This generates a  parameter list. The names
# are created by appending a number to the symbol. The last parameter to this
# function is a list of special cases which are pairs of <position,symbol>
# Eg; GenList(X 3 {{1 A}}) will return {X0 A X2}
proc GenList {symbol len speclist} {
    set plist {}

    # First generate the default list
    set i 0
    while {$i < $len} {
	lappend plist $symbol$i
	incr i
    }

    # Now replace the special cases
    foreach item $speclist {
	set pos [lindex $item 0]
	set sbl [lindex $item 1]
	set plist [lreplace $plist $pos $pos $sbl]
    }

    # Finally create a comma separated string
    return $plist
}

# Given a list of strings, this function returns them separated by commas
proc GenComma {slist} {
    set retstr ""
    set comma ", "
    set pass 1
    foreach item $slist {
	if {$pass == 1} {
	    set retstr $item
	    incr pass
	} else {
	    set retstr $retstr$comma$item
	}
    }
    return $retstr 
}
