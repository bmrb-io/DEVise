#========================================================================
#  DEVise Data Visualization Software
#  (c) Copyright 1992-1996
#  By the DEVise Development Group
#  Madison, Wisconsin
#  All Rights Reserved.
#  ========================================================================
#
#  Under no circumstances is this software to be copied, distributed,
#  or altered in any way without prior permission from the DEVise
#  Development Group.

############################################################

#	$Id$	

#	$Log$
#	Revision 1.98  1996/11/26 09:36:37  beyer
#	control-c and q now quit devise when typed on the control panel.
#
#	Revision 1.97  1996/11/25 22:31:31  beyer
#	1. extended .devise.rc search
#	2. added DestroyView command
#	3. query window updated properly, history window update changed
#	4. filter properly set to (0,100) instead of (100,0) when high,low values
#	   are not known.
#
#	Revision 1.96  1996/11/20 20:35:35  wenger
#	Fixed bugs 062, 073, 074, and 075; added workaround for bug 063; make
#	some Makefile improvements so compile works first time; fixed up files
#	to correspond to new query catalog name.
#
#	Revision 1.95  1996/11/20 16:49:16  jussi
#	Changed display/layout mode control to be a button. Changed 'Working...'
#	message to be a Stop button which aborts all queries.
#
#	Revision 1.94  1996/11/03 02:41:50  kmurli
#	Modified to include the query schema level. Also modified to include DQL
#	processing
#
#	Revision 1.93  1996/09/27 15:51:36  wenger
#	Added "Memory leaks" and "Memory in use" menu selections and associated
#	Tcl "DEVise" commands (conditionaled out for commit).
#
#	Revision 1.92  1996/09/13 23:08:00  guangshu
#	Changed print menu to "print with map" and "print without map".
#
#	Revision 1.91  1996/08/29 22:27:35  guangshu
#	Changed puts to proc Puts in case the client wants to be quiet.
#
#	Revision 1.90  1996/08/28 00:20:01  wenger
#	Improved use of Dali to correctly free images (use of Dali is now fully
#	functional with filenames in data).
#
#	Revision 1.89  1996/08/07 15:34:44  guangshu
#	Add an menu item in SourceData to view the statistics in text form.
#
#	Revision 1.88  1996/07/23 20:13:34  wenger
#	Preliminary version of code to save TData (schema(s) and data) to a file.
#
#	Revision 1.87  1996/07/19 03:34:01  jussi
#	Added Line and LineShape shapes.
#
#	Revision 1.86  1996/07/16 23:48:07  jussi
#	Added Session/Save as Batch Script command.
#
#	Revision 1.85  1996/07/15 21:13:32  jussi
#	Fixed the ordering of size, pattern, and orientation in EditMapping.
#
#	Revision 1.84  1996/07/15 14:25:13  jussi
#	Added statement that sets the window title of the main
#	control panel.
#
#	Revision 1.83  1996/07/13 00:21:47  jussi
#	Added View/Color Statistics menu option.
#
#	Revision 1.82  1996/07/09 16:00:43  wenger
#	Added master version number and compile date to C++ code (also
#	displayed in the user interface); added -usage and -version
#	command line arguments; updated usage message.
#
#	Revision 1.81  1996/07/09 14:27:21  jussi
#	Added missing parameter to OpenNewDataSource call.
#
#	Revision 1.80  1996/07/02 22:37:53  jussi
#	Added missing global variable declaration.
#
#	Revision 1.79  1996/07/01 21:39:11  jussi
#	Fixed small bug when restoring a template.
#
#	Revision 1.78  1996/07/01 19:35:39  jussi
#	Added View/Cursor/Set Record Cursor menu option. Updated code
#	to reflect the new tdata constructor interface.
#
#	Revision 1.77  1996/06/27 22:53:48  jussi
#	Added XOR color support. Reduced number of shape attributes
#	in EditMapping from 10 to 4. The additional attributes should
#	be made editable via a pop-up menu at some later point.
#
#	Revision 1.76  1996/06/27 19:11:44  jussi
#	Removed Block and 3DVector shapes from DEViseShapes list.
#
#	Revision 1.75  1996/06/20 17:12:30  guangshu
#	Statistics is now a separate window instead of a cascaded menu.
#
#	Revision 1.74  1996/06/20 16:48:20  jussi
#	Replaced green1 with DarkSeaGreen.
#
#	Revision 1.73  1996/06/16 01:54:43  jussi
#	Added PolylineShape, PolylineFileShape, and TextLabelShape.
#
#	Revision 1.72  1996/06/15 14:26:01  jussi
#	Added View/Foreground and View/Background menu commands.
#
#	Revision 1.71  1996/06/15 07:15:33  yuc
#	Add 3D query to the system.
#
#	Revision 1.70  1996/06/12 14:57:56  wenger
#	Added GUI and some code for saving data to templates; added preliminary
#	graphical display of TDatas; you now have the option of closing a
#	session	in template mode without merging the template into the main
#	data catalog; removed some unnecessary interdependencies among include
#	files; updated the dependencies for Sun, Solaris, and HP; removed
#	never-accessed code in ParseAPI.C.
#
#	Revision 1.69  1996/05/31 15:49:03  jussi
#	Added menu options for SetLinkMaster and ResetLinkMaster.
#
#	Revision 1.68  1996/05/22 21:05:43  jussi
#	Added HighLow shape.
#
#	Revision 1.67  1996/05/16 21:39:05  wenger
#	implemented saving schemas ans session file for importing tdata
#
#	Revision 1.66  1996/05/11 19:08:37  jussi
#	Added replica management.
#
#	Revision 1.65  1996/05/11 03:03:49  jussi
#	Added restoring, template, and sessionName as global variables.
#	These used to be in TkControl.c. Changed DoClose and made it
#	use the new DEVise clearAll command. Changed DoOpen and made
#	it work without DEVise openSession and openTemplate commands.
#
#	Revision 1.64  1996/04/23 20:39:24  jussi
#	Added HorLine and Segment shapes.
#
#	Revision 1.63  1996/04/14 00:25:41  jussi
#	Removed call to clearInterp.
#
#	Revision 1.62  1996/04/11 18:22:58  jussi
#	Major changes in the organization of the user interface.
#
#	Revision 1.61  1996/03/07 16:58:49  jussi
#	Disabled Visualize/Obsolete and View/Background for the moment.
#	Added View/Dimensions.
#
#	Revision 1.60  1996/02/28 18:20:33  yuc
#	Added 2 new shapes: Block and 3DVector.
#
#	Revision 1.59  1996/02/25 23:03:45  jussi
#	Default tmpdir is "tmp", not ".". See Init.c.
#
#	Revision 1.58  1996/02/02 21:27:35  jussi
#	Interface to DoSetBgColor changed.
#
#	Revision 1.57  1996/02/02 17:53:07  jussi
#	Added block shape to DEViseShapes.
#
#	Revision 1.56  1996/01/30 21:07:46  jussi
#	Added a few colors and added menu option to change background
#	color of a view. Moved some procedures to views.tcl.
#
#	Revision 1.55  1996/01/25 20:27:59  jussi
#	Improved logic in selecting which .rc file to load.
#
#	Revision 1.54  1996/01/24 21:52:27  jussi
#	Layout of window preserved when window is duplicated.
#
#	Revision 1.53  1996/01/23 20:49:59  jussi
#	Added Visualize/Import. Split view-related procedures into
#	separate file views.tcl. Split general utilities into
#	file util.tcl. Split history-related procedures into file
#	history.tcl.
#
#	Revision 1.52  1996/01/19 18:58:51  jussi
#	Added ClearTopGroups.
#
#	Revision 1.51  1996/01/19 18:32:36  jussi
#	GetTDataTemplate now uses stream catalog and not files
#	directly. Fixed minor bug in session files and pixel
#	maps.
#
#	Revision 1.50  1996/01/18 18:02:05  jussi
#	Added View/Destroy but made it not accessible to the user
#	because of pending questions whether all necessary data
#	structures are deleted in response to such a command.
#
#	Revision 1.49  1996/01/17 18:05:14  jussi
#	Default UserMode value now set in control.tk.
#
#	Revision 1.48  1996/01/16 16:49:21  jussi
#	Added Cursor Delete. Made Switch TData work with data stream
#	definition catalog. Made Window Duplicate be more complete
#	(it now duplicates all view settings, including statistics,
#	labels, and axis settings).
#
#	Revision 1.47  1996/01/15 23:07:26  jussi
#	Hid obsolete visualization commands from the casual user.
#
#	Revision 1.46  1996/01/13 23:09:13  jussi
#	Added support for Z attribute and shape attribute 2.
#
#	Revision 1.45  1996/01/13 21:03:50  jussi
#	Default .rc file is now devise.rc. Session files are now smarter
#	about the TDatas they try to open; the absolute pathnames are no
#	longer stored in a session file, rather the display name is used.
#
#	Revision 1.44  1996/01/13 17:59:07  jussi
#	Initialization is read from devise.rc if no other .rc file
#	is found.
#
#	Revision 1.43  1996/01/09 16:39:51  jussi
#	Added support for Tcl expressions as mappings.
#
#	Revision 1.42  1995/12/29 17:30:53  jussi
#	Minor fixes. Changed format of computed names in UniqueName.
#
#	Revision 1.41  1995/12/22 18:08:51  jussi
#	Added Vector Shape. Fixed session file code; cursor names may
#	have spaces which used to break the session file.
#
#	Revision 1.40  1995/12/20 02:26:26  ravim
#	Variable to store temp. directory location added.
#
#	Revision 1.39  1995/12/18 03:12:46  ravim
#	Confidence intervals displayed.
#
#	Revision 1.38  1995/12/15 03:39:37  ravim
#	KGraph can display count. Schema browsing capabilities determined
#	by the user mode.
#
#	Revision 1.37  1995/12/14 15:46:35  jussi
#	Added support for TileLayout view layout with automatic or manual
#	layout control.
#
#	Revision 1.36  1995/12/12 01:47:18  ravim
#	Physical/logical schema support.
#
#	Revision 1.35  1995/12/08 23:47:46  ravim
#	Window name is passed as parameter in creating KGraph.
#
#	Revision 1.34  1995/12/07 02:17:07  ravim
#	User can choose the stats to be displayed.
#
#	Revision 1.33  1995/12/06 05:42:03  ravim
#	Added function to display a KGraph.
#
#	Revision 1.32  1995/12/04 18:04:45  jussi
#	User can now specify a view title which appears at the top of the view.
#	Changed statistics toggling to use getViewStatistics and
#	setViewStatistics so that a single view or all views can be toggled,
#	based on the status of the currently selected view.
#
#	Revision 1.31  1995/12/02 21:45:17  jussi
#	Added support for TK_WINDOW i.e. Tcl/Tk controls surrounding each
#	view and window.
#
#	Revision 1.30  1995/11/29 17:58:39  jussi
#	Slightly better interface to removing a window.
#
#	Revision 1.29  1995/11/29 17:49:48  jussi
#	Added RemoveWindow command.
#
#	Revision 1.28  1995/11/28 05:34:48  ravim
#	Support for statistics.
#
#	Revision 1.27  1995/11/28 00:03:41  jussi
#	Added printing of views to menu.
#
#	Revision 1.26  1995/11/27 15:21:12  jussi
#	Instead of reading a single, host-dependent config file, control.tk now
#	reads a common, host-independent config file, followed by a smaller
#	host-dependent config file *if one exists*.
#
#	Revision 1.25  1995/11/24  07:47:27  ravim
#	Mapping between different types of data sources can be defined.
#	Anything that cannot be resolved automatically can be handled manually.
#
#	Revision 1.24  1995/11/22 00:33:13  jussi
#	Fixed bug in function that saves session files; spaces embedded
#	in TData names needed to be protected by braces.
#
#	Revision 1.23  1995/11/21 23:36:19  jussi
#	Made complex mappings editable. Edit Mapping function now allows the
#	user to edit all parameters of an interpreted mapping. E.g. color can
#	be made to depend on an attribute in user data or constant. Made pixel
#	width and height information visible to the user.
#
#	Revision 1.22  1995/11/20 22:21:33  jussi
#	Added schemadir, cachedir, and sessiondir.
#
#	Revision 1.21  1995/11/19 06:03:59  ravim
#	New schema options - user/superuser
#
#	Revision 1.20  1995/11/14 22:53:17  jussi
#	Moved stream selection dialog to be part of macro definition
#	utility (DefSource in macrodef.tk). Elimininated 'Source'
#	menu bar and moved remaining menu option (Define Source)
#	to the Visualize menu (Sources... option).
#
#	Revision 1.19  1995/11/10 21:56:54  jussi
#	Minor fix.
#
#	Revision 1.18  1995/11/10 21:45:05  jussi
#	Changed interface to ISSM and Compustat to be through
#	sources.tcl.
#
#	Revision 1.17  1995/11/02 16:45:59  jussi
#	Removed confirmation message when removing a view from a window.
#	When moving a view from one window to another, current selection
#	determines the view to be moved; the user is not asked to select
#	a view from a list. Reorganized some View menu items.
#
#	Revision 1.16  1995/10/11 17:03:27  ravim
#	Schema browser invoked from the main menu bar.
#
#	Revision 1.15  1995/09/28 17:45:16  jussi
#	Added 'Save as Template' command. Minor other improvements.
#
#	Revision 1.14  1995/09/22 17:33:35  jussi
#	Added copyright message.
#
#	Revision 1.13  1995/09/21 15:36:16  jussi
#	Added import data types.
#
#	Revision 1.12  1995/09/19 16:56:18  jussi
#	Added interfacing to Compustat. Fixed bug in GetClass.
#
#	Revision 1.11  1995/09/13 14:24:56  jussi
#	Extracted macro definition code and moved it to macrodef.tk.
#	Added interfacing to SEQ and SQL queries.
#
#	Revision 1.10  1995/09/12 22:05:45  jussi
#	Fixed some problems in interfacing new user interface to
#	DEVise. New user interface was creating too many mapping
#	classes and instances of mappings.
#
#	Revision 1.9  1995/09/11 22:27:07  jussi
#	Further integration of the new user interface and DEVise.
#	User can now select 1 to n attributes in the automatic
#	map generator.
#
#	Revision 1.8  1995/09/08 22:17:57  jussi
#	Integrated creation of TData source, windows, and links in DEVise.
#
#	Revision 1.7  1995/09/08 20:35:25  jussi
#	Added definition of data source and size of new windows.
#
#	Revision 1.6  1995/09/07 22:59:41  jussi
#	Implemented saving and loading sessions (new type) and automatic
#	view creation.
#
#	Revision 1.5  1995/09/07 20:34:21  jussi
#	Finished an intermediate stage in designing an integrated
#	tdata/window/map/view/link definition.
#
#	Revision 1.4  1995/09/05 22:47:55  jussi
#	Added/updated CVS header.
#
#	Revision 1.3  1995/09/05 22:45:33  jussi
#	Updated CVS header.

############################################################
set libdir $env(DEVISE_LIB)
source $libdir/tool.tcl

set DEViseColors \
	{{1000 XOR} {0 black} {1 white} {2 red} {3 blue} {4 orange} \
	{5 tan} {6 green} {7 purple} {8 aquamarine} {9 peru} {10 chocolate} \
	{11 tomato} {12 pink} {13 plum} {14 azure1} {15 cyan1} {16 SeaGreen1} \
	{17 khaki1} {18 goldenrod1} {19 yellow} {20 sienna1} \
	{21 LightCoral} {22 AntiqueWhite} {23 LemonChiffon} {24 LightGray}\
	{25 Lavender} {26 LavenderBlush} {27 MistyRose} {28 NavyBlue} \
	{29 SlateBlue} {30 MediumBlue} {31 DeepSkyBlue} {32 SkyBlue} \
	{33 red1} {34 red2} {35 DarkSeaGreen} {36 green2} {37 blue1} \
	{38 blue2} {39 blue3} {40 blue4} {41 gold1} {42 gold2}}

set DEViseShapes \
	{{0 Rect} {1 RectX} {2 Bar} {13 Line} {14 {Line Shade}} \
        {3 {Regular Polygon}} {4 Oval} {5 Vector} {6 HorLine} \
        {7 Segment} {8 HighLow} {9 Polyline} {10 {Image}} \
	{11 {Polyline File}} {12 {Text Label}}}

# global variables:
# restoring: true if restoring session or template
# template: true if restoring template
# sessionName: name of current session
# curView: current view selected
# lastView: last view selected
# historyWinOpened: true if history window has been opened
# queryWinOpened: true if query window has been opened
# query3DWinOpened: true if 3D query window has been opened
# stackWinOpened: true if stack window has been opened
# helpWindowCreated: true if help window has been created.
# UserMode: 1 for end-user mode (logical schemas), 0 for
#           administrator mode (physical schemas)

set restoring 0
set template 0
set sessionName "session.tk"
set curView ""
set lastView ""
set historyWinOpened 0
set queryWinOpened 0
set query3DWinOpened 0
set stackWinOpened 0
set helpWindowCreated 0
set UserMode 1
set templateMode 0

# set statistics defaults
set statmean 0 
set statmax 1
set statmin 0
set statcurr 1
set statcilevel "000"

# set Kiviat graph defaults
set kval 0
set kcurr 1
set knew 0

set libdir "."
if { [info exists env(DEVISE_LIB)] } {
    set libdir $env(DEVISE_LIB)
}
set datadir "."
if { [info exists env(DEVISE_DAT)] } {
    set datadir $env(DEVISE_DAT)
}
set cachedir "."
if { [info exists env(DEVISE_CACHE)] } {
    set cachedir $env(DEVISE_CACHE)
}
set schemadir "."
if { [info exists env(DEVISE_SCHEMA)] } {
    set schemadir $env(DEVISE_SCHEMA)
}
set sessiondir "."
if { [info exists env(DEVISE_SESSION)] } {
    set sessiondir $env(DEVISE_SESSION)
}
set tmpdir "tmp"
if { [info exists env(DEVISE_TMP)] } {
    set tmpdir $env(DEVISE_TMP)
}

set hostCfg $libdir/config.tcl
if {![file exists $hostCfg]} {
    puts "Cannot read configuration file $hostCfg"
} else {
    Puts "Reading configuration file $hostCfg"
    source $hostCfg
}

if {![catch {set hostCfg $libdir/config.$env(HOSTNAME)}]} {
    if {[file exists $hostCfg]} {
	Puts "Reading configuration file $hostCfg"
	source $hostCfg
    }
}

source $libdir/dialog.tk
source $libdir/FSBox.tk
source $libdir/dialogList.tk
source $libdir/dialogParam.tk
source $libdir/dialogCkBut.tk
source $libdir/dialogMapping.tk
source $libdir/help.tk
source $libdir/macrodef.tk
source $libdir/sources.tcl
source $libdir/schema.tk
source $libdir/mapping.tk
source $libdir/util.tcl
source $libdir/views.tcl
source $libdir/save.tcl
source $libdir/history.tcl
source $libdir/query.tcl
source $libdir/window.tcl
source $libdir/tdata.tk
source $libdir/lens.tcl

set mode 0
DEVise changeMode $mode

set backGround DarkOliveGreen
set foreGround white

# read the .rc file
# we check the following in sequence:
# 1) if environment variable touuper($argv0)_RC exists, use it.
#	example: if progran name == afsio, check if environment variable
#       AFSIO_RC contains a valid filename
# 2) else, check .$argv0_rc
#	example: .afsio_rc
# 3) else, check $argv0_rc
#       example: afsio.rc
# 4) else, check devise.rc

set progName [ file tail $argv0 ]
set envName [ format "%s_RC" [string toupper $progName] ]
set rcFile1 [ format ".%s_rc" $progName ]
set rcFile2 [ format "%s.rc" $progName ]
set rcFile3 "devise.rc"
set rcFile4 "$env(HOME)/.$rcFile2"
set rcFile5 "$env(HOME)/.devise.rc"

if { [ info exists env($envName)] && [file exists $env($envName) ] } {
    set rcFile $env($envName)
} elseif { [ file exists $rcFile1 ] } {
    set rcFile $rcFile1
} elseif { [ file exists $rcFile2 ] } {
    set rcFile $rcFile2
} elseif { [ file exists $rcFile3 ] } {
    set rcFile $rcFile3
} elseif { [ file exists $rcFile4 ] } {
    set rcFile $rcFile4
} elseif { [ file exists $rcFile5 ] } {
    set rcFile $rcFile5
} else {
    set rcFile ""
}

if {$rcFile != ""} {
    Puts "Reading initialization file $rcFile"
    source $rcFile
}

# position main window and set up colors used by user interface

wm geometry . +0+0
tk_focusFollowsMouse

if {1} {
    tk_setPalette background $backGround foreground $foreGround \
	    selectBackground $foreGround selectForeground $backGround
    . configure -bg $backGround
}

if {0} {
    # Keep the following for monochrome model
    #set backGround white
    #set foreGround black
    #tk colormodel . monochrome
}

wm title . "DEVise"

bind . q DoExit
bind . <Control-c> DoExit
bind . <Control-C> DoExit

frame .mbar  -relief raised -bd 4 -bg green
frame .panel -bg white

pack .panel -side top -expand 0 -fill both
pack .mbar  -side top -expand 0 -fill x

menubutton .mbar.session -text Session -underline 0 \
	-menu .mbar.session.menu
menubutton .mbar.tdata -text SourceData -underline 0 \
	-menu .mbar.tdata.menu
menubutton .mbar.gdata -text GraphData -underline 0 \
	-menu .mbar.gdata.menu -state disabled
menubutton .mbar.view -text View -underline 0 \
	-menu .mbar.view.menu -state disabled
menubutton .mbar.window -text Window -underline 0 \
	-menu .mbar.window.menu
menubutton .mbar.help -text Help -underline 0 \
	-menu .mbar.help.menu

pack .mbar.session .mbar.tdata .mbar.gdata .mbar.view \
	.mbar.window .mbar.help -expand 1 -side left -fill x

menu .mbar.session.menu -tearoff 0
.mbar.session.menu add command -label "Open" -command {DoOpen 0}
.mbar.session.menu add command -label "Save" -command DoSave
.mbar.session.menu add command -label "Save as" -command {DoSaveAs 0 0 0 0}
.mbar.session.menu add command -label "Close" -command DoClose
.mbar.session.menu add separator
.mbar.session.menu add command -label "Open as Template" -command {DoOpen 1}
.mbar.session.menu add command -label "Save as Template" \
	-command {DoSaveAs 1 0 0 0}
.mbar.session.menu add command -label "Save as Batch Script" \
	-command {DoSaveAs 0 0 0 1}
.mbar.session.menu add separator

.mbar.session.menu add cascade -label "Export Template" \
	-menu .mbar.session.menu.exportMenu
menu .mbar.session.menu.exportMenu -tearoff 0
.mbar.session.menu.exportMenu add command -label "Without Data" \
	-command {DoSaveAs 0 1 0 0}
.mbar.session.menu.exportMenu add command -label "With Data" \
	-command {DoSaveAs 0 1 1 0}
.mbar.session.menu add command -label "Merge Template" \
	-command {DoTemplateMerge}
.mbar.session.menu add separator
.mbar.session.menu add command -label "Add Replica" -command { AddReplica }
.mbar.session.menu add command -label "Remove Replica" \
	-command { NotImplemented }
.mbar.session.menu add separator

.mbar.session.menu add cascade -label "Print" \
	-menu .mbar.session.menu.printMenu
menu .mbar.session.menu.printMenu -tearoff 0
.mbar.session.menu.printMenu add command -label "Without Map" \
	-command PrintView
.mbar.session.menu.printMenu add command -label "With Map" \
	-command PrintWithMap

.mbar.session.menu add command -label "Quit" -command DoExit

#.mbar.session.menu add separator
#.mbar.session.menu add command -label "Memory leaks" -command { DEVise new_leaks }
#.mbar.session.menu add command -label "Memory in use" -command { DEVise new_inuse }

menu .mbar.tdata.menu -tearoff 0
.mbar.tdata.menu add command -label "Import" -command { MacroImport 0 0 }

.mbar.tdata.menu add cascade -label "Schema" \
	-menu .mbar.tdata.menu.schemaMenu 

menu .mbar.tdata.menu.schemaMenu -tearoff 0

.mbar.tdata.menu.schemaMenu add command -label "Browse..." \
	-command SchemaBrowse
.mbar.tdata.menu.schemaMenu add separator
.mbar.tdata.menu.schemaMenu add command -label "Physical..." \
	-command {SchemaEdit 0}
.mbar.tdata.menu.schemaMenu add command -label "Logical..." \
	-command {SchemaEdit 1}
.mbar.tdata.menu.schemaMenu add command -label "Query..." \
	-command {SchemaEdit 2}

.mbar.tdata.menu add cascade -label "Mapping" \
	-menu .mbar.tdata.menu.mappingMenu

.mbar.tdata.menu add command -label "Define" -command { MacroImport 1 0 }
.mbar.tdata.menu add command -label "Save Data Stream" -command { SaveTData }
.mbar.tdata.menu add separator
.mbar.tdata.menu add command -label "Derived Data Text" -command { MacroImport 1 1 } 
.mbar.tdata.menu add command -label "Derived Data View" -command { MacroImport 0 1 }

menu .mbar.tdata.menu.mappingMenu -tearoff 0

.mbar.tdata.menu.mappingMenu add command -label "Define" \
	-command DefineMapping
.mbar.tdata.menu.mappingMenu add command -label "Resolve" \
	-command ResolveMapping

menu .mbar.gdata.menu -tearoff 0

.mbar.gdata.menu add command -label "Edit Mapping" -command DoEditMapping
.mbar.gdata.menu add command -label "Copy/Edit" -command DoViewCopy
.mbar.gdata.menu add command -label "Switch TData" -command DoSwitchTData

menu .mbar.view.menu -tearoff 0

#.mbar.view.menu add command -label "XAxis" -command { DoViewAxis x }
#.mbar.view.menu add command -label "YAxis" -command { DoViewAxis y }
.mbar.view.menu add cascade -label "Toggle X Axis" \
	-menu .mbar.view.menu.xaxismenu
.mbar.view.menu add cascade -label "Toggle Y Axis" \
	-menu .mbar.view.menu.yaxismenu

.mbar.view.menu add separator
.mbar.view.menu add cascade -label "Links" \
	-menu .mbar.view.menu.linkMenu 

menu .mbar.view.menu.linkMenu -tearoff 0
.mbar.view.menu.linkMenu add command -label "Link" -command DoViewLink
.mbar.view.menu.linkMenu add command -label "Unlink" -command DoViewUnlink
.mbar.view.menu.linkMenu add separator
.mbar.view.menu.linkMenu add command -label "Set Master" \
	-command { DoSetLinkMaster }
.mbar.view.menu.linkMenu add command -label "Reset Master" \
	-command { DoResetLinkMaster}

.mbar.view.menu add separator
.mbar.view.menu add cascade -label "Cursor" \
	-menu .mbar.view.menu.cursorMenu 
.mbar.view.menu add separator
.mbar.view.menu add command -label "Destroy View" -command {
    global curView
    DestroyView $curView
}


menu .mbar.view.menu.cursorMenu -tearoff 0
.mbar.view.menu.cursorMenu add command -label "Create" -command DoCursorCreate
.mbar.view.menu.cursorMenu add command -label "Delete" -command DoCursorDelete
.mbar.view.menu.cursorMenu add separator
.mbar.view.menu.cursorMenu add command -label "Set Source" \
	-command DoSetCursorSrc
.mbar.view.menu.cursorMenu add command -label "Set Destination" \
	-command DoSetCursorDst
.mbar.view.menu.cursorMenu add separator
.mbar.view.menu.cursorMenu add command -label "Set Record Cursor" \
	-command DoSetRecordCursor

.mbar.view.menu add separator
.mbar.view.menu add command -label "Statistics" -command { DoStat }
.mbar.view.menu add command -label "Color Statistics" -command { DoColorStat }
.mbar.view.menu add cascade -label "Kiviat Graph" -menu .mbar.view.menu.kmenu
.mbar.view.menu add separator
.mbar.view.menu add command -label "Foreground..." -command DoSetFgColor
.mbar.view.menu add command -label "Background..." -command DoSetBgColor
.mbar.view.menu add cascade -label "Dimensions" -menu .mbar.view.menu.dimmenu
.mbar.view.menu add command -label "Title" -command DoSetTitle
.mbar.view.menu add command -label "Color Override" -command DoSetOverrideColor
.mbar.view.menu add command -label "3D Query" -command Do3DQuery

#.mbar.view.menu add command -label "Action" -command DoViewAction
#.mbar.view.menu add command -label "Save Pixmap" -command DoSavePixmap
#.mbar.view.menu add command -label "Load Pixmap" -command DoLoadPixmap

menu .mbar.view.menu.xaxismenu -tearoff 0 
.mbar.view.menu.xaxismenu add command -label "Current View"  \
	-command { DoToggleAxis X }
.mbar.view.menu.xaxismenu add command -label "All Views" \
	-command { DoToggleAxisAllViews X }

menu .mbar.view.menu.yaxismenu -tearoff 0 
.mbar.view.menu.yaxismenu add command -label "Current View" \
	-command { DoToggleAxis Y }
.mbar.view.menu.yaxismenu add command -label "All Views" \
	-command { DoToggleAxisAllViews Y }

menu .mbar.view.menu.kmenu -tearoff 1
.mbar.view.menu.kmenu add radiobutton -label Mean -variable kval -value 0
.mbar.view.menu.kmenu add radiobutton -label Max -variable kval -value 1
.mbar.view.menu.kmenu add radiobutton -label Min -variable kval -value 2
.mbar.view.menu.kmenu add radiobutton -label Count -variable kval -value 3
.mbar.view.menu.kmenu add separator
.mbar.view.menu.kmenu add radiobutton -label "Use Current" \
	-variable kcurr -value 1
.mbar.view.menu.kmenu add radiobutton -label "Specify Views" \
	-variable kcurr -value 0
.mbar.view.menu.kmenu add separator
.mbar.view.menu.kmenu add radiobutton -label "New Graph" \
	-variable knew -value 1
.mbar.view.menu.kmenu add radiobutton -label "Reuse Graph" \
	-variable knew -value 0
.mbar.view.menu.kmenu add separator
.mbar.view.menu.kmenu add command -label "Apply..." \
	-command {ShowKGraph}

menu .mbar.view.menu.dimmenu -tearoff 0
.mbar.view.menu.dimmenu add command -label "Two Dimensions" \
	-command { DoSetViewDimensions 2 }
.mbar.view.menu.dimmenu add command -label "Three Dimensions" \
	-command { DoSetViewDimensions 3 }

menu .mbar.window.menu -tearoff 0
.mbar.window.menu add command -label "Layout" -command { SetWindowLayout "" }
.mbar.window.menu add command -label "Remove" -command { RemoveWindow "" }
.mbar.window.menu add command -label "Duplicate" -command DupWindow
.mbar.window.menu add separator

.mbar.window.menu add command -label "Stack Control" \
	-command { DoWindowStackControl }
######################MODIFIED SSL 11/3########################################
.mbar.window.menu add command -label "Lens Control" \
	-command { DoWindowLensControl }
######################MODIFIED SSL 11/3########################################
.mbar.window.menu add separator
.mbar.window.menu add command -label "Swap Views" -command DoSwapView
.mbar.window.menu add command -label "Move View" -command DoViewMove
.mbar.window.menu add command -label "Remove View" -command DoViewRemove
.mbar.window.menu add command -label "Bring View Back" -command DoBringView

menu .mbar.help.menu -tearoff 0
.mbar.help.menu add command -label "Demo" -command DoDemo
.mbar.help.menu add command -label "Help" -command DoHelp
.mbar.help.menu add command -label "History" -command OpenHistory

tk_menuBar .mbar .mbar.session .mbar.tdata .mbar.view \
	.mbar.link .mbar.window .mbar.help
focus .mbar

# build control panel

frame .panel.query    -relief sunken
frame .panel.center   -relief sunken
frame .panel.messages -relief sunken

pack .panel.query    -side left -expand 0 -fill y
pack .panel.center   -side left -expand 1 -fill both
pack .panel.messages -side left -expand 0 -fill y

button .panel.query.button -text "Query" -width 7 -relief raised \
	-font -*-times-medium-r-normal--*-200-*-*-*-*-*-* \
	-highlightthickness 0 -bd 3 -command { SetQuery }
button .panel.query.button2 -text "Mapping" -width 7 -relief raised \
	-font -*-times-medium-r-normal--*-200-*-*-*-*-*-* \
	-highlightthickness 0 -bd 3 -command { DoEditMapping } \
	-state disabled

pack .panel.query.button .panel.query.button2 -side top -padx 2m -pady 1m

label .panel.center.dummy -text "" -font 5x7

button .panel.center.label -text DEVise \
        -font -*-times-medium-i-normal--*-300-*-*-*-*-*-* \
	-bd 0 -highlightthickness 2 -activebackground $backGround \
	-highlightcolor red -command { AboutDevise }

set version [DEVise version]
set compDate [DEVise compDate]
label .panel.center.version -text "Version $version: $compDate" \
        -font -*-times-medium-r-normal--*-120-*-*-*-*-*-*

set copyright [DEVise copyright]
label .panel.center.copyright \
	-text "$copyright DEVise Development Group" -font 5x7

pack  .panel.center.dummy -side top -expand 0 -fill x
pack  .panel.center.label -side top -expand 1 -fill both -ipadx 100 -padx 0 \
	-pady 0
pack  .panel.center.version -side top -expand 0 -fill x
pack  .panel.center.copyright -side top -expand 0 -fill x

button .panel.messages.mode -text Display -width 7 -relief raised \
        -font -*-times-medium-r-normal--*-200-*-*-*-*-*-* \
	-highlightthickness 0 -bd 3 -command { ChangeMode }
button .panel.messages.status -text "" -width 7 -relief flat -bd 3 \
        -font -*-times-medium-r-normal--*-200-*-*-*-*-*-* \
        -state disabled -highlightthickness 0 -command { AbortAllQueries }

pack .panel.messages.mode .panel.messages.status -side top -padx 2m -pady 1m

proc ChangeMode {} {
    global mode
    if { $mode == 0 } {
	set mode 1
        .panel.messages.mode configure -text Layout -fg red \
                -activeforeground red
    } else {
	set mode 0
        .panel.messages.mode configure -text Display -fg white \
                -activeforeground white
	RefreshAllViews
    }
    DEVise changeMode $mode
}

proc ChangeStatus { status } {
    if { $status == 0 } {
	.panel.messages.status configure -text "" -fg white \
                -activeforeground white -relief flat -state disabled
        Update3DLocation
        Update2DQueryWindow
        UpdateHistoryWindow
    } else {
	.panel.messages.status configure -text "Stop" -fg red \
                -activeforeground red -relief raised -state normal
    }
}

proc AbortAllQueries {} {
    set views [ViewSet]
    foreach view [ViewSet] {
        DEVise abortQuery $view
    }
}

# Return name of file type, or ""
proc ImportFileType {} {
    global fsBox schemadir
    set fsBox(path) $schemadir/logical
    set fsBox(pattern) *
    set ftypeFile [FSBox "Select schema file"]
    if {$ftypeFile == ""} {
	return
    }
    
    set result [DEVise importFileType $ftypeFile]
    if {$result == ""} {
	dialog .fileTypeError "Schema File Error" \
		"Error reading schema file $ftypeFile" \
		"" 0 OK
	return
    }
    return $result
}

# Check to see if file already exists 
proc FileExist { file } {
    foreach tdata [TdataSet] {
	if {$file == [DEVise tdataFileName $tdata]} {
	    return 1
	}
    }
    return 0
}

# Find default X attribute name.
# The default is the sorted X attribute other than recId, if one exists.
# Otherwise, it's the recId.
# otherwise, it's the 0th attribute.

proc FindDefaultXAttr { attrs } {
    set numAttrs 0
    foreach attr $attrs {
	if { [lindex $attr 2] > 0 } {
	    set temp($numAttrs) [lindex $attr 0]
	    incr numAttrs
	    if {$numAttrs >= 2 } {
		break
	    }
	}
    }
    if { $numAttrs == 0 } {
	# puts "numAttrs == 0"
	return [lindex [lindex $attrs 0] 0]
    } elseif { $numAttrs == 1 } {
	# puts "numAttrs == 1"
	return $temp(0)
    } else {
	# puts "numAttrs >= 2"
	if { $temp(0) == "recId"} {
	    return $temp(1)
	} else {
	    return $temp(0)
	}
    }
}

# Do editing for mapping
proc DoEditMapping {} {
    global dialogParamVar dialogListVar DEViseColors DEViseShapes curView
    global sourceList derivedSourceList

    if {![CurrentView]} {
	return
    }

    # Get mapping for the view (first one)
    set map [lindex [DEVise getViewMappings $curView] 0]
    
    # See if map is interpreted
    set found 0
    foreach m [InterpretedGData] {
	if {$m == $map} {
	    set found 1
	    break
	}
    }
    if {!$found} {
	dialog .editError "Mapping Not Interpreted" \
		"View has a compiled mapping which cannot be edited." "" 0 OK
	return
    }
    
    # Get parameters for the mapping
    set params [DEVise getInstParam $map]
    if {$params == ""} {
	dialog .editError "No Mapping Parameters" \
		"Mapping has no parameters." "" 0 OK
	return
    }

    set xParm [lindex [lindex $params 3] 1]
    set yParm [lindex [lindex $params 4] 1]
    set zParm [lindex [lindex $params 5] 1]
    set colorParm [findNameValue $DEViseColors [lindex [lindex $params 6] 1]]
    set sizeParm [lindex [lindex $params 7] 1]
    set patternParm [lindex [lindex $params 8] 1]
    set orientParm [lindex [lindex $params 9] 1]
    set shapeParm [findNameValue $DEViseShapes [lindex [lindex $params 10] 1]]
    set shapeAttr0 [lindex [lindex $params 11] 1]
    set shapeAttr1 [lindex [lindex $params 12] 1]
    set shapeAttr2 [lindex [lindex $params 13] 1]
    set shapeAttr3 [lindex [lindex $params 14] 1]

    set tdata [lindex [lindex $params 0] 1]

    set err [catch {set sfname [lindex $sourceList($tdata) 3]}]
    if {$err > 0} {
	set sfname [lindex $derivedSourceList($tdata) 3]
    }
    set schemaname [file tail $sfname]

    # set attrs [DEVise getSchema $tdata]
    set parm [dialogMapping .editMapping "Edit Mapping" \
	    "Edit Mapping" ""   \
	    $schemaname \
	    [list \
	    [list X {0 1 2 3 4 5 6 7 8 9 10} $xParm] \
	    [list Y {0 1 2 3 4 5 6 7 8 9 10} $yParm] \
	    [list Z {0 1 2 3 4 5 6 7 8 9 10} $zParm] \
	    [list Color $DEViseColors $colorParm] \
	    [list Size {0 1 2 3 4} $sizeParm] \
	    [list Pattern {0 1 2 3 4 5 6 7 8 9 10} $patternParm] \
	    [list Orientation {1} $orientParm] \
	    [list Shape $DEViseShapes $shapeParm] \
	    [list "ShapeAttr0" {0 0.1 0.5 1 2} $shapeAttr0] \
	    [list "ShapeAttr1" {0 0.1 0.5 1 2} $shapeAttr1] \
	    [list "ShapeAttr2" {0 0.1 0.5 1 2} $shapeAttr2] \
	    [list "ShapeAttr3" {0 0.1 0.5 1 2} $shapeAttr3] \
	    ] 0 ]
    
    if {$parm == ""} {
	return
    }

    # extract parameters
    set params [list [lindex [lindex $params 0] 1] \
	    [lindex [lindex $params 1] 1] \
	    [lindex [lindex $params 2] 1] \
	    [lindex $parm 0] \
	    [lindex $parm 1] \
	    [lindex $parm 2] \
	    [findNumericValue $DEViseColors [lindex $parm 3]] \
	    [lindex $parm 4] \
	    [lindex $parm 5] \
	    [lindex $parm 6] \
	    [findNumericValue $DEViseShapes [lindex $parm 7]] \
	    [lindex $parm 8] [lindex $parm 9] \
	    [lindex $parm 10] [lindex $parm 11] \
	]

    # Change parameter
    set cmd "DEVise changeParam \{$map\} $params"
    set result [eval $cmd]
    
    # Refresh all views that use this mapping
    set views [ViewSet]
    foreach view $views {
	set mappings [DEVise getViewMappings $view]
	set contains 0
	foreach m $mappings {
	    if {$m == $map} {
		set contains 1
		break
	    }
	}
	if {$contains > 0} {
	    DEVise invalidatePixmap $view
	    DEVise refreshView $view
	}
    }
}

# Close current session
proc DoClose {} {
    global sessionName templateMode datadir sourceList

    if {$templateMode} {	
	set but [dialog .open "Merge Data" \
	   "If you Close without Merging, you will lose access to this data" \
	   "" 0 "Cancel" "Close" "Merge, then Close"]
	if {$but == 0} {
	    return 0
	} elseif {$but == 1} {
	    # Just allow the close to continue.
	} elseif {$but == 2} {
	    DoTemplateMerge
	}
    }	

    set but [dialog .open "Close Session" "Close Current Session?" \
	    "" 1 Cancel Ok ]
    if { $but == 0 } {
	return 0
    }
    
    ProcessViewSelected ""
	
	DEVise clearAll

    set sessionName "session.tk"

    if {$templateMode} {
	unset sourceList
	set sourceFile $datadir/sourcedef.tcl
	if {[file exists $sourceFile]} {
	    Puts "Using data stream catalog $sourceFile"
	    source $sourceFile	
	}
	set templateMode 0
    }

    return 1
}

# Do open a session file
proc DoOpen { asTemplate } {
    global fsBox sessiondir restoring template sessionName errorInfo

    if {[DEVise getWinCount] > 1 && ![DoClose]} {
	# abort opening a new session
	return
    }
    
    # Get a session file name
    set fsBox(path) $sessiondir
    set fsBox(pattern) *.tk
    set file [ FSBox "Select session file" ]
    
    if {$file == ""} {
	return
    }

    set sessionName "session.tk"
    set restoring 1
    if {$asTemplate} {
	set template 1
    }
    Puts "Restoring session from $file"
    set err [ catch { source $file } ]
    set restoring 0
    set template 0

    if {!$err} {
	set sessionName $file
    } else {
	puts "Could not restore session"
        puts $errorInfo
    }
}

proc DoDemo {} {
    global libdir fsBox
    set fsBox(path) $libdir/demo
    DoOpen 0
}

# Find a view that uses the specified TData, the mapping class, and
# the specified viewClass.
proc GetView { tdata mapClass viewClass } {
    set views [DEVise get view $viewClass]
    foreach view $views {
	if { ![DEVise isMapped $view] } {
	    # view not yet mapped, see if we can use it.
	    set map [lindex [DEVise getViewMappings $view] 0]
	    set viewMapClass [GetClass mapping $map]
	    set mapParam [DEVise getCreateParam mapping $mapClass $map]
	    set viewTData [lindex $mapParam 0]
	    if {$mapClass == $viewMapClass && $viewTData == $tdata} {
		# found
		return $view
	    }
	}
    }

    # not found
    return ""
}

# Find a mapping (GData)that uses the specified TData, and the mapping class
proc GetMapping { tdata mapClass} {
    set maps [DEVise get mapping $mapClass]
    foreach map $maps {
	set mapParam [DEVise getCreateParam mapping $mapClass $map]
	set viewTData [lindex $mapParam 0]
	if {[string compare $viewTData $tdata] == 0 } {
	    # found
	    return $map
	}
    }

    # not found
    return ""
}

# Switch to a different TData for current view.
# We implement it by creating a new view and putting it it place
# of the current one

proc DoSwitchTData {} {
    global curView dialogListVar

    if {![CurrentView]} {
	return
    }
    
    set tdata ""

    set tdataSet [TdataSet]
    if {[llength $tdataSet] > 1} {
	set answer [ dialogList .selectTData "Open Data Streams"  \
		"Select a data stream" \
		"" 2 { Other Cancel Ok } $tdataSet ]
	if {$answer == 1 || $dialogListVar(selected) == ""} {
	    return
	}
	if {$answer == 2} { 
	    set tdata $dialogListVar(selected)
	} else {
	    set tdata ""
	}
    }

    if {$tdata == ""} {
	set tdata [OpenNewDataSource 0]
    }

    if {$tdata == ""} { return }

    # Get mapping for the view
    set map [lindex [DEVise getViewMappings $curView] 0]
    
    # Compare the schema of the tdata
    set curMapClass [GetClass mapping $map]
    # puts "curMapClass $curMapClass tdata $tdata"
    set curMapParam [DEVise getCreateParam mapping $curMapClass $map]
    set curViewTData [lindex $curMapParam 0]
    
    if {$curViewTData == $tdata} {
	dialog .switchTDataErr "Same Data Stream" \
		"You have selected the same data stream." "" 0 OK
	return
    }
    
    set viewTDataClass [GetClass tdata $curViewTData]
    set tdataClass [GetClass tdata $tdata]
    if {$viewTDataClass != $tdataClass} {
	dialog .switchTDataErr "Incompatible Data Stream" \
		"The selected data stream has type $tdataClass,\n\
		incompatible with the tdata in the view." "" 0 OK
	return
    }
    
    # See if the new view is already created.
    set view [GetView $tdata $curMapClass [GetClass view $curView]]
    if {$view == ""} {
	# need to create a new view
	# First, see if we need to create a new GData
	set mapName [GetMapping $tdata $curMapClass]
	if {$mapName == ""} { 
	    # create a new mapping.
	    set mapName [UniqueName "$tdata#$curMapClass"]
	    set newMapParam [linsert [lrange $curMapParam 2 end] 0 $tdata \
		    $mapName]
	    set cmd "DEVise create mapping $curMapClass $newMapParam"
	    set result [eval $cmd]
	    if {$result == ""} {
		dialog .createError "Mapping Error" \
			"Can't create mapping." "" 0 OK
		return
	    }
	}

	# Create a new view
	set curViewClass [GetClass view $curView]
	set curViewParam [DEVise getCreateParam view $curViewClass $curView]
	set view [UniqueName $curView]
	set newViewParam [linsert [lrange $curViewParam 1 end] 0 $view]
	set cmd "DEVise create view $curViewClass $newViewParam"
	set result [eval $cmd]
	if {$result == ""} {
	    dialog .createError "View Error" "Can't create view." "" 0 OK
	    return
	}

	set viewLabelParams [DEVise getLabel $curView]
	eval DEVise setLabel {$view} $viewLabelParams
	set viewStatParams [DEVise getViewStatistics $curView]
	eval DEVise setViewStatistics {$view} $viewStatParams
	set stat [DEVise getAxisDisplay $curView X]
	eval DEVise setAxisDisplay {$view} X $stat
	set stat [DEVise getAxisDisplay $curView Y]
	eval DEVise setAxisDisplay {$view} Y $stat
	
	DEVise insertMapping $view $mapName
    } 

    # select new view
    if {$view != ""} {
	DEVise replaceView $curView $view
	set curView ""
	ProcessViewSelected $view
    }
}

############################################################

proc GetTDataTemplate {type total num} {
    global sourceList

    while {1} {
	set title ""
	if {$total > 0} {
	    set title "Select file $num of $total, type $type"
	}
	set sname [selectStream $title]

	if {$sname == ""} {
	    return ""
	}

	# must choose a single data stream
	if {[llength $sname] > 1} {
	    dialog .singleStream "Select Single Stream" \
		    "You have selected more than one data stream.\
		    Please select a single data stream." "" 0 Continue
	    continue
	}
	set sname [lindex $sname 0]

	# see if data stream already open
	if {[lsearch [TdataSet] $sname] >= 0} {
	    dialog .fileExist "Data Stream Open" \
		    "Data stream $sname already open.\n\
		    Please select another stream." "" 0 Continue
	    continue
	}

	set schema [lindex $sourceList($sname) 2]
	if {$type != $schema} {
	    dialog .fileExist "Incorrect Schema" \
		    "Schema of data stream\n\
		    $sname\n\
		    is not $type.\n\
		    Please select another stream." "" 0 Continue
	    continue
	}

	break
    }

    # make sure data is cached on disk
    set sourcedef [OpenDataSource $sname]
    if {$sourcedef == ""} {
	return ""
    }

    set sname [lindex $sourcedef 0]
    set param [lindex $sourcedef 1]
    set stype [lindex $sourcedef 2]

    statusWindow .info "Status" \
	    "Creating an index on $sname.\n\n\
	    This may take a while."
    DEVise create tdata $type $sname $stype $param
    catch {destroy .info}

    return $sname
}

############################################################

proc AddReplica {} {
    global replicaHost replicaPort

    if {[WindowVisible .replica]} {
	return
    }

    toplevel .replica
    wm title .replica "Add Replica Server"
    wm geometry .replica +50+50

    frame .replica.top
    frame .replica.bot
    pack .replica.top -side top -pady 3m -fill both -expand 1
    pack .replica.bot -side top -pady 5m -fill x

    frame .replica.bot.but
    pack .replica.bot.but -side top

    label .replica.top.l1 -text "Hostname:"
    entry .replica.top.e1 -relief sunken -width 10 -textvariable replicaHost
    label .replica.top.l2 -text "Port:"
    entry .replica.top.e2 -relief sunken -width 6 -textvariable replicaPort
    pack .replica.top.l1 .replica.top.e1 .replica.top.l2 .replica.top.e2 \
	 -side left -padx 3m -fill x -expand 1

    set replicaHost ""
    set replicaPort 6100

    button .replica.bot.but.ok -text OK -width 10 -command {
	if {$replicaHost == "" || $replicaPort == ""} {
	    dialog .missingParms "Missing Parameters" \
	    "Please specify replica server name and port." \
	    "" 0 OK
	    return
	}
	DEVise addReplicaServer $replicaHost $replicaPort
	destroy .replica
    }
    button .replica.bot.but.cancel -text Cancel -width 10 -command {
	destroy .replica
    }
    pack .replica.bot.but.ok .replica.bot.but.cancel \
	    -side left -padx 3m
}

############################################################

proc NotImplemented {} {
    dialog .notImplemented "Not Implemented" \
	    "This feature not implemented yet." \
	    "" 0 OK
}

############################################################

proc GetTkControlMargins {type} {
    # a view has left and bottom margin controls
    if {$type == "View"} {
	return "5 5 5 20"
    }

    # a window has bottom margin controls
    return "0 0 0 20"
}

############################################################

proc CreateTkControlWindows {name w h margins} {
    set lm [lindex $margins 0]
    set rm [lindex $margins 1]
    set tm [lindex $margins 2]
    set bm [lindex $margins 3]

    set controls ""
    if {$lm > 0} { lappend controls "left" }
    if {$rm > 0} { lappend controls "right" }
    if {$tm > 0} { lappend controls "top" }
    if {$bm > 0} { lappend controls "bottom" }

    foreach side $controls {
	toplevel "$name-$side"
	wm title "$name-$side" "$name-$side"
	pack propagate "$name-$side" 0
    }

    # force new window to screen so that ViewWin.c can reparent
    # a data display subwindow to this window

    update
}

############################################################

proc CreateTkMarginControls {name type w h} {
    set margins [GetTkControlMargins $type]
    CreateTkControlWindows $name $w $h $margins
    UpdateTkControlMargins $name $type $w $h

    if {$type == "View"} {
	frame "$name-bottom.frame" -relief groove -borderwidth 1
	pack "$name-bottom.frame" -side left -fill both -expand 1
	pack propagate "$name-bottom.frame" 0
	button "$name-bottom.frame.zoominx" -text "X-" \
		-command ProcessInButton
	button "$name-bottom.frame.zoomoutx" -text "X+" \
		-command ProcessOutButton
	button "$name-bottom.frame.zoominy" -text "Y-" \
		-command ProcessYInButton
	button "$name-bottom.frame.zoomouty" -text "Y+" \
		-command ProcessYOutButton  
	pack "$name-bottom.frame.zoominx" "$name-bottom.frame.zoomoutx" \
		"$name-bottom.frame.zoominy" "$name-bottom.frame.zoomouty" \
		-side left -padx 0m
    } else {
	button "$name-bottom.print" -text print -command PrintView
	button "$name-bottom.remove" -text remove -command {RemoveWindow ""}
	pack "$name-bottom.print" "$name-bottom.remove" -side left
    }

    return $margins
}

############################################################

proc UpdateTkControlMargins {name type w h} {
    set margins [GetTkControlMargins $type]
    set lm [lindex $margins 0]
    set rm [lindex $margins 1]
    set tm [lindex $margins 2]
    set bm [lindex $margins 3]

    set controls [list \
	    [list left 0 $tm $lm [expr $h - $tm - $bm]] \
	    [list right [expr $w - $rm] $tm $rm [expr $h - $tm - $bm]] \
	    [list top 0 0 $w $tm] \
	    [list bottom 0 [expr $h - $bm] $w $bm]]

    foreach control $controls {
	set side [lindex $control 0]
	set x [lindex $control 1]
	set y [lindex $control 2]
	set width [lindex $control 3]
	set height [lindex $control 4]
	# see if window exists
	set err [catch {set exists [wm state "$name-$side"]}]
	if {!$err} {
	    wm geometry "$name-$side" [format "=%dx%d+%d+%d" \
		    $width $height $x $y]
	}
    }
}

############################################################

proc ShowKGraph {} {
    global curView kval kcurr knew

    if {$kcurr == 0} {
	# Find out the views on which to build the KGraph
	dialog .showKGraph "Error " "Selecting specific views to \
		display is not yet implemented" "" 0 { OK }
	return
    }

    if {![CurrentView]} {
	return
    }

    # Form graph out of all the views in the current window
    set win [DEVise getViewWin $curView]
    set vlist [DEVise getWinViews $win]

    # Pass list of view names and also stat number
    set cmd "DEVise showkgraph $knew $kval {$win} $vlist"
    eval $cmd
}
