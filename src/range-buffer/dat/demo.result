
/************************************************************************/
/*		    	Range Buffer Manager Demo		  	*/
/************************************************************************/

/************************************************************************/
/* DEMO 1: Query on Object 1. The first attr is the Bounding Box Attr.	*/
/* Issue the following query:						*/
/* In = (50, 60) ; NotIn = empty					*/
/*									*/
/* Based on our input files, There should be 0 record returned.		*/
/************************************************************************/
/* What this demo shows:						*/
/*									*/
/* RangeBufferManagerAccessMethod can understand the query passed in 	*/
/* correctly and can respond correctly when there is no record that	*/
/* satisfy the query.							*/
/************************************************************************/

Query Result Records:

End of all memory residing records.

End of records fetched from low level and end of all records.

Total number of records = 0

DEMO 1 ended successfully!


/************************************************************************/
/* DEMO 2: Query on Object 1. The first attr is the Bounding Box Attr.	*/
/* Issue the following query:						*/
/* In = [40, 45) ; NotIn = empty					*/
/*									*/ 
/* Based on our input files, 10 records should be returned, all of 	*/
/* which are fetched from lower level.					*/
/************************************************************************/
/* What this demo shows:						*/
/*									*/ 
/* RangeBufferManagerAccessMethod can get the correct query result when */
/* the query has an *in* bounding box but the *notIn* list is empty,	*/
/* and when all records are fetched from low level data provider.	*/
/************************************************************************/

Query Result Records:

End of all memory residing records.

{40.3, 9, "str A", 2.6, "one"}
{40.3, 9, "str Atwo", 2.6, "one"}
{41.3, 8, "str B", 2.6, "two"}
{42.3, 7, "str C", 2.6, "three"}
{42.3, 7, "str Ctwo", 2.6, "three"}
{42.3, 7, "str Cthree", 2.6, "three"}
{43.3, 6, "str D", 2.6, "four"}
{43.3, 6, "str Dtwo", 2.6, "four"}
{44.3, 5, "str E 7890123", 2.6, "five"}
{44.3, 5, "str E 789012", 2.6, "five"}
End of records fetched from low level and end of all records.

Total number of records = 10

DEMO 2 ended successfully!


/************************************************************************/
/* DEMO 3: Query on Object 1. The first attr is the Bounding Box Attr.	*/
/* Issue the same query as in DEMO 2:					*/
/* In = [40, 45) ; NotIn = empty					*/
/*									*/ 
/* Based on our input files, 10 records should be returned. 		*/
/* All records should be returned directly from Memory,			*/
/* since we have just asked the same query in DEMO 2 above		*/
/************************************************************************/
/* What this demo shows:                                                */
/*                                                                      */
/* RangeBufferManagerAccessMethod can get the correct query result when */
/* the query has an *in* bounding box but the *notIn* list is empty,    */
/* and when all records have already been cached in memory previously 	*/
/* so that this time the query can be satisfied with and only with	*/
/* records in memory.							*/
/************************************************************************/

Query Result Records:

{40.3, 9, "str A", 2.6, "one"}
{40.3, 9, "str Atwo", 2.6, "one"}
{41.3, 8, "str B", 2.6, "two"}
{42.3, 7, "str C", 2.6, "three"}
{42.3, 7, "str Ctwo", 2.6, "three"}
{42.3, 7, "str Cthree", 2.6, "three"}
{43.3, 6, "str D", 2.6, "four"}
{43.3, 6, "str Dtwo", 2.6, "four"}
{44.3, 5, "str E 7890123", 2.6, "five"}
{44.3, 5, "str E 789012", 2.6, "five"}
End of all memory residing records.

End of records fetched from low level and end of all records.

Total number of records = 10

DEMO 3 ended successfully!


/************************************************************************/
/* DEMO 4: Query on Object 1. The first attr is the Bounding Box Attr.	*/
/* Issue the following query: In = (35.5, 44) ; NotIn = empty		*/
/*									*/ 
/* Based on our input files, 12 records should be returned. 		*/
/* 8 of them are in [40, 44), and will be returned from Memory directly */
/* 4 of them are in (35.5, 40), and will be fetched from low level	*/
/************************************************************************/
/* What this demo shows:                                                */
/*                                                                      */
/* RangeBufferManagerAccessMethod can get the correct query result when */
/* the query has an *in* bounding box but the *notIn* list is empty,    */
/* and when part of the query is already cached in memory but some more	*/
/* records still must be fetched from low level data provider		*/ 
/************************************************************************/

Query Result Records:

{40.3, 9, "str A", 2.6, "one"}
{40.3, 9, "str Atwo", 2.6, "one"}
{41.3, 8, "str B", 2.6, "two"}
{42.3, 7, "str C", 2.6, "three"}
{42.3, 7, "str Ctwo", 2.6, "three"}
{42.3, 7, "str Cthree", 2.6, "three"}
{43.3, 6, "str D", 2.6, "four"}
{43.3, 6, "str Dtwo", 2.6, "four"}
End of all memory residing records.

{36.3, 3, "str BB", 2.6, "two"}
{37.3, 2, "str CC", 2.6, "three"}
{38.3, 1, "str DD", 2.6, "four"}
{39.3, 0, "str E 7890123", 2.6, "five"}
End of records fetched from low level and end of all records.

Total number of records = 12

DEMO 4 ended successfully!


/************************************************************************/
/* DEMO 5: Query on Object 1. The first attr is the Bounding Box Attr.	*/
/* Issue the following query:						*/
/* In = (25, 47.3];							*/
/* NotIn = {(30, 33.3) (33.3, 37) (38, 41] [42, 47.3)}			*/
/*									*/
/* This is a complicated query with *notIn* holes. The *in* range and	*/
/* the *notIn* ranges all have overlaps with existing in-memory ranges.	*/ 
/*									*/ 
/* Based on our input files, 11 records should be returned. 		*/
/* 2 of them should be returned from Memory directly 			*/
/* 9 of them should be fetched from low level				*/
/************************************************************************/
/* What this demo shows:                                                */
/*                                                                      */
/* RangeBufferManagerAccessMethod can get correct query result when:	*/
/*                                                                      */
/* - The query has an *in* bounding box 				*/
/* - The query's *notIn* box has several elements			*/
/* - The *in* and *notIn* overlaps what's already in memory in a rather	*/
/*   complicated way							*/
/* - some of the records are already in memory but some must be fetched	*/
/*   from low level data provider					*/
/************************************************************************/

Query Result Records:

{37.3, 2, "str CC", 2.6, "three"}
{41.3, 8, "str B", 2.6, "two"}
End of all memory residing records.

{25.3, 4, "str AA", 2.6, "one"}
{26.3, 3, "str BB", 2.6, "two"}
{27.3, 2, "str CC", 2.6, "three"}
{28.3, 1, "str DD", 2.6, "four"}
{29.3, 0, "str E 7890123", 2.6, "five"}
{33.3, 6, "str D", 2.6, "four"}
{33.3, 6, "str Dtwo", 2.6, "four"}
{47.3, 2, "str CC", 2.6, "three"}
{47.3, 2, "str CC2", 2.6, "three"}
End of records fetched from low level and end of all records.

Total number of records = 11

DEMO 5 ended successfully!


/************************************************************************/
/* DEMO 6: Query on Object 2. The second attr is the Bounding Box Attr. */
/* Issue the following query:						*/
/* In = [2.7, 2.9];							*/
/* NotIn = empty							*/
/*									*/
/* Based on our input files, 6 records should be returned. 		*/
/* All 6 should be fetched from low level				*/
/************************************************************************/
/* What this demo shows:                                                */
/*                                                                      */
/* A second RangeBufferManagerAccessMethod can run query on ANOTHER	*/
/* object and the two objects can be organized correctly in the		*/
/* Range Buffer Manager.						*/
/************************************************************************/

Query Result Records:

End of all memory residing records.

{0.3, 9, "str A", 2.9, "one"}
{1.3, 8, "str B", 2.9, "two"}
{2.3, 7, "str C", 2.9, "three"}
{3.3, 6, "str D", 2.8, "four"}
{4.3, 5, "str E 7890123", 2.8, "five"}
{5.3, 4, "str AA", 2.7, "one"}
End of records fetched from low level and end of all records.

Total number of records = 6

DEMO 6 ended successfully!


/************************************************************************/
/* DEMO 7: Query on Object 1. The first attr is the Bounding Box Attr.  */
/* Issue the following query:						*/
/* In = (25, 47.3];							*/
/* NotIn = {[33.3, 33.3] (39, 41) [44, 47)}				*/
/*									*/
/* This is another complicated query with *notIn* holes. 		*/
/*									*/ 
/* Based on our input files, 21 records should be returned. 		*/
/* 16 of them should be returned from Memory directly 			*/
/* 5 of them should be fetched from low level				*/
/************************************************************************/
/* What this demo shows:                                                */
/*                                                                      */
/* RangeBufferManagerAccessMethod can get correct query result when:    */
/*                                                                      */
/* - The query has an *in* bounding box                                 */
/* - The query's *notIn* box has several elements                       */
/* - The *in* and *notIn* overlaps what's already in memory in a rather */
/*   complicated way                                                    */
/* - some of the records are already in memory but some must be fetched */
/*   from low level data provider                                       */
/*									*/
/* In addition, this demo shows that when the RangeBufferManager runs	*/
/* out of pages, it can choose a victim to kick out and make pages 	*/
/* availabe to the current query. See below where it says object 2	*/
/* (with only one page cached) has been chosen as a victim.		*/
/************************************************************************/

Query Result Records:

{25.3, 4, "str AA", 2.6, "one"}
{26.3, 3, "str BB", 2.6, "two"}
{27.3, 2, "str CC", 2.6, "three"}
{28.3, 1, "str DD", 2.6, "four"}
{29.3, 0, "str E 7890123", 2.6, "five"}
{36.3, 3, "str BB", 2.6, "two"}
{37.3, 2, "str CC", 2.6, "three"}
{38.3, 1, "str DD", 2.6, "four"}
{41.3, 8, "str B", 2.6, "two"}
{42.3, 7, "str C", 2.6, "three"}
{42.3, 7, "str Ctwo", 2.6, "three"}
{42.3, 7, "str Cthree", 2.6, "three"}
{43.3, 6, "str D", 2.6, "four"}
{43.3, 6, "str Dtwo", 2.6, "four"}
{47.3, 2, "str CC", 2.6, "three"}
{47.3, 2, "str CC2", 2.6, "three"}
End of all memory residing records.

{30.3, 9, "str A", 2.6, "one"}
{31.3, 8, "str B", 2.6, "two"}
{32.3, 7, "str C", 2.6, "three"}
------------------------------
Object 2 replaced as a victim.
------------------------------
{34.3, 5, "str E 7890123", 2.6, "five"}
{35.3, 4, "str AA", 2.6, "one"}
End of records fetched from low level and end of all records.

Total number of records = 21

DEMO 7 ended successfully!


/************************************************************************/
/* DEMO 8: Query on Object 2. The second attr is the Bounding Box Attr. */
/* Issue the following query:						*/
/* In = [2.6, 3];							*/
/* NotIn = empty							*/
/*									*/
/* Based on our input files, 107 records should be returned. 		*/
/* All 107 should be fetched from low level				*/
/************************************************************************/
/* What this demo shows:                                                */
/*                                                                      */
/* When there is a query on (pages of) records previously cached but	*/
/* later on chosen as victim, the records are re-brought into memory  	*/
/* and, in turn, another object is chosen to be kicked out.		*/
/* That is, we show replacement works here.				*/
/************************************************************************/

Query Result Records:

End of all memory residing records.

------------------------------
Object 1 replaced as a victim.
------------------------------
{0.3, 9, "str A", 2.9, "one"}
{1.3, 8, "str B", 2.9, "two"}
{2.3, 7, "str C", 2.9, "three"}
{3.3, 6, "str D", 2.8, "four"}
{4.3, 5, "str E 7890123", 2.8, "five"}
{5.3, 4, "str AA", 2.7, "one"}
{6.3, 3, "str BB", 2.6, "two"}
{7.3, 2, "str CC", 2.6, "three"}
{8.3, 1, "str DD", 2.6, "four"}
{9.3, 0, "str E 7890123", 2.6, "five"}
{10.3, 9, "str A", 2.6, "one"}
{11.3, 8, "str B", 2.6, "two"}
{12.3, 7, "str C", 2.6, "three"}
{13.3, 6, "str D", 2.6, "four"}
{14.3, 5, "str E 7890123", 2.6, "five"}
{15.3, 4, "str AA", 2.6, "one"}
{16.3, 3, "str BB", 2.6, "two"}
{17.3, 2, "str CC", 2.6, "three"}
{18.3, 1, "str DD", 2.6, "four"}
{19.3, 0, "str E 7890123", 2.6, "five"}
{20.3, 9, "str A", 2.6, "one"}
{21.3, 8, "str B", 2.6, "two"}
{22.3, 7, "str C", 2.6, "three"}
{23.3, 6, "str D", 2.6, "four"}
{24.3, 5, "str E 7890123", 2.6, "five"}
{25.3, 4, "str AA", 2.6, "one"}
{26.3, 3, "str BB", 2.6, "two"}
{27.3, 2, "str CC", 2.6, "three"}
{28.3, 1, "str DD", 2.6, "four"}
{29.3, 0, "str E 7890123", 2.6, "five"}
{30.3, 9, "str A", 2.6, "one"}
{31.3, 8, "str B", 2.6, "two"}
{32.3, 7, "str C", 2.6, "three"}
{33.3, 6, "str D", 2.6, "four"}
{33.3, 6, "str Dtwo", 2.6, "four"}
{34.3, 5, "str E 7890123", 2.6, "five"}
{35.3, 4, "str AA", 2.6, "one"}
{36.3, 3, "str BB", 2.6, "two"}
{37.3, 2, "str CC", 2.6, "three"}
{38.3, 1, "str DD", 2.6, "four"}
{39.3, 0, "str E 7890123", 2.6, "five"}
{40.3, 9, "str A", 2.6, "one"}
{40.3, 9, "str Atwo", 2.6, "one"}
{41.3, 8, "str B", 2.6, "two"}
{42.3, 7, "str C", 2.6, "three"}
{42.3, 7, "str Ctwo", 2.6, "three"}
{42.3, 7, "str Cthree", 2.6, "three"}
{43.3, 6, "str D", 2.6, "four"}
{43.3, 6, "str Dtwo", 2.6, "four"}
{44.3, 5, "str E 7890123", 2.6, "five"}
{44.3, 5, "str E 789012", 2.6, "five"}
{45.3, 4, "str AA", 2.6, "one"}
{46.3, 3, "str BB", 2.6, "two"}
{47.3, 2, "str CC", 2.6, "three"}
{47.3, 2, "str CC2", 2.6, "three"}
{48.3, 1, "str DD", 2.6, "four"}
{49.3, 0, "str E 7890123", 2.6, "five"}
{100.3, 9, "str A", 2.6, "one"}
{101.3, 8, "str B", 2.6, "two"}
{102.3, 7, "str C", 2.6, "three"}
{103.3, 6, "str D", 2.6, "four"}
{104.3, 5, "str E 7890123", 2.6, "five"}
{105.3, 4, "str AA", 2.6, "one"}
{106.3, 3, "str BB", 2.6, "two"}
{107.3, 2, "str CC", 2.6, "three"}
{108.3, 1, "str DD", 2.6, "four"}
{109.3, 0, "str E 7890123", 2.6, "five"}
{110.3, 9, "str A", 2.6, "one"}
{111.3, 8, "str B", 2.6, "two"}
{112.3, 7, "str C", 2.6, "three"}
{113.3, 6, "str D", 2.6, "four"}
{114.3, 5, "str E 7890123", 2.6, "five"}
{115.3, 4, "str AA", 2.6, "one"}
{116.3, 3, "str BB", 2.6, "two"}
{117.3, 2, "str CC", 2.6, "three"}
{118.3, 1, "str DD", 2.6, "four"}
{119.3, 0, "str E 7890123", 2.6, "five"}
{120.3, 9, "str A", 2.6, "one"}
{121.3, 8, "str B", 2.6, "two"}
{122.3, 7, "str C", 2.6, "three"}
{123.3, 6, "str D", 2.6, "four"}
{124.3, 5, "str E 7890123", 2.6, "five"}
{125.3, 4, "str AA", 2.6, "one"}
{126.3, 3, "str BB", 2.6, "two"}
{127.3, 2, "str CC", 2.6, "three"}
{128.3, 1, "str DD", 2.6, "four"}
{129.3, 0, "str E 7890123", 2.6, "five"}
{130.3, 9, "str A", 2.6, "one"}
{131.3, 8, "str B", 2.6, "two"}
{132.3, 7, "str C", 2.6, "three"}
{133.3, 6, "str D", 2.6, "four"}
{134.3, 5, "str E 7890123", 2.6, "five"}
{135.3, 4, "str AA", 2.6, "one"}
{136.3, 3, "str BB", 2.6, "two"}
{137.3, 2, "str CC", 2.6, "three"}
{138.3, 1, "str DD", 2.6, "four"}
{139.3, 0, "str E 7890123", 2.6, "five"}
{140.3, 9, "str A", 2.6, "one"}
{141.3, 8, "str B", 2.6, "two"}
{142.3, 7, "str C", 2.6, "three"}
{143.3, 6, "str D", 2.6, "four"}
{144.3, 5, "str E 7890123", 2.6, "five"}
{145.3, 4, "str AA", 2.6, "one"}
{146.3, 3, "str BB", 2.6, "two"}
{147.3, 2, "str CC", 2.6, "three"}
{148.3, 1, "str DD", 2.6, "four"}
{149.3, 0, "str E 7890123", 2.6, "five"}
End of records fetched from low level and end of all records.

Total number of records = 107

DEMO 8 ended successfully!


/************************************************************************/
/* DEMO 9: Query on Object 2. The second attr is the Bounding Box Attr. */
/* Issue the following query:						*/
/* In = [2.6, 3];							*/
/* NotIn = empty							*/
/*									*/
/* Based on our input files, 107 records should be returned. 		*/
/* All 107 should be fetched from memory directly			*/
/************************************************************************/
/* What this demo shows:                                                */
/*                                                                      */
/* This is the same query as the previous one. HOWEVER, this time all	*/
/* records are memory residing already.					*/
/* Just to show that in previous query we indeed brought all records	*/
/* into the memory.							*/
/************************************************************************/

Query Result Records:

{0.3, 9, "str A", 2.9, "one"}
{1.3, 8, "str B", 2.9, "two"}
{2.3, 7, "str C", 2.9, "three"}
{3.3, 6, "str D", 2.8, "four"}
{4.3, 5, "str E 7890123", 2.8, "five"}
{5.3, 4, "str AA", 2.7, "one"}
{6.3, 3, "str BB", 2.6, "two"}
{7.3, 2, "str CC", 2.6, "three"}
{8.3, 1, "str DD", 2.6, "four"}
{9.3, 0, "str E 7890123", 2.6, "five"}
{10.3, 9, "str A", 2.6, "one"}
{11.3, 8, "str B", 2.6, "two"}
{12.3, 7, "str C", 2.6, "three"}
{13.3, 6, "str D", 2.6, "four"}
{14.3, 5, "str E 7890123", 2.6, "five"}
{15.3, 4, "str AA", 2.6, "one"}
{16.3, 3, "str BB", 2.6, "two"}
{17.3, 2, "str CC", 2.6, "three"}
{18.3, 1, "str DD", 2.6, "four"}
{19.3, 0, "str E 7890123", 2.6, "five"}
{20.3, 9, "str A", 2.6, "one"}
{21.3, 8, "str B", 2.6, "two"}
{22.3, 7, "str C", 2.6, "three"}
{23.3, 6, "str D", 2.6, "four"}
{24.3, 5, "str E 7890123", 2.6, "five"}
{25.3, 4, "str AA", 2.6, "one"}
{26.3, 3, "str BB", 2.6, "two"}
{27.3, 2, "str CC", 2.6, "three"}
{28.3, 1, "str DD", 2.6, "four"}
{29.3, 0, "str E 7890123", 2.6, "five"}
{30.3, 9, "str A", 2.6, "one"}
{31.3, 8, "str B", 2.6, "two"}
{32.3, 7, "str C", 2.6, "three"}
{33.3, 6, "str D", 2.6, "four"}
{33.3, 6, "str Dtwo", 2.6, "four"}
{34.3, 5, "str E 7890123", 2.6, "five"}
{35.3, 4, "str AA", 2.6, "one"}
{36.3, 3, "str BB", 2.6, "two"}
{37.3, 2, "str CC", 2.6, "three"}
{38.3, 1, "str DD", 2.6, "four"}
{39.3, 0, "str E 7890123", 2.6, "five"}
{40.3, 9, "str A", 2.6, "one"}
{40.3, 9, "str Atwo", 2.6, "one"}
{41.3, 8, "str B", 2.6, "two"}
{42.3, 7, "str C", 2.6, "three"}
{42.3, 7, "str Ctwo", 2.6, "three"}
{42.3, 7, "str Cthree", 2.6, "three"}
{43.3, 6, "str D", 2.6, "four"}
{43.3, 6, "str Dtwo", 2.6, "four"}
{44.3, 5, "str E 7890123", 2.6, "five"}
{44.3, 5, "str E 789012", 2.6, "five"}
{45.3, 4, "str AA", 2.6, "one"}
{46.3, 3, "str BB", 2.6, "two"}
{47.3, 2, "str CC", 2.6, "three"}
{47.3, 2, "str CC2", 2.6, "three"}
{48.3, 1, "str DD", 2.6, "four"}
{49.3, 0, "str E 7890123", 2.6, "five"}
{100.3, 9, "str A", 2.6, "one"}
{101.3, 8, "str B", 2.6, "two"}
{102.3, 7, "str C", 2.6, "three"}
{103.3, 6, "str D", 2.6, "four"}
{104.3, 5, "str E 7890123", 2.6, "five"}
{105.3, 4, "str AA", 2.6, "one"}
{106.3, 3, "str BB", 2.6, "two"}
{107.3, 2, "str CC", 2.6, "three"}
{108.3, 1, "str DD", 2.6, "four"}
{109.3, 0, "str E 7890123", 2.6, "five"}
{110.3, 9, "str A", 2.6, "one"}
{111.3, 8, "str B", 2.6, "two"}
{112.3, 7, "str C", 2.6, "three"}
{113.3, 6, "str D", 2.6, "four"}
{114.3, 5, "str E 7890123", 2.6, "five"}
{115.3, 4, "str AA", 2.6, "one"}
{116.3, 3, "str BB", 2.6, "two"}
{117.3, 2, "str CC", 2.6, "three"}
{118.3, 1, "str DD", 2.6, "four"}
{119.3, 0, "str E 7890123", 2.6, "five"}
{120.3, 9, "str A", 2.6, "one"}
{121.3, 8, "str B", 2.6, "two"}
{122.3, 7, "str C", 2.6, "three"}
{123.3, 6, "str D", 2.6, "four"}
{124.3, 5, "str E 7890123", 2.6, "five"}
{125.3, 4, "str AA", 2.6, "one"}
{126.3, 3, "str BB", 2.6, "two"}
{127.3, 2, "str CC", 2.6, "three"}
{128.3, 1, "str DD", 2.6, "four"}
{129.3, 0, "str E 7890123", 2.6, "five"}
{130.3, 9, "str A", 2.6, "one"}
{131.3, 8, "str B", 2.6, "two"}
{132.3, 7, "str C", 2.6, "three"}
{133.3, 6, "str D", 2.6, "four"}
{134.3, 5, "str E 7890123", 2.6, "five"}
{135.3, 4, "str AA", 2.6, "one"}
{136.3, 3, "str BB", 2.6, "two"}
{137.3, 2, "str CC", 2.6, "three"}
{138.3, 1, "str DD", 2.6, "four"}
{139.3, 0, "str E 7890123", 2.6, "five"}
{140.3, 9, "str A", 2.6, "one"}
{141.3, 8, "str B", 2.6, "two"}
{142.3, 7, "str C", 2.6, "three"}
{143.3, 6, "str D", 2.6, "four"}
{144.3, 5, "str E 7890123", 2.6, "five"}
{145.3, 4, "str AA", 2.6, "one"}
{146.3, 3, "str BB", 2.6, "two"}
{147.3, 2, "str CC", 2.6, "three"}
{148.3, 1, "str DD", 2.6, "four"}
{149.3, 0, "str E 7890123", 2.6, "five"}
End of all memory residing records.

End of records fetched from low level and end of all records.

Total number of records = 107

DEMO 9 ended successfully!


/************************************************************************/
/*  		All demos ran successfully! Goodbye!			*/
/************************************************************************/

/************************************************************************/
/* Additional Comments: 						*/
/* 									*/
/* - All records returned before the comment *End of all memory ...*	*/
/*   are records fetched from memory directly.				*/
/* - All records returned after that are fetched from low level data	*/
/*   provider.								*/
/************************************************************************/
