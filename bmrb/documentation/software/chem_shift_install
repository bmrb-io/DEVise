		ChemShift Installation Instructions
		$Id$

* VERSION

These instructions are current as of ChemShift version 2.0.3.


* DESCRIPTION

ChemShift is a Java program, based on earlier Tcl scripts developed by
Gabriel Cornilescu, that calculates differences between actual and
predicted chemical shift values.


* NOTES

ChemShift uses NMRPipe (http://spin.niddk.nih.gov/bax/software/NMRPipe/)
and MOLMOL (http://www.mol.biol.ethz.ch/groups/wuthrich_group/software) to
do parts of the calculation.  Therefore, you must install NMRPipe and
MOLMOL before installing ChemShift.

ChemShift also needs Java 1.4 or higher, and Perl.


* TAR FILE

ChemShift is available as a tar file of the form ChemShift_<version>.tgz,
for example ChemShift_2.0.3.tgz.  The ChemShift 2.0.3 tar file can
be found at:
ftp://ftp.cs.wisc.edu/pub/devise/Devise-1.9.0.1/ChemShift_2.0.3.tgz

Get the appropriate tar file and untar it in the directory where you want
to install ChemShift.


* CONFIGURATION

Once you've untarred the software, most of the work is in configuring
things so that ChemShift can find the NMRPipe and MOLMOL software.

Look at the cs_config_* files and copy the one most similar to what
you need to cs_config.  Then edit cs_config to match your NMRPipe
and MOLMOL installations.  Also make sure that data_dir in the config
file points to the right directory.


* SETUP

Once you have the configuration file edited, run the command 'make setup'.
This will set up the data_dir link you need.


* TESTING

First, run 'make test1'.  You should get the following output files:

    test_out_avgs.out
    test_out_data.out
    test_out_histogram.out
    test_out_stats.out
    test_out_table.out
    test_out_weighted_correction.out

Make sure they contain good data.  The first line of each file should
be something like this:

    # Created at Mon Dec 22 11:42:34 CST 2008 by ChemShift version {2.0.3}

If this fails, try running the command

    java -classpath ChemShift.jar ChemShift -k 4974 2CI2 test_out

(-k means keep temporary files).  Temporary files include the following:

    4974_excluded.pdb
    4974_excluded.talos
    CalcSecondary.txt
    chemshift.mac
    csCalc.tab
    DC.out

Check those files for error messages.

If test1 worked okay, your basic ChemShift installation is okay.  Now
you need to test the server.  Run the following command:

     make server_test

Look at the ran_csr file to see whether the test worked.  The last line
should eventually look like this (note that it takes a little while
for the test to run even after the make command has returned):

    4974 2CI2 data_dir/test_out (Mon Dec 22 11:46:48 CST 2008): SUCCEEDED

(of course the timestamp will be different).

If this failed, look at the file csr.out for error messages.

Once you've run this test, be sure to kill off the test server.  Find
it by doing a command something like this:

    ps ax | grep csr_server

(obviously the exact ps arguments depend on what kind of system you're
on).  Look for the csr_server process that has the current directory as
its first argument, and kill it.


* CHEM SHIFT SERVER

Right now, we have a Perl server script that looks for a special csr_run
file in the data_dir directory.  This is the legacy of having to have
ChemShift work with a Peptide-CGI running on a different machine running
Windows.  Hopefully we'll simplify this setup in the future.

At any rate, the Perl script csr_server runs continuously and watches
for the appearance of a data_dir/csr.run file.  This file must contain
the arguments to the csr_wrapper script, which are:

    [-l] <bmrbid or inputfile> <pdbid> <output_name>

for example, "4974 2CI2 data_dir/test_out".

-l means local, in other words the next argument is a file path
rather than a BMRB accession number.

Once csr_server sees the csr.run file, it forks a csr_wrapper with
the given arguments.  Csr_wrapper runs the actual ChemShift program
moves the output files to the correct names, and touches the file
<output_name>.done.  If there was any error, it also touches
<output_name>.error.  The file ran_csr contains a list of all of the
arguments that ChemShift has been run with, and whether the runs
succeeded or failed.


* CRON JOB

Once everything is working, you need to create a cron job that makes
sure the csr_server is always running.  To do so, make an entry that
looks like this:

    * * * * * (cd <install directory>; ./check_server)

in your crontab file (where, of course, you replace <install directory>
with the appropriate directory name).

Make sure this starts up a csr_server process, and you are all set!


* COMMON PROBLEMS

One of the most common problems is simply that the chemical shift back
calculations don't work (ChemShift can't match the BMRB and PDB sequences,
or other problems).  These are inherent difficulties in doing the
calculation, as opposed to errors in the installation.

Sometimes it's a bit tricky to get the paths to all the components
of MOLMOL and NMRPipe set up correctly.  Especially with NMRPipe, I've
sometimes had to examine the scripts pretty carefully to get things
to work.  Also, you have to make sure that NMRPipe has all of its
environment variable set correctly.

Once in a while, the csr_server seems to not "see" the csr.run files
as quickly as it should, but this hasn't seemed to happen very much
recently.  (We're working on having Peptide-CGI call ChemShift directly,
and getting rid of the csr_server.  That setup is somewhat of a holdover
from when Peptide-CGI and ChemShift had to run on different machines.)
